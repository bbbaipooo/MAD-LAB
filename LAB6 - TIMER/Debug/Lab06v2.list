
Lab06v2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005410  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000005c  08005610  08005610  00015610  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800566c  0800566c  0002019c  2**0
                  CONTENTS
  4 .ARM          00000008  0800566c  0800566c  0001566c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005674  08005674  0002019c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005674  08005674  00015674  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005678  08005678  00015678  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  0800567c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  2000005c  080056d8  0002005c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  200000fc  08005778  000200fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          000008a0  2000019c  08005818  0002019c  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  20000a3c  08005818  00020a3c  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  0002019c  2**0
                  CONTENTS, READONLY
 14 .comment      00000043  00000000  00000000  000201ca  2**0
                  CONTENTS, READONLY
 15 .debug_info   00017276  00000000  00000000  0002020d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 0000324b  00000000  00000000  00037483  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00001340  00000000  00000000  0003a6d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 00000eef  00000000  00000000  0003ba10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  0002a448  00000000  00000000  0003c8ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   00018a32  00000000  00000000  00066d47  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    00104099  00000000  00000000  0007f779  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_frame  000055bc  00000000  00000000  00183814  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 0000005b  00000000  00000000  00188dd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	2000019c 	.word	0x2000019c
 800021c:	00000000 	.word	0x00000000
 8000220:	080055f8 	.word	0x080055f8

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200001a0 	.word	0x200001a0
 800023c:	080055f8 	.word	0x080055f8

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b970 	b.w	80005e8 <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9e08      	ldr	r6, [sp, #32]
 8000326:	460d      	mov	r5, r1
 8000328:	4604      	mov	r4, r0
 800032a:	460f      	mov	r7, r1
 800032c:	2b00      	cmp	r3, #0
 800032e:	d14a      	bne.n	80003c6 <__udivmoddi4+0xa6>
 8000330:	428a      	cmp	r2, r1
 8000332:	4694      	mov	ip, r2
 8000334:	d965      	bls.n	8000402 <__udivmoddi4+0xe2>
 8000336:	fab2 f382 	clz	r3, r2
 800033a:	b143      	cbz	r3, 800034e <__udivmoddi4+0x2e>
 800033c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000340:	f1c3 0220 	rsb	r2, r3, #32
 8000344:	409f      	lsls	r7, r3
 8000346:	fa20 f202 	lsr.w	r2, r0, r2
 800034a:	4317      	orrs	r7, r2
 800034c:	409c      	lsls	r4, r3
 800034e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000352:	fa1f f58c 	uxth.w	r5, ip
 8000356:	fbb7 f1fe 	udiv	r1, r7, lr
 800035a:	0c22      	lsrs	r2, r4, #16
 800035c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000360:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000364:	fb01 f005 	mul.w	r0, r1, r5
 8000368:	4290      	cmp	r0, r2
 800036a:	d90a      	bls.n	8000382 <__udivmoddi4+0x62>
 800036c:	eb1c 0202 	adds.w	r2, ip, r2
 8000370:	f101 37ff 	add.w	r7, r1, #4294967295
 8000374:	f080 811c 	bcs.w	80005b0 <__udivmoddi4+0x290>
 8000378:	4290      	cmp	r0, r2
 800037a:	f240 8119 	bls.w	80005b0 <__udivmoddi4+0x290>
 800037e:	3902      	subs	r1, #2
 8000380:	4462      	add	r2, ip
 8000382:	1a12      	subs	r2, r2, r0
 8000384:	b2a4      	uxth	r4, r4
 8000386:	fbb2 f0fe 	udiv	r0, r2, lr
 800038a:	fb0e 2210 	mls	r2, lr, r0, r2
 800038e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000392:	fb00 f505 	mul.w	r5, r0, r5
 8000396:	42a5      	cmp	r5, r4
 8000398:	d90a      	bls.n	80003b0 <__udivmoddi4+0x90>
 800039a:	eb1c 0404 	adds.w	r4, ip, r4
 800039e:	f100 32ff 	add.w	r2, r0, #4294967295
 80003a2:	f080 8107 	bcs.w	80005b4 <__udivmoddi4+0x294>
 80003a6:	42a5      	cmp	r5, r4
 80003a8:	f240 8104 	bls.w	80005b4 <__udivmoddi4+0x294>
 80003ac:	4464      	add	r4, ip
 80003ae:	3802      	subs	r0, #2
 80003b0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003b4:	1b64      	subs	r4, r4, r5
 80003b6:	2100      	movs	r1, #0
 80003b8:	b11e      	cbz	r6, 80003c2 <__udivmoddi4+0xa2>
 80003ba:	40dc      	lsrs	r4, r3
 80003bc:	2300      	movs	r3, #0
 80003be:	e9c6 4300 	strd	r4, r3, [r6]
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0xbc>
 80003ca:	2e00      	cmp	r6, #0
 80003cc:	f000 80ed 	beq.w	80005aa <__udivmoddi4+0x28a>
 80003d0:	2100      	movs	r1, #0
 80003d2:	e9c6 0500 	strd	r0, r5, [r6]
 80003d6:	4608      	mov	r0, r1
 80003d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003dc:	fab3 f183 	clz	r1, r3
 80003e0:	2900      	cmp	r1, #0
 80003e2:	d149      	bne.n	8000478 <__udivmoddi4+0x158>
 80003e4:	42ab      	cmp	r3, r5
 80003e6:	d302      	bcc.n	80003ee <__udivmoddi4+0xce>
 80003e8:	4282      	cmp	r2, r0
 80003ea:	f200 80f8 	bhi.w	80005de <__udivmoddi4+0x2be>
 80003ee:	1a84      	subs	r4, r0, r2
 80003f0:	eb65 0203 	sbc.w	r2, r5, r3
 80003f4:	2001      	movs	r0, #1
 80003f6:	4617      	mov	r7, r2
 80003f8:	2e00      	cmp	r6, #0
 80003fa:	d0e2      	beq.n	80003c2 <__udivmoddi4+0xa2>
 80003fc:	e9c6 4700 	strd	r4, r7, [r6]
 8000400:	e7df      	b.n	80003c2 <__udivmoddi4+0xa2>
 8000402:	b902      	cbnz	r2, 8000406 <__udivmoddi4+0xe6>
 8000404:	deff      	udf	#255	; 0xff
 8000406:	fab2 f382 	clz	r3, r2
 800040a:	2b00      	cmp	r3, #0
 800040c:	f040 8090 	bne.w	8000530 <__udivmoddi4+0x210>
 8000410:	1a8a      	subs	r2, r1, r2
 8000412:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000416:	fa1f fe8c 	uxth.w	lr, ip
 800041a:	2101      	movs	r1, #1
 800041c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000420:	fb07 2015 	mls	r0, r7, r5, r2
 8000424:	0c22      	lsrs	r2, r4, #16
 8000426:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800042a:	fb0e f005 	mul.w	r0, lr, r5
 800042e:	4290      	cmp	r0, r2
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x124>
 8000432:	eb1c 0202 	adds.w	r2, ip, r2
 8000436:	f105 38ff 	add.w	r8, r5, #4294967295
 800043a:	d202      	bcs.n	8000442 <__udivmoddi4+0x122>
 800043c:	4290      	cmp	r0, r2
 800043e:	f200 80cb 	bhi.w	80005d8 <__udivmoddi4+0x2b8>
 8000442:	4645      	mov	r5, r8
 8000444:	1a12      	subs	r2, r2, r0
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb2 f0f7 	udiv	r0, r2, r7
 800044c:	fb07 2210 	mls	r2, r7, r0, r2
 8000450:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000454:	fb0e fe00 	mul.w	lr, lr, r0
 8000458:	45a6      	cmp	lr, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x14e>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f100 32ff 	add.w	r2, r0, #4294967295
 8000464:	d202      	bcs.n	800046c <__udivmoddi4+0x14c>
 8000466:	45a6      	cmp	lr, r4
 8000468:	f200 80bb 	bhi.w	80005e2 <__udivmoddi4+0x2c2>
 800046c:	4610      	mov	r0, r2
 800046e:	eba4 040e 	sub.w	r4, r4, lr
 8000472:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000476:	e79f      	b.n	80003b8 <__udivmoddi4+0x98>
 8000478:	f1c1 0720 	rsb	r7, r1, #32
 800047c:	408b      	lsls	r3, r1
 800047e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000482:	ea4c 0c03 	orr.w	ip, ip, r3
 8000486:	fa05 f401 	lsl.w	r4, r5, r1
 800048a:	fa20 f307 	lsr.w	r3, r0, r7
 800048e:	40fd      	lsrs	r5, r7
 8000490:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000494:	4323      	orrs	r3, r4
 8000496:	fbb5 f8f9 	udiv	r8, r5, r9
 800049a:	fa1f fe8c 	uxth.w	lr, ip
 800049e:	fb09 5518 	mls	r5, r9, r8, r5
 80004a2:	0c1c      	lsrs	r4, r3, #16
 80004a4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80004a8:	fb08 f50e 	mul.w	r5, r8, lr
 80004ac:	42a5      	cmp	r5, r4
 80004ae:	fa02 f201 	lsl.w	r2, r2, r1
 80004b2:	fa00 f001 	lsl.w	r0, r0, r1
 80004b6:	d90b      	bls.n	80004d0 <__udivmoddi4+0x1b0>
 80004b8:	eb1c 0404 	adds.w	r4, ip, r4
 80004bc:	f108 3aff 	add.w	sl, r8, #4294967295
 80004c0:	f080 8088 	bcs.w	80005d4 <__udivmoddi4+0x2b4>
 80004c4:	42a5      	cmp	r5, r4
 80004c6:	f240 8085 	bls.w	80005d4 <__udivmoddi4+0x2b4>
 80004ca:	f1a8 0802 	sub.w	r8, r8, #2
 80004ce:	4464      	add	r4, ip
 80004d0:	1b64      	subs	r4, r4, r5
 80004d2:	b29d      	uxth	r5, r3
 80004d4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004d8:	fb09 4413 	mls	r4, r9, r3, r4
 80004dc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004e0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004e4:	45a6      	cmp	lr, r4
 80004e6:	d908      	bls.n	80004fa <__udivmoddi4+0x1da>
 80004e8:	eb1c 0404 	adds.w	r4, ip, r4
 80004ec:	f103 35ff 	add.w	r5, r3, #4294967295
 80004f0:	d26c      	bcs.n	80005cc <__udivmoddi4+0x2ac>
 80004f2:	45a6      	cmp	lr, r4
 80004f4:	d96a      	bls.n	80005cc <__udivmoddi4+0x2ac>
 80004f6:	3b02      	subs	r3, #2
 80004f8:	4464      	add	r4, ip
 80004fa:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004fe:	fba3 9502 	umull	r9, r5, r3, r2
 8000502:	eba4 040e 	sub.w	r4, r4, lr
 8000506:	42ac      	cmp	r4, r5
 8000508:	46c8      	mov	r8, r9
 800050a:	46ae      	mov	lr, r5
 800050c:	d356      	bcc.n	80005bc <__udivmoddi4+0x29c>
 800050e:	d053      	beq.n	80005b8 <__udivmoddi4+0x298>
 8000510:	b156      	cbz	r6, 8000528 <__udivmoddi4+0x208>
 8000512:	ebb0 0208 	subs.w	r2, r0, r8
 8000516:	eb64 040e 	sbc.w	r4, r4, lr
 800051a:	fa04 f707 	lsl.w	r7, r4, r7
 800051e:	40ca      	lsrs	r2, r1
 8000520:	40cc      	lsrs	r4, r1
 8000522:	4317      	orrs	r7, r2
 8000524:	e9c6 7400 	strd	r7, r4, [r6]
 8000528:	4618      	mov	r0, r3
 800052a:	2100      	movs	r1, #0
 800052c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000530:	f1c3 0120 	rsb	r1, r3, #32
 8000534:	fa02 fc03 	lsl.w	ip, r2, r3
 8000538:	fa20 f201 	lsr.w	r2, r0, r1
 800053c:	fa25 f101 	lsr.w	r1, r5, r1
 8000540:	409d      	lsls	r5, r3
 8000542:	432a      	orrs	r2, r5
 8000544:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000548:	fa1f fe8c 	uxth.w	lr, ip
 800054c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000550:	fb07 1510 	mls	r5, r7, r0, r1
 8000554:	0c11      	lsrs	r1, r2, #16
 8000556:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800055a:	fb00 f50e 	mul.w	r5, r0, lr
 800055e:	428d      	cmp	r5, r1
 8000560:	fa04 f403 	lsl.w	r4, r4, r3
 8000564:	d908      	bls.n	8000578 <__udivmoddi4+0x258>
 8000566:	eb1c 0101 	adds.w	r1, ip, r1
 800056a:	f100 38ff 	add.w	r8, r0, #4294967295
 800056e:	d22f      	bcs.n	80005d0 <__udivmoddi4+0x2b0>
 8000570:	428d      	cmp	r5, r1
 8000572:	d92d      	bls.n	80005d0 <__udivmoddi4+0x2b0>
 8000574:	3802      	subs	r0, #2
 8000576:	4461      	add	r1, ip
 8000578:	1b49      	subs	r1, r1, r5
 800057a:	b292      	uxth	r2, r2
 800057c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000580:	fb07 1115 	mls	r1, r7, r5, r1
 8000584:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000588:	fb05 f10e 	mul.w	r1, r5, lr
 800058c:	4291      	cmp	r1, r2
 800058e:	d908      	bls.n	80005a2 <__udivmoddi4+0x282>
 8000590:	eb1c 0202 	adds.w	r2, ip, r2
 8000594:	f105 38ff 	add.w	r8, r5, #4294967295
 8000598:	d216      	bcs.n	80005c8 <__udivmoddi4+0x2a8>
 800059a:	4291      	cmp	r1, r2
 800059c:	d914      	bls.n	80005c8 <__udivmoddi4+0x2a8>
 800059e:	3d02      	subs	r5, #2
 80005a0:	4462      	add	r2, ip
 80005a2:	1a52      	subs	r2, r2, r1
 80005a4:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80005a8:	e738      	b.n	800041c <__udivmoddi4+0xfc>
 80005aa:	4631      	mov	r1, r6
 80005ac:	4630      	mov	r0, r6
 80005ae:	e708      	b.n	80003c2 <__udivmoddi4+0xa2>
 80005b0:	4639      	mov	r1, r7
 80005b2:	e6e6      	b.n	8000382 <__udivmoddi4+0x62>
 80005b4:	4610      	mov	r0, r2
 80005b6:	e6fb      	b.n	80003b0 <__udivmoddi4+0x90>
 80005b8:	4548      	cmp	r0, r9
 80005ba:	d2a9      	bcs.n	8000510 <__udivmoddi4+0x1f0>
 80005bc:	ebb9 0802 	subs.w	r8, r9, r2
 80005c0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005c4:	3b01      	subs	r3, #1
 80005c6:	e7a3      	b.n	8000510 <__udivmoddi4+0x1f0>
 80005c8:	4645      	mov	r5, r8
 80005ca:	e7ea      	b.n	80005a2 <__udivmoddi4+0x282>
 80005cc:	462b      	mov	r3, r5
 80005ce:	e794      	b.n	80004fa <__udivmoddi4+0x1da>
 80005d0:	4640      	mov	r0, r8
 80005d2:	e7d1      	b.n	8000578 <__udivmoddi4+0x258>
 80005d4:	46d0      	mov	r8, sl
 80005d6:	e77b      	b.n	80004d0 <__udivmoddi4+0x1b0>
 80005d8:	3d02      	subs	r5, #2
 80005da:	4462      	add	r2, ip
 80005dc:	e732      	b.n	8000444 <__udivmoddi4+0x124>
 80005de:	4608      	mov	r0, r1
 80005e0:	e70a      	b.n	80003f8 <__udivmoddi4+0xd8>
 80005e2:	4464      	add	r4, ip
 80005e4:	3802      	subs	r0, #2
 80005e6:	e742      	b.n	800046e <__udivmoddi4+0x14e>

080005e8 <__aeabi_idiv0>:
 80005e8:	4770      	bx	lr
 80005ea:	bf00      	nop

080005ec <MX_ETH_Init>:

ETH_HandleTypeDef heth;

/* ETH init function */
void MX_ETH_Init(void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 80005f0:	4b1f      	ldr	r3, [pc, #124]	; (8000670 <MX_ETH_Init+0x84>)
 80005f2:	4a20      	ldr	r2, [pc, #128]	; (8000674 <MX_ETH_Init+0x88>)
 80005f4:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 80005f6:	4b20      	ldr	r3, [pc, #128]	; (8000678 <MX_ETH_Init+0x8c>)
 80005f8:	2200      	movs	r2, #0
 80005fa:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 80005fc:	4b1e      	ldr	r3, [pc, #120]	; (8000678 <MX_ETH_Init+0x8c>)
 80005fe:	2280      	movs	r2, #128	; 0x80
 8000600:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000602:	4b1d      	ldr	r3, [pc, #116]	; (8000678 <MX_ETH_Init+0x8c>)
 8000604:	22e1      	movs	r2, #225	; 0xe1
 8000606:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000608:	4b1b      	ldr	r3, [pc, #108]	; (8000678 <MX_ETH_Init+0x8c>)
 800060a:	2200      	movs	r2, #0
 800060c:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 800060e:	4b1a      	ldr	r3, [pc, #104]	; (8000678 <MX_ETH_Init+0x8c>)
 8000610:	2200      	movs	r2, #0
 8000612:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000614:	4b18      	ldr	r3, [pc, #96]	; (8000678 <MX_ETH_Init+0x8c>)
 8000616:	2200      	movs	r2, #0
 8000618:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 800061a:	4b15      	ldr	r3, [pc, #84]	; (8000670 <MX_ETH_Init+0x84>)
 800061c:	4a16      	ldr	r2, [pc, #88]	; (8000678 <MX_ETH_Init+0x8c>)
 800061e:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000620:	4b13      	ldr	r3, [pc, #76]	; (8000670 <MX_ETH_Init+0x84>)
 8000622:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000626:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000628:	4b11      	ldr	r3, [pc, #68]	; (8000670 <MX_ETH_Init+0x84>)
 800062a:	4a14      	ldr	r2, [pc, #80]	; (800067c <MX_ETH_Init+0x90>)
 800062c:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800062e:	4b10      	ldr	r3, [pc, #64]	; (8000670 <MX_ETH_Init+0x84>)
 8000630:	4a13      	ldr	r2, [pc, #76]	; (8000680 <MX_ETH_Init+0x94>)
 8000632:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000634:	4b0e      	ldr	r3, [pc, #56]	; (8000670 <MX_ETH_Init+0x84>)
 8000636:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800063a:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 800063c:	480c      	ldr	r0, [pc, #48]	; (8000670 <MX_ETH_Init+0x84>)
 800063e:	f000 fef5 	bl	800142c <HAL_ETH_Init>
 8000642:	4603      	mov	r3, r0
 8000644:	2b00      	cmp	r3, #0
 8000646:	d001      	beq.n	800064c <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8000648:	f000 fa5e 	bl	8000b08 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 800064c:	2238      	movs	r2, #56	; 0x38
 800064e:	2100      	movs	r1, #0
 8000650:	480c      	ldr	r0, [pc, #48]	; (8000684 <MX_ETH_Init+0x98>)
 8000652:	f004 fb4d 	bl	8004cf0 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000656:	4b0b      	ldr	r3, [pc, #44]	; (8000684 <MX_ETH_Init+0x98>)
 8000658:	2221      	movs	r2, #33	; 0x21
 800065a:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 800065c:	4b09      	ldr	r3, [pc, #36]	; (8000684 <MX_ETH_Init+0x98>)
 800065e:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 8000662:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000664:	4b07      	ldr	r3, [pc, #28]	; (8000684 <MX_ETH_Init+0x98>)
 8000666:	2200      	movs	r2, #0
 8000668:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 800066a:	bf00      	nop
 800066c:	bd80      	pop	{r7, pc}
 800066e:	bf00      	nop
 8000670:	200001f0 	.word	0x200001f0
 8000674:	40028000 	.word	0x40028000
 8000678:	200002a0 	.word	0x200002a0
 800067c:	200000fc 	.word	0x200000fc
 8000680:	2000005c 	.word	0x2000005c
 8000684:	200001b8 	.word	0x200001b8

08000688 <HAL_ETH_MspInit>:

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b08e      	sub	sp, #56	; 0x38
 800068c:	af00      	add	r7, sp, #0
 800068e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000690:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000694:	2200      	movs	r2, #0
 8000696:	601a      	str	r2, [r3, #0]
 8000698:	605a      	str	r2, [r3, #4]
 800069a:	609a      	str	r2, [r3, #8]
 800069c:	60da      	str	r2, [r3, #12]
 800069e:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	4a4e      	ldr	r2, [pc, #312]	; (80007e0 <HAL_ETH_MspInit+0x158>)
 80006a6:	4293      	cmp	r3, r2
 80006a8:	f040 8096 	bne.w	80007d8 <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* ETH clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 80006ac:	4b4d      	ldr	r3, [pc, #308]	; (80007e4 <HAL_ETH_MspInit+0x15c>)
 80006ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006b0:	4a4c      	ldr	r2, [pc, #304]	; (80007e4 <HAL_ETH_MspInit+0x15c>)
 80006b2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80006b6:	6313      	str	r3, [r2, #48]	; 0x30
 80006b8:	4b4a      	ldr	r3, [pc, #296]	; (80007e4 <HAL_ETH_MspInit+0x15c>)
 80006ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80006c0:	623b      	str	r3, [r7, #32]
 80006c2:	6a3b      	ldr	r3, [r7, #32]
 80006c4:	4b47      	ldr	r3, [pc, #284]	; (80007e4 <HAL_ETH_MspInit+0x15c>)
 80006c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006c8:	4a46      	ldr	r2, [pc, #280]	; (80007e4 <HAL_ETH_MspInit+0x15c>)
 80006ca:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80006ce:	6313      	str	r3, [r2, #48]	; 0x30
 80006d0:	4b44      	ldr	r3, [pc, #272]	; (80007e4 <HAL_ETH_MspInit+0x15c>)
 80006d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006d4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80006d8:	61fb      	str	r3, [r7, #28]
 80006da:	69fb      	ldr	r3, [r7, #28]
 80006dc:	4b41      	ldr	r3, [pc, #260]	; (80007e4 <HAL_ETH_MspInit+0x15c>)
 80006de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006e0:	4a40      	ldr	r2, [pc, #256]	; (80007e4 <HAL_ETH_MspInit+0x15c>)
 80006e2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80006e6:	6313      	str	r3, [r2, #48]	; 0x30
 80006e8:	4b3e      	ldr	r3, [pc, #248]	; (80007e4 <HAL_ETH_MspInit+0x15c>)
 80006ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80006f0:	61bb      	str	r3, [r7, #24]
 80006f2:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80006f4:	4b3b      	ldr	r3, [pc, #236]	; (80007e4 <HAL_ETH_MspInit+0x15c>)
 80006f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006f8:	4a3a      	ldr	r2, [pc, #232]	; (80007e4 <HAL_ETH_MspInit+0x15c>)
 80006fa:	f043 0304 	orr.w	r3, r3, #4
 80006fe:	6313      	str	r3, [r2, #48]	; 0x30
 8000700:	4b38      	ldr	r3, [pc, #224]	; (80007e4 <HAL_ETH_MspInit+0x15c>)
 8000702:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000704:	f003 0304 	and.w	r3, r3, #4
 8000708:	617b      	str	r3, [r7, #20]
 800070a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800070c:	4b35      	ldr	r3, [pc, #212]	; (80007e4 <HAL_ETH_MspInit+0x15c>)
 800070e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000710:	4a34      	ldr	r2, [pc, #208]	; (80007e4 <HAL_ETH_MspInit+0x15c>)
 8000712:	f043 0301 	orr.w	r3, r3, #1
 8000716:	6313      	str	r3, [r2, #48]	; 0x30
 8000718:	4b32      	ldr	r3, [pc, #200]	; (80007e4 <HAL_ETH_MspInit+0x15c>)
 800071a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800071c:	f003 0301 	and.w	r3, r3, #1
 8000720:	613b      	str	r3, [r7, #16]
 8000722:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000724:	4b2f      	ldr	r3, [pc, #188]	; (80007e4 <HAL_ETH_MspInit+0x15c>)
 8000726:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000728:	4a2e      	ldr	r2, [pc, #184]	; (80007e4 <HAL_ETH_MspInit+0x15c>)
 800072a:	f043 0302 	orr.w	r3, r3, #2
 800072e:	6313      	str	r3, [r2, #48]	; 0x30
 8000730:	4b2c      	ldr	r3, [pc, #176]	; (80007e4 <HAL_ETH_MspInit+0x15c>)
 8000732:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000734:	f003 0302 	and.w	r3, r3, #2
 8000738:	60fb      	str	r3, [r7, #12]
 800073a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800073c:	4b29      	ldr	r3, [pc, #164]	; (80007e4 <HAL_ETH_MspInit+0x15c>)
 800073e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000740:	4a28      	ldr	r2, [pc, #160]	; (80007e4 <HAL_ETH_MspInit+0x15c>)
 8000742:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000746:	6313      	str	r3, [r2, #48]	; 0x30
 8000748:	4b26      	ldr	r3, [pc, #152]	; (80007e4 <HAL_ETH_MspInit+0x15c>)
 800074a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800074c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000750:	60bb      	str	r3, [r7, #8]
 8000752:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000754:	2332      	movs	r3, #50	; 0x32
 8000756:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000758:	2302      	movs	r3, #2
 800075a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800075c:	2300      	movs	r3, #0
 800075e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000760:	2303      	movs	r3, #3
 8000762:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000764:	230b      	movs	r3, #11
 8000766:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000768:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800076c:	4619      	mov	r1, r3
 800076e:	481e      	ldr	r0, [pc, #120]	; (80007e8 <HAL_ETH_MspInit+0x160>)
 8000770:	f001 f982 	bl	8001a78 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000774:	2386      	movs	r3, #134	; 0x86
 8000776:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000778:	2302      	movs	r3, #2
 800077a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800077c:	2300      	movs	r3, #0
 800077e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000780:	2303      	movs	r3, #3
 8000782:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000784:	230b      	movs	r3, #11
 8000786:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000788:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800078c:	4619      	mov	r1, r3
 800078e:	4817      	ldr	r0, [pc, #92]	; (80007ec <HAL_ETH_MspInit+0x164>)
 8000790:	f001 f972 	bl	8001a78 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000794:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000798:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800079a:	2302      	movs	r3, #2
 800079c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800079e:	2300      	movs	r3, #0
 80007a0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007a2:	2303      	movs	r3, #3
 80007a4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80007a6:	230b      	movs	r3, #11
 80007a8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80007aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007ae:	4619      	mov	r1, r3
 80007b0:	480f      	ldr	r0, [pc, #60]	; (80007f0 <HAL_ETH_MspInit+0x168>)
 80007b2:	f001 f961 	bl	8001a78 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80007b6:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80007ba:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007bc:	2302      	movs	r3, #2
 80007be:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c0:	2300      	movs	r3, #0
 80007c2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007c4:	2303      	movs	r3, #3
 80007c6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80007c8:	230b      	movs	r3, #11
 80007ca:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80007cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007d0:	4619      	mov	r1, r3
 80007d2:	4808      	ldr	r0, [pc, #32]	; (80007f4 <HAL_ETH_MspInit+0x16c>)
 80007d4:	f001 f950 	bl	8001a78 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 80007d8:	bf00      	nop
 80007da:	3738      	adds	r7, #56	; 0x38
 80007dc:	46bd      	mov	sp, r7
 80007de:	bd80      	pop	{r7, pc}
 80007e0:	40028000 	.word	0x40028000
 80007e4:	40023800 	.word	0x40023800
 80007e8:	40020800 	.word	0x40020800
 80007ec:	40020000 	.word	0x40020000
 80007f0:	40020400 	.word	0x40020400
 80007f4:	40021800 	.word	0x40021800

080007f8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b08c      	sub	sp, #48	; 0x30
 80007fc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007fe:	f107 031c 	add.w	r3, r7, #28
 8000802:	2200      	movs	r2, #0
 8000804:	601a      	str	r2, [r3, #0]
 8000806:	605a      	str	r2, [r3, #4]
 8000808:	609a      	str	r2, [r3, #8]
 800080a:	60da      	str	r2, [r3, #12]
 800080c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800080e:	4b47      	ldr	r3, [pc, #284]	; (800092c <MX_GPIO_Init+0x134>)
 8000810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000812:	4a46      	ldr	r2, [pc, #280]	; (800092c <MX_GPIO_Init+0x134>)
 8000814:	f043 0304 	orr.w	r3, r3, #4
 8000818:	6313      	str	r3, [r2, #48]	; 0x30
 800081a:	4b44      	ldr	r3, [pc, #272]	; (800092c <MX_GPIO_Init+0x134>)
 800081c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081e:	f003 0304 	and.w	r3, r3, #4
 8000822:	61bb      	str	r3, [r7, #24]
 8000824:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000826:	4b41      	ldr	r3, [pc, #260]	; (800092c <MX_GPIO_Init+0x134>)
 8000828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082a:	4a40      	ldr	r2, [pc, #256]	; (800092c <MX_GPIO_Init+0x134>)
 800082c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000830:	6313      	str	r3, [r2, #48]	; 0x30
 8000832:	4b3e      	ldr	r3, [pc, #248]	; (800092c <MX_GPIO_Init+0x134>)
 8000834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000836:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800083a:	617b      	str	r3, [r7, #20]
 800083c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800083e:	4b3b      	ldr	r3, [pc, #236]	; (800092c <MX_GPIO_Init+0x134>)
 8000840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000842:	4a3a      	ldr	r2, [pc, #232]	; (800092c <MX_GPIO_Init+0x134>)
 8000844:	f043 0301 	orr.w	r3, r3, #1
 8000848:	6313      	str	r3, [r2, #48]	; 0x30
 800084a:	4b38      	ldr	r3, [pc, #224]	; (800092c <MX_GPIO_Init+0x134>)
 800084c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084e:	f003 0301 	and.w	r3, r3, #1
 8000852:	613b      	str	r3, [r7, #16]
 8000854:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000856:	4b35      	ldr	r3, [pc, #212]	; (800092c <MX_GPIO_Init+0x134>)
 8000858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800085a:	4a34      	ldr	r2, [pc, #208]	; (800092c <MX_GPIO_Init+0x134>)
 800085c:	f043 0302 	orr.w	r3, r3, #2
 8000860:	6313      	str	r3, [r2, #48]	; 0x30
 8000862:	4b32      	ldr	r3, [pc, #200]	; (800092c <MX_GPIO_Init+0x134>)
 8000864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000866:	f003 0302 	and.w	r3, r3, #2
 800086a:	60fb      	str	r3, [r7, #12]
 800086c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800086e:	4b2f      	ldr	r3, [pc, #188]	; (800092c <MX_GPIO_Init+0x134>)
 8000870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000872:	4a2e      	ldr	r2, [pc, #184]	; (800092c <MX_GPIO_Init+0x134>)
 8000874:	f043 0308 	orr.w	r3, r3, #8
 8000878:	6313      	str	r3, [r2, #48]	; 0x30
 800087a:	4b2c      	ldr	r3, [pc, #176]	; (800092c <MX_GPIO_Init+0x134>)
 800087c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800087e:	f003 0308 	and.w	r3, r3, #8
 8000882:	60bb      	str	r3, [r7, #8]
 8000884:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000886:	4b29      	ldr	r3, [pc, #164]	; (800092c <MX_GPIO_Init+0x134>)
 8000888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800088a:	4a28      	ldr	r2, [pc, #160]	; (800092c <MX_GPIO_Init+0x134>)
 800088c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000890:	6313      	str	r3, [r2, #48]	; 0x30
 8000892:	4b26      	ldr	r3, [pc, #152]	; (800092c <MX_GPIO_Init+0x134>)
 8000894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000896:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800089a:	607b      	str	r3, [r7, #4]
 800089c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800089e:	2200      	movs	r2, #0
 80008a0:	f244 0181 	movw	r1, #16513	; 0x4081
 80008a4:	4822      	ldr	r0, [pc, #136]	; (8000930 <MX_GPIO_Init+0x138>)
 80008a6:	f001 fa93 	bl	8001dd0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80008aa:	2200      	movs	r2, #0
 80008ac:	2140      	movs	r1, #64	; 0x40
 80008ae:	4821      	ldr	r0, [pc, #132]	; (8000934 <MX_GPIO_Init+0x13c>)
 80008b0:	f001 fa8e 	bl	8001dd0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80008b4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80008ba:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80008be:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c0:	2300      	movs	r3, #0
 80008c2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80008c4:	f107 031c 	add.w	r3, r7, #28
 80008c8:	4619      	mov	r1, r3
 80008ca:	481b      	ldr	r0, [pc, #108]	; (8000938 <MX_GPIO_Init+0x140>)
 80008cc:	f001 f8d4 	bl	8001a78 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80008d0:	f244 0381 	movw	r3, #16513	; 0x4081
 80008d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008d6:	2301      	movs	r3, #1
 80008d8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008da:	2300      	movs	r3, #0
 80008dc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008de:	2300      	movs	r3, #0
 80008e0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008e2:	f107 031c 	add.w	r3, r7, #28
 80008e6:	4619      	mov	r1, r3
 80008e8:	4811      	ldr	r0, [pc, #68]	; (8000930 <MX_GPIO_Init+0x138>)
 80008ea:	f001 f8c5 	bl	8001a78 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80008ee:	2340      	movs	r3, #64	; 0x40
 80008f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008f2:	2301      	movs	r3, #1
 80008f4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f6:	2300      	movs	r3, #0
 80008f8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008fa:	2300      	movs	r3, #0
 80008fc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80008fe:	f107 031c 	add.w	r3, r7, #28
 8000902:	4619      	mov	r1, r3
 8000904:	480b      	ldr	r0, [pc, #44]	; (8000934 <MX_GPIO_Init+0x13c>)
 8000906:	f001 f8b7 	bl	8001a78 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800090a:	2380      	movs	r3, #128	; 0x80
 800090c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800090e:	2300      	movs	r3, #0
 8000910:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000912:	2300      	movs	r3, #0
 8000914:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000916:	f107 031c 	add.w	r3, r7, #28
 800091a:	4619      	mov	r1, r3
 800091c:	4805      	ldr	r0, [pc, #20]	; (8000934 <MX_GPIO_Init+0x13c>)
 800091e:	f001 f8ab 	bl	8001a78 <HAL_GPIO_Init>

}
 8000922:	bf00      	nop
 8000924:	3730      	adds	r7, #48	; 0x30
 8000926:	46bd      	mov	sp, r7
 8000928:	bd80      	pop	{r7, pc}
 800092a:	bf00      	nop
 800092c:	40023800 	.word	0x40023800
 8000930:	40020400 	.word	0x40020400
 8000934:	40021800 	.word	0x40021800
 8000938:	40020800 	.word	0x40020800

0800093c <clock>:
uint32_t minutes;
uint32_t seconds;
char deci[10];


void clock(uint32_t count) {
 800093c:	b580      	push	{r7, lr}
 800093e:	b082      	sub	sp, #8
 8000940:	af00      	add	r7, sp, #0
 8000942:	6078      	str	r0, [r7, #4]
	totalSeconds = count / 1000;
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	4a20      	ldr	r2, [pc, #128]	; (80009c8 <clock+0x8c>)
 8000948:	fba2 2303 	umull	r2, r3, r2, r3
 800094c:	099b      	lsrs	r3, r3, #6
 800094e:	4a1f      	ldr	r2, [pc, #124]	; (80009cc <clock+0x90>)
 8000950:	6013      	str	r3, [r2, #0]
	minutes = totalSeconds / 60;
 8000952:	4b1e      	ldr	r3, [pc, #120]	; (80009cc <clock+0x90>)
 8000954:	681b      	ldr	r3, [r3, #0]
 8000956:	4a1e      	ldr	r2, [pc, #120]	; (80009d0 <clock+0x94>)
 8000958:	fba2 2303 	umull	r2, r3, r2, r3
 800095c:	095b      	lsrs	r3, r3, #5
 800095e:	4a1d      	ldr	r2, [pc, #116]	; (80009d4 <clock+0x98>)
 8000960:	6013      	str	r3, [r2, #0]
	seconds = totalSeconds % 60;
 8000962:	4b1a      	ldr	r3, [pc, #104]	; (80009cc <clock+0x90>)
 8000964:	6819      	ldr	r1, [r3, #0]
 8000966:	4b1a      	ldr	r3, [pc, #104]	; (80009d0 <clock+0x94>)
 8000968:	fba3 2301 	umull	r2, r3, r3, r1
 800096c:	095a      	lsrs	r2, r3, #5
 800096e:	4613      	mov	r3, r2
 8000970:	011b      	lsls	r3, r3, #4
 8000972:	1a9b      	subs	r3, r3, r2
 8000974:	009b      	lsls	r3, r3, #2
 8000976:	1aca      	subs	r2, r1, r3
 8000978:	4b17      	ldr	r3, [pc, #92]	; (80009d8 <clock+0x9c>)
 800097a:	601a      	str	r2, [r3, #0]

	sprintf(clockDisplay, "%02d:%02d", minutes, seconds);
 800097c:	4b15      	ldr	r3, [pc, #84]	; (80009d4 <clock+0x98>)
 800097e:	681a      	ldr	r2, [r3, #0]
 8000980:	4b15      	ldr	r3, [pc, #84]	; (80009d8 <clock+0x9c>)
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	4915      	ldr	r1, [pc, #84]	; (80009dc <clock+0xa0>)
 8000986:	4816      	ldr	r0, [pc, #88]	; (80009e0 <clock+0xa4>)
 8000988:	f004 f992 	bl	8004cb0 <siprintf>

	while(__HAL_UART_GET_FLAG(&huart3,UART_FLAG_TC)==RESET){}
 800098c:	bf00      	nop
 800098e:	4b15      	ldr	r3, [pc, #84]	; (80009e4 <clock+0xa8>)
 8000990:	681b      	ldr	r3, [r3, #0]
 8000992:	69db      	ldr	r3, [r3, #28]
 8000994:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000998:	2b40      	cmp	r3, #64	; 0x40
 800099a:	d1f8      	bne.n	800098e <clock+0x52>
	HAL_UART_Transmit(&huart3,(uint8_t*) clockDisplay, strlen(clockDisplay),1000);
 800099c:	4810      	ldr	r0, [pc, #64]	; (80009e0 <clock+0xa4>)
 800099e:	f7ff fc4f 	bl	8000240 <strlen>
 80009a2:	4603      	mov	r3, r0
 80009a4:	b29a      	uxth	r2, r3
 80009a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009aa:	490d      	ldr	r1, [pc, #52]	; (80009e0 <clock+0xa4>)
 80009ac:	480d      	ldr	r0, [pc, #52]	; (80009e4 <clock+0xa8>)
 80009ae:	f003 f9ed 	bl	8003d8c <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart3,(uint8_t*)"\r", 1,1000);
 80009b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009b6:	2201      	movs	r2, #1
 80009b8:	490b      	ldr	r1, [pc, #44]	; (80009e8 <clock+0xac>)
 80009ba:	480a      	ldr	r0, [pc, #40]	; (80009e4 <clock+0xa8>)
 80009bc:	f003 f9e6 	bl	8003d8c <HAL_UART_Transmit>


}
 80009c0:	bf00      	nop
 80009c2:	3708      	adds	r7, #8
 80009c4:	46bd      	mov	sp, r7
 80009c6:	bd80      	pop	{r7, pc}
 80009c8:	10624dd3 	.word	0x10624dd3
 80009cc:	200002b8 	.word	0x200002b8
 80009d0:	88888889 	.word	0x88888889
 80009d4:	200002bc 	.word	0x200002bc
 80009d8:	200002c0 	.word	0x200002c0
 80009dc:	08005610 	.word	0x08005610
 80009e0:	200002ac 	.word	0x200002ac
 80009e4:	20000360 	.word	0x20000360
 80009e8:	0800561c 	.word	0x0800561c

080009ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009f0:	f000 fb89 	bl	8001106 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009f4:	f000 f818 	bl	8000a28 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009f8:	f7ff fefe 	bl	80007f8 <MX_GPIO_Init>
  MX_ETH_Init();
 80009fc:	f7ff fdf6 	bl	80005ec <MX_ETH_Init>
  MX_USART3_UART_Init();
 8000a00:	f000 fa20 	bl	8000e44 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000a04:	f000 faae 	bl	8000f64 <MX_USB_OTG_FS_PCD_Init>
  MX_TIM1_Init();
 8000a08:	f000 f93a 	bl	8000c80 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000a0c:	f000 f98c 	bl	8000d28 <MX_TIM2_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	HAL_TIM_Base_Start_IT(&htim1);
 8000a10:	4803      	ldr	r0, [pc, #12]	; (8000a20 <main+0x34>)
 8000a12:	f002 fcf3 	bl	80033fc <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim2);
 8000a16:	4803      	ldr	r0, [pc, #12]	; (8000a24 <main+0x38>)
 8000a18:	f002 fcf0 	bl	80033fc <HAL_TIM_Base_Start_IT>
  while (1)
 8000a1c:	e7fe      	b.n	8000a1c <main+0x30>
 8000a1e:	bf00      	nop
 8000a20:	200002c8 	.word	0x200002c8
 8000a24:	20000314 	.word	0x20000314

08000a28 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b094      	sub	sp, #80	; 0x50
 8000a2c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a2e:	f107 031c 	add.w	r3, r7, #28
 8000a32:	2234      	movs	r2, #52	; 0x34
 8000a34:	2100      	movs	r1, #0
 8000a36:	4618      	mov	r0, r3
 8000a38:	f004 f95a 	bl	8004cf0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a3c:	f107 0308 	add.w	r3, r7, #8
 8000a40:	2200      	movs	r2, #0
 8000a42:	601a      	str	r2, [r3, #0]
 8000a44:	605a      	str	r2, [r3, #4]
 8000a46:	609a      	str	r2, [r3, #8]
 8000a48:	60da      	str	r2, [r3, #12]
 8000a4a:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000a4c:	f001 fb22 	bl	8002094 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a50:	4b2b      	ldr	r3, [pc, #172]	; (8000b00 <SystemClock_Config+0xd8>)
 8000a52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a54:	4a2a      	ldr	r2, [pc, #168]	; (8000b00 <SystemClock_Config+0xd8>)
 8000a56:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a5a:	6413      	str	r3, [r2, #64]	; 0x40
 8000a5c:	4b28      	ldr	r3, [pc, #160]	; (8000b00 <SystemClock_Config+0xd8>)
 8000a5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a60:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a64:	607b      	str	r3, [r7, #4]
 8000a66:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a68:	4b26      	ldr	r3, [pc, #152]	; (8000b04 <SystemClock_Config+0xdc>)
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	4a25      	ldr	r2, [pc, #148]	; (8000b04 <SystemClock_Config+0xdc>)
 8000a6e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000a72:	6013      	str	r3, [r2, #0]
 8000a74:	4b23      	ldr	r3, [pc, #140]	; (8000b04 <SystemClock_Config+0xdc>)
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000a7c:	603b      	str	r3, [r7, #0]
 8000a7e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a80:	2301      	movs	r3, #1
 8000a82:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000a84:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000a88:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a8a:	2302      	movs	r3, #2
 8000a8c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a8e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000a92:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000a94:	2304      	movs	r3, #4
 8000a96:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 216;
 8000a98:	23d8      	movs	r3, #216	; 0xd8
 8000a9a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000a9c:	2302      	movs	r3, #2
 8000a9e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8000aa0:	2309      	movs	r3, #9
 8000aa2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000aa4:	2302      	movs	r3, #2
 8000aa6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000aa8:	f107 031c 	add.w	r3, r7, #28
 8000aac:	4618      	mov	r0, r3
 8000aae:	f001 fb51 	bl	8002154 <HAL_RCC_OscConfig>
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d001      	beq.n	8000abc <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000ab8:	f000 f826 	bl	8000b08 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000abc:	f001 fafa 	bl	80020b4 <HAL_PWREx_EnableOverDrive>
 8000ac0:	4603      	mov	r3, r0
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d001      	beq.n	8000aca <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8000ac6:	f000 f81f 	bl	8000b08 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000aca:	230f      	movs	r3, #15
 8000acc:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ace:	2302      	movs	r3, #2
 8000ad0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000ad6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000ada:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000adc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ae0:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000ae2:	f107 0308 	add.w	r3, r7, #8
 8000ae6:	2107      	movs	r1, #7
 8000ae8:	4618      	mov	r0, r3
 8000aea:	f001 fde1 	bl	80026b0 <HAL_RCC_ClockConfig>
 8000aee:	4603      	mov	r3, r0
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d001      	beq.n	8000af8 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8000af4:	f000 f808 	bl	8000b08 <Error_Handler>
  }
}
 8000af8:	bf00      	nop
 8000afa:	3750      	adds	r7, #80	; 0x50
 8000afc:	46bd      	mov	sp, r7
 8000afe:	bd80      	pop	{r7, pc}
 8000b00:	40023800 	.word	0x40023800
 8000b04:	40007000 	.word	0x40007000

08000b08 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b0c:	b672      	cpsid	i
}
 8000b0e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b10:	e7fe      	b.n	8000b10 <Error_Handler+0x8>
	...

08000b14 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b14:	b480      	push	{r7}
 8000b16:	b083      	sub	sp, #12
 8000b18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000b1a:	4b0f      	ldr	r3, [pc, #60]	; (8000b58 <HAL_MspInit+0x44>)
 8000b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b1e:	4a0e      	ldr	r2, [pc, #56]	; (8000b58 <HAL_MspInit+0x44>)
 8000b20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b24:	6413      	str	r3, [r2, #64]	; 0x40
 8000b26:	4b0c      	ldr	r3, [pc, #48]	; (8000b58 <HAL_MspInit+0x44>)
 8000b28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b2e:	607b      	str	r3, [r7, #4]
 8000b30:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b32:	4b09      	ldr	r3, [pc, #36]	; (8000b58 <HAL_MspInit+0x44>)
 8000b34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b36:	4a08      	ldr	r2, [pc, #32]	; (8000b58 <HAL_MspInit+0x44>)
 8000b38:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b3c:	6453      	str	r3, [r2, #68]	; 0x44
 8000b3e:	4b06      	ldr	r3, [pc, #24]	; (8000b58 <HAL_MspInit+0x44>)
 8000b40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b42:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b46:	603b      	str	r3, [r7, #0]
 8000b48:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b4a:	bf00      	nop
 8000b4c:	370c      	adds	r7, #12
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop
 8000b58:	40023800 	.word	0x40023800

08000b5c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b60:	e7fe      	b.n	8000b60 <NMI_Handler+0x4>

08000b62 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b62:	b480      	push	{r7}
 8000b64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b66:	e7fe      	b.n	8000b66 <HardFault_Handler+0x4>

08000b68 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b6c:	e7fe      	b.n	8000b6c <MemManage_Handler+0x4>

08000b6e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b6e:	b480      	push	{r7}
 8000b70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b72:	e7fe      	b.n	8000b72 <BusFault_Handler+0x4>

08000b74 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b74:	b480      	push	{r7}
 8000b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b78:	e7fe      	b.n	8000b78 <UsageFault_Handler+0x4>

08000b7a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b7a:	b480      	push	{r7}
 8000b7c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b7e:	bf00      	nop
 8000b80:	46bd      	mov	sp, r7
 8000b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b86:	4770      	bx	lr

08000b88 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b8c:	bf00      	nop
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b94:	4770      	bx	lr

08000b96 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b96:	b480      	push	{r7}
 8000b98:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b9a:	bf00      	nop
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba2:	4770      	bx	lr

08000ba4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ba8:	f000 faea 	bl	8001180 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bac:	bf00      	nop
 8000bae:	bd80      	pop	{r7, pc}

08000bb0 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000bb4:	4804      	ldr	r0, [pc, #16]	; (8000bc8 <TIM1_UP_TIM10_IRQHandler+0x18>)
 8000bb6:	f002 fc99 	bl	80034ec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */
  count++;
 8000bba:	4b04      	ldr	r3, [pc, #16]	; (8000bcc <TIM1_UP_TIM10_IRQHandler+0x1c>)
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	3301      	adds	r3, #1
 8000bc0:	4a02      	ldr	r2, [pc, #8]	; (8000bcc <TIM1_UP_TIM10_IRQHandler+0x1c>)
 8000bc2:	6013      	str	r3, [r2, #0]
  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000bc4:	bf00      	nop
 8000bc6:	bd80      	pop	{r7, pc}
 8000bc8:	200002c8 	.word	0x200002c8
 8000bcc:	200002a8 	.word	0x200002a8

08000bd0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000bd4:	4804      	ldr	r0, [pc, #16]	; (8000be8 <TIM2_IRQHandler+0x18>)
 8000bd6:	f002 fc89 	bl	80034ec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */
  clock(count);
 8000bda:	4b04      	ldr	r3, [pc, #16]	; (8000bec <TIM2_IRQHandler+0x1c>)
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	4618      	mov	r0, r3
 8000be0:	f7ff feac 	bl	800093c <clock>
  /* USER CODE END TIM2_IRQn 1 */
}
 8000be4:	bf00      	nop
 8000be6:	bd80      	pop	{r7, pc}
 8000be8:	20000314 	.word	0x20000314
 8000bec:	200002a8 	.word	0x200002a8

08000bf0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b086      	sub	sp, #24
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000bf8:	4a14      	ldr	r2, [pc, #80]	; (8000c4c <_sbrk+0x5c>)
 8000bfa:	4b15      	ldr	r3, [pc, #84]	; (8000c50 <_sbrk+0x60>)
 8000bfc:	1ad3      	subs	r3, r2, r3
 8000bfe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c00:	697b      	ldr	r3, [r7, #20]
 8000c02:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c04:	4b13      	ldr	r3, [pc, #76]	; (8000c54 <_sbrk+0x64>)
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d102      	bne.n	8000c12 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c0c:	4b11      	ldr	r3, [pc, #68]	; (8000c54 <_sbrk+0x64>)
 8000c0e:	4a12      	ldr	r2, [pc, #72]	; (8000c58 <_sbrk+0x68>)
 8000c10:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c12:	4b10      	ldr	r3, [pc, #64]	; (8000c54 <_sbrk+0x64>)
 8000c14:	681a      	ldr	r2, [r3, #0]
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	4413      	add	r3, r2
 8000c1a:	693a      	ldr	r2, [r7, #16]
 8000c1c:	429a      	cmp	r2, r3
 8000c1e:	d207      	bcs.n	8000c30 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c20:	f004 f86e 	bl	8004d00 <__errno>
 8000c24:	4603      	mov	r3, r0
 8000c26:	220c      	movs	r2, #12
 8000c28:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c2a:	f04f 33ff 	mov.w	r3, #4294967295
 8000c2e:	e009      	b.n	8000c44 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c30:	4b08      	ldr	r3, [pc, #32]	; (8000c54 <_sbrk+0x64>)
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c36:	4b07      	ldr	r3, [pc, #28]	; (8000c54 <_sbrk+0x64>)
 8000c38:	681a      	ldr	r2, [r3, #0]
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	4413      	add	r3, r2
 8000c3e:	4a05      	ldr	r2, [pc, #20]	; (8000c54 <_sbrk+0x64>)
 8000c40:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c42:	68fb      	ldr	r3, [r7, #12]
}
 8000c44:	4618      	mov	r0, r3
 8000c46:	3718      	adds	r7, #24
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	bd80      	pop	{r7, pc}
 8000c4c:	20080000 	.word	0x20080000
 8000c50:	00000400 	.word	0x00000400
 8000c54:	200002c4 	.word	0x200002c4
 8000c58:	20000a40 	.word	0x20000a40

08000c5c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c60:	4b06      	ldr	r3, [pc, #24]	; (8000c7c <SystemInit+0x20>)
 8000c62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c66:	4a05      	ldr	r2, [pc, #20]	; (8000c7c <SystemInit+0x20>)
 8000c68:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c6c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c70:	bf00      	nop
 8000c72:	46bd      	mov	sp, r7
 8000c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c78:	4770      	bx	lr
 8000c7a:	bf00      	nop
 8000c7c:	e000ed00 	.word	0xe000ed00

08000c80 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim2;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b088      	sub	sp, #32
 8000c84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c86:	f107 0310 	add.w	r3, r7, #16
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	601a      	str	r2, [r3, #0]
 8000c8e:	605a      	str	r2, [r3, #4]
 8000c90:	609a      	str	r2, [r3, #8]
 8000c92:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c94:	1d3b      	adds	r3, r7, #4
 8000c96:	2200      	movs	r2, #0
 8000c98:	601a      	str	r2, [r3, #0]
 8000c9a:	605a      	str	r2, [r3, #4]
 8000c9c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000c9e:	4b20      	ldr	r3, [pc, #128]	; (8000d20 <MX_TIM1_Init+0xa0>)
 8000ca0:	4a20      	ldr	r2, [pc, #128]	; (8000d24 <MX_TIM1_Init+0xa4>)
 8000ca2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 216-1;
 8000ca4:	4b1e      	ldr	r3, [pc, #120]	; (8000d20 <MX_TIM1_Init+0xa0>)
 8000ca6:	22d7      	movs	r2, #215	; 0xd7
 8000ca8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000caa:	4b1d      	ldr	r3, [pc, #116]	; (8000d20 <MX_TIM1_Init+0xa0>)
 8000cac:	2200      	movs	r2, #0
 8000cae:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000-1;
 8000cb0:	4b1b      	ldr	r3, [pc, #108]	; (8000d20 <MX_TIM1_Init+0xa0>)
 8000cb2:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000cb6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000cb8:	4b19      	ldr	r3, [pc, #100]	; (8000d20 <MX_TIM1_Init+0xa0>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000cbe:	4b18      	ldr	r3, [pc, #96]	; (8000d20 <MX_TIM1_Init+0xa0>)
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cc4:	4b16      	ldr	r3, [pc, #88]	; (8000d20 <MX_TIM1_Init+0xa0>)
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000cca:	4815      	ldr	r0, [pc, #84]	; (8000d20 <MX_TIM1_Init+0xa0>)
 8000ccc:	f002 fb3e 	bl	800334c <HAL_TIM_Base_Init>
 8000cd0:	4603      	mov	r3, r0
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d001      	beq.n	8000cda <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8000cd6:	f7ff ff17 	bl	8000b08 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000cda:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000cde:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000ce0:	f107 0310 	add.w	r3, r7, #16
 8000ce4:	4619      	mov	r1, r3
 8000ce6:	480e      	ldr	r0, [pc, #56]	; (8000d20 <MX_TIM1_Init+0xa0>)
 8000ce8:	f002 fd20 	bl	800372c <HAL_TIM_ConfigClockSource>
 8000cec:	4603      	mov	r3, r0
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d001      	beq.n	8000cf6 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8000cf2:	f7ff ff09 	bl	8000b08 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000d02:	1d3b      	adds	r3, r7, #4
 8000d04:	4619      	mov	r1, r3
 8000d06:	4806      	ldr	r0, [pc, #24]	; (8000d20 <MX_TIM1_Init+0xa0>)
 8000d08:	f002 ff46 	bl	8003b98 <HAL_TIMEx_MasterConfigSynchronization>
 8000d0c:	4603      	mov	r3, r0
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d001      	beq.n	8000d16 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000d12:	f7ff fef9 	bl	8000b08 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000d16:	bf00      	nop
 8000d18:	3720      	adds	r7, #32
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	bd80      	pop	{r7, pc}
 8000d1e:	bf00      	nop
 8000d20:	200002c8 	.word	0x200002c8
 8000d24:	40010000 	.word	0x40010000

08000d28 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b088      	sub	sp, #32
 8000d2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d2e:	f107 0310 	add.w	r3, r7, #16
 8000d32:	2200      	movs	r2, #0
 8000d34:	601a      	str	r2, [r3, #0]
 8000d36:	605a      	str	r2, [r3, #4]
 8000d38:	609a      	str	r2, [r3, #8]
 8000d3a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d3c:	1d3b      	adds	r3, r7, #4
 8000d3e:	2200      	movs	r2, #0
 8000d40:	601a      	str	r2, [r3, #0]
 8000d42:	605a      	str	r2, [r3, #4]
 8000d44:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000d46:	4b1e      	ldr	r3, [pc, #120]	; (8000dc0 <MX_TIM2_Init+0x98>)
 8000d48:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000d4c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 43200-1;
 8000d4e:	4b1c      	ldr	r3, [pc, #112]	; (8000dc0 <MX_TIM2_Init+0x98>)
 8000d50:	f64a 02bf 	movw	r2, #43199	; 0xa8bf
 8000d54:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d56:	4b1a      	ldr	r3, [pc, #104]	; (8000dc0 <MX_TIM2_Init+0x98>)
 8000d58:	2200      	movs	r2, #0
 8000d5a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 8000d5c:	4b18      	ldr	r3, [pc, #96]	; (8000dc0 <MX_TIM2_Init+0x98>)
 8000d5e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000d62:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d64:	4b16      	ldr	r3, [pc, #88]	; (8000dc0 <MX_TIM2_Init+0x98>)
 8000d66:	2200      	movs	r2, #0
 8000d68:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d6a:	4b15      	ldr	r3, [pc, #84]	; (8000dc0 <MX_TIM2_Init+0x98>)
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000d70:	4813      	ldr	r0, [pc, #76]	; (8000dc0 <MX_TIM2_Init+0x98>)
 8000d72:	f002 faeb 	bl	800334c <HAL_TIM_Base_Init>
 8000d76:	4603      	mov	r3, r0
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d001      	beq.n	8000d80 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8000d7c:	f7ff fec4 	bl	8000b08 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d80:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d84:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000d86:	f107 0310 	add.w	r3, r7, #16
 8000d8a:	4619      	mov	r1, r3
 8000d8c:	480c      	ldr	r0, [pc, #48]	; (8000dc0 <MX_TIM2_Init+0x98>)
 8000d8e:	f002 fccd 	bl	800372c <HAL_TIM_ConfigClockSource>
 8000d92:	4603      	mov	r3, r0
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d001      	beq.n	8000d9c <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8000d98:	f7ff feb6 	bl	8000b08 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000da0:	2300      	movs	r3, #0
 8000da2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000da4:	1d3b      	adds	r3, r7, #4
 8000da6:	4619      	mov	r1, r3
 8000da8:	4805      	ldr	r0, [pc, #20]	; (8000dc0 <MX_TIM2_Init+0x98>)
 8000daa:	f002 fef5 	bl	8003b98 <HAL_TIMEx_MasterConfigSynchronization>
 8000dae:	4603      	mov	r3, r0
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d001      	beq.n	8000db8 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8000db4:	f7ff fea8 	bl	8000b08 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000db8:	bf00      	nop
 8000dba:	3720      	adds	r7, #32
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	bd80      	pop	{r7, pc}
 8000dc0:	20000314 	.word	0x20000314

08000dc4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b084      	sub	sp, #16
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	4a1a      	ldr	r2, [pc, #104]	; (8000e3c <HAL_TIM_Base_MspInit+0x78>)
 8000dd2:	4293      	cmp	r3, r2
 8000dd4:	d114      	bne.n	8000e00 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000dd6:	4b1a      	ldr	r3, [pc, #104]	; (8000e40 <HAL_TIM_Base_MspInit+0x7c>)
 8000dd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dda:	4a19      	ldr	r2, [pc, #100]	; (8000e40 <HAL_TIM_Base_MspInit+0x7c>)
 8000ddc:	f043 0301 	orr.w	r3, r3, #1
 8000de0:	6453      	str	r3, [r2, #68]	; 0x44
 8000de2:	4b17      	ldr	r3, [pc, #92]	; (8000e40 <HAL_TIM_Base_MspInit+0x7c>)
 8000de4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000de6:	f003 0301 	and.w	r3, r3, #1
 8000dea:	60fb      	str	r3, [r7, #12]
 8000dec:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 1, 0);
 8000dee:	2200      	movs	r2, #0
 8000df0:	2101      	movs	r1, #1
 8000df2:	2019      	movs	r0, #25
 8000df4:	f000 fae3 	bl	80013be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000df8:	2019      	movs	r0, #25
 8000dfa:	f000 fafc 	bl	80013f6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8000dfe:	e018      	b.n	8000e32 <HAL_TIM_Base_MspInit+0x6e>
  else if(tim_baseHandle->Instance==TIM2)
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000e08:	d113      	bne.n	8000e32 <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000e0a:	4b0d      	ldr	r3, [pc, #52]	; (8000e40 <HAL_TIM_Base_MspInit+0x7c>)
 8000e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e0e:	4a0c      	ldr	r2, [pc, #48]	; (8000e40 <HAL_TIM_Base_MspInit+0x7c>)
 8000e10:	f043 0301 	orr.w	r3, r3, #1
 8000e14:	6413      	str	r3, [r2, #64]	; 0x40
 8000e16:	4b0a      	ldr	r3, [pc, #40]	; (8000e40 <HAL_TIM_Base_MspInit+0x7c>)
 8000e18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e1a:	f003 0301 	and.w	r3, r3, #1
 8000e1e:	60bb      	str	r3, [r7, #8]
 8000e20:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 2, 0);
 8000e22:	2200      	movs	r2, #0
 8000e24:	2102      	movs	r1, #2
 8000e26:	201c      	movs	r0, #28
 8000e28:	f000 fac9 	bl	80013be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000e2c:	201c      	movs	r0, #28
 8000e2e:	f000 fae2 	bl	80013f6 <HAL_NVIC_EnableIRQ>
}
 8000e32:	bf00      	nop
 8000e34:	3710      	adds	r7, #16
 8000e36:	46bd      	mov	sp, r7
 8000e38:	bd80      	pop	{r7, pc}
 8000e3a:	bf00      	nop
 8000e3c:	40010000 	.word	0x40010000
 8000e40:	40023800 	.word	0x40023800

08000e44 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000e48:	4b14      	ldr	r3, [pc, #80]	; (8000e9c <MX_USART3_UART_Init+0x58>)
 8000e4a:	4a15      	ldr	r2, [pc, #84]	; (8000ea0 <MX_USART3_UART_Init+0x5c>)
 8000e4c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000e4e:	4b13      	ldr	r3, [pc, #76]	; (8000e9c <MX_USART3_UART_Init+0x58>)
 8000e50:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000e54:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000e56:	4b11      	ldr	r3, [pc, #68]	; (8000e9c <MX_USART3_UART_Init+0x58>)
 8000e58:	2200      	movs	r2, #0
 8000e5a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000e5c:	4b0f      	ldr	r3, [pc, #60]	; (8000e9c <MX_USART3_UART_Init+0x58>)
 8000e5e:	2200      	movs	r2, #0
 8000e60:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000e62:	4b0e      	ldr	r3, [pc, #56]	; (8000e9c <MX_USART3_UART_Init+0x58>)
 8000e64:	2200      	movs	r2, #0
 8000e66:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000e68:	4b0c      	ldr	r3, [pc, #48]	; (8000e9c <MX_USART3_UART_Init+0x58>)
 8000e6a:	220c      	movs	r2, #12
 8000e6c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e6e:	4b0b      	ldr	r3, [pc, #44]	; (8000e9c <MX_USART3_UART_Init+0x58>)
 8000e70:	2200      	movs	r2, #0
 8000e72:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e74:	4b09      	ldr	r3, [pc, #36]	; (8000e9c <MX_USART3_UART_Init+0x58>)
 8000e76:	2200      	movs	r2, #0
 8000e78:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000e7a:	4b08      	ldr	r3, [pc, #32]	; (8000e9c <MX_USART3_UART_Init+0x58>)
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000e80:	4b06      	ldr	r3, [pc, #24]	; (8000e9c <MX_USART3_UART_Init+0x58>)
 8000e82:	2200      	movs	r2, #0
 8000e84:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000e86:	4805      	ldr	r0, [pc, #20]	; (8000e9c <MX_USART3_UART_Init+0x58>)
 8000e88:	f002 ff32 	bl	8003cf0 <HAL_UART_Init>
 8000e8c:	4603      	mov	r3, r0
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d001      	beq.n	8000e96 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000e92:	f7ff fe39 	bl	8000b08 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000e96:	bf00      	nop
 8000e98:	bd80      	pop	{r7, pc}
 8000e9a:	bf00      	nop
 8000e9c:	20000360 	.word	0x20000360
 8000ea0:	40004800 	.word	0x40004800

08000ea4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b0ae      	sub	sp, #184	; 0xb8
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eac:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	601a      	str	r2, [r3, #0]
 8000eb4:	605a      	str	r2, [r3, #4]
 8000eb6:	609a      	str	r2, [r3, #8]
 8000eb8:	60da      	str	r2, [r3, #12]
 8000eba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ebc:	f107 0314 	add.w	r3, r7, #20
 8000ec0:	2290      	movs	r2, #144	; 0x90
 8000ec2:	2100      	movs	r1, #0
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	f003 ff13 	bl	8004cf0 <memset>
  if(uartHandle->Instance==USART3)
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	4a22      	ldr	r2, [pc, #136]	; (8000f58 <HAL_UART_MspInit+0xb4>)
 8000ed0:	4293      	cmp	r3, r2
 8000ed2:	d13c      	bne.n	8000f4e <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000ed4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000ed8:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000eda:	2300      	movs	r3, #0
 8000edc:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ede:	f107 0314 	add.w	r3, r7, #20
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	f001 fe0a 	bl	8002afc <HAL_RCCEx_PeriphCLKConfig>
 8000ee8:	4603      	mov	r3, r0
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d001      	beq.n	8000ef2 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000eee:	f7ff fe0b 	bl	8000b08 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000ef2:	4b1a      	ldr	r3, [pc, #104]	; (8000f5c <HAL_UART_MspInit+0xb8>)
 8000ef4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ef6:	4a19      	ldr	r2, [pc, #100]	; (8000f5c <HAL_UART_MspInit+0xb8>)
 8000ef8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000efc:	6413      	str	r3, [r2, #64]	; 0x40
 8000efe:	4b17      	ldr	r3, [pc, #92]	; (8000f5c <HAL_UART_MspInit+0xb8>)
 8000f00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f02:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000f06:	613b      	str	r3, [r7, #16]
 8000f08:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f0a:	4b14      	ldr	r3, [pc, #80]	; (8000f5c <HAL_UART_MspInit+0xb8>)
 8000f0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f0e:	4a13      	ldr	r2, [pc, #76]	; (8000f5c <HAL_UART_MspInit+0xb8>)
 8000f10:	f043 0308 	orr.w	r3, r3, #8
 8000f14:	6313      	str	r3, [r2, #48]	; 0x30
 8000f16:	4b11      	ldr	r3, [pc, #68]	; (8000f5c <HAL_UART_MspInit+0xb8>)
 8000f18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f1a:	f003 0308 	and.w	r3, r3, #8
 8000f1e:	60fb      	str	r3, [r7, #12]
 8000f20:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000f22:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000f26:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f2a:	2302      	movs	r3, #2
 8000f2c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f30:	2300      	movs	r3, #0
 8000f32:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f36:	2303      	movs	r3, #3
 8000f38:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000f3c:	2307      	movs	r3, #7
 8000f3e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f42:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000f46:	4619      	mov	r1, r3
 8000f48:	4805      	ldr	r0, [pc, #20]	; (8000f60 <HAL_UART_MspInit+0xbc>)
 8000f4a:	f000 fd95 	bl	8001a78 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8000f4e:	bf00      	nop
 8000f50:	37b8      	adds	r7, #184	; 0xb8
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bd80      	pop	{r7, pc}
 8000f56:	bf00      	nop
 8000f58:	40004800 	.word	0x40004800
 8000f5c:	40023800 	.word	0x40023800
 8000f60:	40020c00 	.word	0x40020c00

08000f64 <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000f68:	4b14      	ldr	r3, [pc, #80]	; (8000fbc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000f6a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000f6e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000f70:	4b12      	ldr	r3, [pc, #72]	; (8000fbc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000f72:	2206      	movs	r2, #6
 8000f74:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000f76:	4b11      	ldr	r3, [pc, #68]	; (8000fbc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000f78:	2202      	movs	r2, #2
 8000f7a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000f7c:	4b0f      	ldr	r3, [pc, #60]	; (8000fbc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000f7e:	2200      	movs	r2, #0
 8000f80:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000f82:	4b0e      	ldr	r3, [pc, #56]	; (8000fbc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000f84:	2202      	movs	r2, #2
 8000f86:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000f88:	4b0c      	ldr	r3, [pc, #48]	; (8000fbc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000f8a:	2201      	movs	r2, #1
 8000f8c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000f8e:	4b0b      	ldr	r3, [pc, #44]	; (8000fbc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000f90:	2200      	movs	r2, #0
 8000f92:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000f94:	4b09      	ldr	r3, [pc, #36]	; (8000fbc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000f96:	2200      	movs	r2, #0
 8000f98:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000f9a:	4b08      	ldr	r3, [pc, #32]	; (8000fbc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000f9c:	2201      	movs	r2, #1
 8000f9e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000fa0:	4b06      	ldr	r3, [pc, #24]	; (8000fbc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000fa6:	4805      	ldr	r0, [pc, #20]	; (8000fbc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000fa8:	f000 ff2b 	bl	8001e02 <HAL_PCD_Init>
 8000fac:	4603      	mov	r3, r0
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d001      	beq.n	8000fb6 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000fb2:	f7ff fda9 	bl	8000b08 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000fb6:	bf00      	nop
 8000fb8:	bd80      	pop	{r7, pc}
 8000fba:	bf00      	nop
 8000fbc:	200003e8 	.word	0x200003e8

08000fc0 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b0ae      	sub	sp, #184	; 0xb8
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fc8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000fcc:	2200      	movs	r2, #0
 8000fce:	601a      	str	r2, [r3, #0]
 8000fd0:	605a      	str	r2, [r3, #4]
 8000fd2:	609a      	str	r2, [r3, #8]
 8000fd4:	60da      	str	r2, [r3, #12]
 8000fd6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000fd8:	f107 0314 	add.w	r3, r7, #20
 8000fdc:	2290      	movs	r2, #144	; 0x90
 8000fde:	2100      	movs	r1, #0
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	f003 fe85 	bl	8004cf0 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000fee:	d159      	bne.n	80010a4 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8000ff0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8000ff4:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ffc:	f107 0314 	add.w	r3, r7, #20
 8001000:	4618      	mov	r0, r3
 8001002:	f001 fd7b 	bl	8002afc <HAL_RCCEx_PeriphCLKConfig>
 8001006:	4603      	mov	r3, r0
 8001008:	2b00      	cmp	r3, #0
 800100a:	d001      	beq.n	8001010 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 800100c:	f7ff fd7c 	bl	8000b08 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001010:	4b26      	ldr	r3, [pc, #152]	; (80010ac <HAL_PCD_MspInit+0xec>)
 8001012:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001014:	4a25      	ldr	r2, [pc, #148]	; (80010ac <HAL_PCD_MspInit+0xec>)
 8001016:	f043 0301 	orr.w	r3, r3, #1
 800101a:	6313      	str	r3, [r2, #48]	; 0x30
 800101c:	4b23      	ldr	r3, [pc, #140]	; (80010ac <HAL_PCD_MspInit+0xec>)
 800101e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001020:	f003 0301 	and.w	r3, r3, #1
 8001024:	613b      	str	r3, [r7, #16]
 8001026:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001028:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 800102c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001030:	2302      	movs	r3, #2
 8001032:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001036:	2300      	movs	r3, #0
 8001038:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800103c:	2303      	movs	r3, #3
 800103e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001042:	230a      	movs	r3, #10
 8001044:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001048:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800104c:	4619      	mov	r1, r3
 800104e:	4818      	ldr	r0, [pc, #96]	; (80010b0 <HAL_PCD_MspInit+0xf0>)
 8001050:	f000 fd12 	bl	8001a78 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001054:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001058:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800105c:	2300      	movs	r3, #0
 800105e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001062:	2300      	movs	r3, #0
 8001064:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001068:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800106c:	4619      	mov	r1, r3
 800106e:	4810      	ldr	r0, [pc, #64]	; (80010b0 <HAL_PCD_MspInit+0xf0>)
 8001070:	f000 fd02 	bl	8001a78 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001074:	4b0d      	ldr	r3, [pc, #52]	; (80010ac <HAL_PCD_MspInit+0xec>)
 8001076:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001078:	4a0c      	ldr	r2, [pc, #48]	; (80010ac <HAL_PCD_MspInit+0xec>)
 800107a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800107e:	6353      	str	r3, [r2, #52]	; 0x34
 8001080:	4b0a      	ldr	r3, [pc, #40]	; (80010ac <HAL_PCD_MspInit+0xec>)
 8001082:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001084:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001088:	60fb      	str	r3, [r7, #12]
 800108a:	68fb      	ldr	r3, [r7, #12]
 800108c:	4b07      	ldr	r3, [pc, #28]	; (80010ac <HAL_PCD_MspInit+0xec>)
 800108e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001090:	4a06      	ldr	r2, [pc, #24]	; (80010ac <HAL_PCD_MspInit+0xec>)
 8001092:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001096:	6453      	str	r3, [r2, #68]	; 0x44
 8001098:	4b04      	ldr	r3, [pc, #16]	; (80010ac <HAL_PCD_MspInit+0xec>)
 800109a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800109c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010a0:	60bb      	str	r3, [r7, #8]
 80010a2:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80010a4:	bf00      	nop
 80010a6:	37b8      	adds	r7, #184	; 0xb8
 80010a8:	46bd      	mov	sp, r7
 80010aa:	bd80      	pop	{r7, pc}
 80010ac:	40023800 	.word	0x40023800
 80010b0:	40020000 	.word	0x40020000

080010b4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80010b4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80010ec <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80010b8:	480d      	ldr	r0, [pc, #52]	; (80010f0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80010ba:	490e      	ldr	r1, [pc, #56]	; (80010f4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80010bc:	4a0e      	ldr	r2, [pc, #56]	; (80010f8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80010be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010c0:	e002      	b.n	80010c8 <LoopCopyDataInit>

080010c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010c6:	3304      	adds	r3, #4

080010c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010cc:	d3f9      	bcc.n	80010c2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010ce:	4a0b      	ldr	r2, [pc, #44]	; (80010fc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80010d0:	4c0b      	ldr	r4, [pc, #44]	; (8001100 <LoopFillZerobss+0x26>)
  movs r3, #0
 80010d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010d4:	e001      	b.n	80010da <LoopFillZerobss>

080010d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010d8:	3204      	adds	r2, #4

080010da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010dc:	d3fb      	bcc.n	80010d6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80010de:	f7ff fdbd 	bl	8000c5c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80010e2:	f003 fe13 	bl	8004d0c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80010e6:	f7ff fc81 	bl	80009ec <main>
  bx  lr    
 80010ea:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80010ec:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 80010f0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010f4:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 80010f8:	0800567c 	.word	0x0800567c
  ldr r2, =_sbss
 80010fc:	2000019c 	.word	0x2000019c
  ldr r4, =_ebss
 8001100:	20000a3c 	.word	0x20000a3c

08001104 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001104:	e7fe      	b.n	8001104 <ADC_IRQHandler>

08001106 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001106:	b580      	push	{r7, lr}
 8001108:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800110a:	2003      	movs	r0, #3
 800110c:	f000 f94c 	bl	80013a8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001110:	2000      	movs	r0, #0
 8001112:	f000 f805 	bl	8001120 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001116:	f7ff fcfd 	bl	8000b14 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800111a:	2300      	movs	r3, #0
}
 800111c:	4618      	mov	r0, r3
 800111e:	bd80      	pop	{r7, pc}

08001120 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b082      	sub	sp, #8
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001128:	4b12      	ldr	r3, [pc, #72]	; (8001174 <HAL_InitTick+0x54>)
 800112a:	681a      	ldr	r2, [r3, #0]
 800112c:	4b12      	ldr	r3, [pc, #72]	; (8001178 <HAL_InitTick+0x58>)
 800112e:	781b      	ldrb	r3, [r3, #0]
 8001130:	4619      	mov	r1, r3
 8001132:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001136:	fbb3 f3f1 	udiv	r3, r3, r1
 800113a:	fbb2 f3f3 	udiv	r3, r2, r3
 800113e:	4618      	mov	r0, r3
 8001140:	f000 f967 	bl	8001412 <HAL_SYSTICK_Config>
 8001144:	4603      	mov	r3, r0
 8001146:	2b00      	cmp	r3, #0
 8001148:	d001      	beq.n	800114e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800114a:	2301      	movs	r3, #1
 800114c:	e00e      	b.n	800116c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	2b0f      	cmp	r3, #15
 8001152:	d80a      	bhi.n	800116a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001154:	2200      	movs	r2, #0
 8001156:	6879      	ldr	r1, [r7, #4]
 8001158:	f04f 30ff 	mov.w	r0, #4294967295
 800115c:	f000 f92f 	bl	80013be <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001160:	4a06      	ldr	r2, [pc, #24]	; (800117c <HAL_InitTick+0x5c>)
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001166:	2300      	movs	r3, #0
 8001168:	e000      	b.n	800116c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800116a:	2301      	movs	r3, #1
}
 800116c:	4618      	mov	r0, r3
 800116e:	3708      	adds	r7, #8
 8001170:	46bd      	mov	sp, r7
 8001172:	bd80      	pop	{r7, pc}
 8001174:	20000000 	.word	0x20000000
 8001178:	20000008 	.word	0x20000008
 800117c:	20000004 	.word	0x20000004

08001180 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001180:	b480      	push	{r7}
 8001182:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001184:	4b06      	ldr	r3, [pc, #24]	; (80011a0 <HAL_IncTick+0x20>)
 8001186:	781b      	ldrb	r3, [r3, #0]
 8001188:	461a      	mov	r2, r3
 800118a:	4b06      	ldr	r3, [pc, #24]	; (80011a4 <HAL_IncTick+0x24>)
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	4413      	add	r3, r2
 8001190:	4a04      	ldr	r2, [pc, #16]	; (80011a4 <HAL_IncTick+0x24>)
 8001192:	6013      	str	r3, [r2, #0]
}
 8001194:	bf00      	nop
 8001196:	46bd      	mov	sp, r7
 8001198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119c:	4770      	bx	lr
 800119e:	bf00      	nop
 80011a0:	20000008 	.word	0x20000008
 80011a4:	200008f0 	.word	0x200008f0

080011a8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011a8:	b480      	push	{r7}
 80011aa:	af00      	add	r7, sp, #0
  return uwTick;
 80011ac:	4b03      	ldr	r3, [pc, #12]	; (80011bc <HAL_GetTick+0x14>)
 80011ae:	681b      	ldr	r3, [r3, #0]
}
 80011b0:	4618      	mov	r0, r3
 80011b2:	46bd      	mov	sp, r7
 80011b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b8:	4770      	bx	lr
 80011ba:	bf00      	nop
 80011bc:	200008f0 	.word	0x200008f0

080011c0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b084      	sub	sp, #16
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80011c8:	f7ff ffee 	bl	80011a8 <HAL_GetTick>
 80011cc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80011d2:	68fb      	ldr	r3, [r7, #12]
 80011d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011d8:	d005      	beq.n	80011e6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80011da:	4b0a      	ldr	r3, [pc, #40]	; (8001204 <HAL_Delay+0x44>)
 80011dc:	781b      	ldrb	r3, [r3, #0]
 80011de:	461a      	mov	r2, r3
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	4413      	add	r3, r2
 80011e4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80011e6:	bf00      	nop
 80011e8:	f7ff ffde 	bl	80011a8 <HAL_GetTick>
 80011ec:	4602      	mov	r2, r0
 80011ee:	68bb      	ldr	r3, [r7, #8]
 80011f0:	1ad3      	subs	r3, r2, r3
 80011f2:	68fa      	ldr	r2, [r7, #12]
 80011f4:	429a      	cmp	r2, r3
 80011f6:	d8f7      	bhi.n	80011e8 <HAL_Delay+0x28>
  {
  }
}
 80011f8:	bf00      	nop
 80011fa:	bf00      	nop
 80011fc:	3710      	adds	r7, #16
 80011fe:	46bd      	mov	sp, r7
 8001200:	bd80      	pop	{r7, pc}
 8001202:	bf00      	nop
 8001204:	20000008 	.word	0x20000008

08001208 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001208:	b480      	push	{r7}
 800120a:	b085      	sub	sp, #20
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	f003 0307 	and.w	r3, r3, #7
 8001216:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001218:	4b0b      	ldr	r3, [pc, #44]	; (8001248 <__NVIC_SetPriorityGrouping+0x40>)
 800121a:	68db      	ldr	r3, [r3, #12]
 800121c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800121e:	68ba      	ldr	r2, [r7, #8]
 8001220:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001224:	4013      	ands	r3, r2
 8001226:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800122c:	68bb      	ldr	r3, [r7, #8]
 800122e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001230:	4b06      	ldr	r3, [pc, #24]	; (800124c <__NVIC_SetPriorityGrouping+0x44>)
 8001232:	4313      	orrs	r3, r2
 8001234:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001236:	4a04      	ldr	r2, [pc, #16]	; (8001248 <__NVIC_SetPriorityGrouping+0x40>)
 8001238:	68bb      	ldr	r3, [r7, #8]
 800123a:	60d3      	str	r3, [r2, #12]
}
 800123c:	bf00      	nop
 800123e:	3714      	adds	r7, #20
 8001240:	46bd      	mov	sp, r7
 8001242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001246:	4770      	bx	lr
 8001248:	e000ed00 	.word	0xe000ed00
 800124c:	05fa0000 	.word	0x05fa0000

08001250 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001250:	b480      	push	{r7}
 8001252:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001254:	4b04      	ldr	r3, [pc, #16]	; (8001268 <__NVIC_GetPriorityGrouping+0x18>)
 8001256:	68db      	ldr	r3, [r3, #12]
 8001258:	0a1b      	lsrs	r3, r3, #8
 800125a:	f003 0307 	and.w	r3, r3, #7
}
 800125e:	4618      	mov	r0, r3
 8001260:	46bd      	mov	sp, r7
 8001262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001266:	4770      	bx	lr
 8001268:	e000ed00 	.word	0xe000ed00

0800126c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800126c:	b480      	push	{r7}
 800126e:	b083      	sub	sp, #12
 8001270:	af00      	add	r7, sp, #0
 8001272:	4603      	mov	r3, r0
 8001274:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001276:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800127a:	2b00      	cmp	r3, #0
 800127c:	db0b      	blt.n	8001296 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800127e:	79fb      	ldrb	r3, [r7, #7]
 8001280:	f003 021f 	and.w	r2, r3, #31
 8001284:	4907      	ldr	r1, [pc, #28]	; (80012a4 <__NVIC_EnableIRQ+0x38>)
 8001286:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800128a:	095b      	lsrs	r3, r3, #5
 800128c:	2001      	movs	r0, #1
 800128e:	fa00 f202 	lsl.w	r2, r0, r2
 8001292:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001296:	bf00      	nop
 8001298:	370c      	adds	r7, #12
 800129a:	46bd      	mov	sp, r7
 800129c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a0:	4770      	bx	lr
 80012a2:	bf00      	nop
 80012a4:	e000e100 	.word	0xe000e100

080012a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012a8:	b480      	push	{r7}
 80012aa:	b083      	sub	sp, #12
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	4603      	mov	r3, r0
 80012b0:	6039      	str	r1, [r7, #0]
 80012b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	db0a      	blt.n	80012d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012bc:	683b      	ldr	r3, [r7, #0]
 80012be:	b2da      	uxtb	r2, r3
 80012c0:	490c      	ldr	r1, [pc, #48]	; (80012f4 <__NVIC_SetPriority+0x4c>)
 80012c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012c6:	0112      	lsls	r2, r2, #4
 80012c8:	b2d2      	uxtb	r2, r2
 80012ca:	440b      	add	r3, r1
 80012cc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012d0:	e00a      	b.n	80012e8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012d2:	683b      	ldr	r3, [r7, #0]
 80012d4:	b2da      	uxtb	r2, r3
 80012d6:	4908      	ldr	r1, [pc, #32]	; (80012f8 <__NVIC_SetPriority+0x50>)
 80012d8:	79fb      	ldrb	r3, [r7, #7]
 80012da:	f003 030f 	and.w	r3, r3, #15
 80012de:	3b04      	subs	r3, #4
 80012e0:	0112      	lsls	r2, r2, #4
 80012e2:	b2d2      	uxtb	r2, r2
 80012e4:	440b      	add	r3, r1
 80012e6:	761a      	strb	r2, [r3, #24]
}
 80012e8:	bf00      	nop
 80012ea:	370c      	adds	r7, #12
 80012ec:	46bd      	mov	sp, r7
 80012ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f2:	4770      	bx	lr
 80012f4:	e000e100 	.word	0xe000e100
 80012f8:	e000ed00 	.word	0xe000ed00

080012fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012fc:	b480      	push	{r7}
 80012fe:	b089      	sub	sp, #36	; 0x24
 8001300:	af00      	add	r7, sp, #0
 8001302:	60f8      	str	r0, [r7, #12]
 8001304:	60b9      	str	r1, [r7, #8]
 8001306:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	f003 0307 	and.w	r3, r3, #7
 800130e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001310:	69fb      	ldr	r3, [r7, #28]
 8001312:	f1c3 0307 	rsb	r3, r3, #7
 8001316:	2b04      	cmp	r3, #4
 8001318:	bf28      	it	cs
 800131a:	2304      	movcs	r3, #4
 800131c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800131e:	69fb      	ldr	r3, [r7, #28]
 8001320:	3304      	adds	r3, #4
 8001322:	2b06      	cmp	r3, #6
 8001324:	d902      	bls.n	800132c <NVIC_EncodePriority+0x30>
 8001326:	69fb      	ldr	r3, [r7, #28]
 8001328:	3b03      	subs	r3, #3
 800132a:	e000      	b.n	800132e <NVIC_EncodePriority+0x32>
 800132c:	2300      	movs	r3, #0
 800132e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001330:	f04f 32ff 	mov.w	r2, #4294967295
 8001334:	69bb      	ldr	r3, [r7, #24]
 8001336:	fa02 f303 	lsl.w	r3, r2, r3
 800133a:	43da      	mvns	r2, r3
 800133c:	68bb      	ldr	r3, [r7, #8]
 800133e:	401a      	ands	r2, r3
 8001340:	697b      	ldr	r3, [r7, #20]
 8001342:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001344:	f04f 31ff 	mov.w	r1, #4294967295
 8001348:	697b      	ldr	r3, [r7, #20]
 800134a:	fa01 f303 	lsl.w	r3, r1, r3
 800134e:	43d9      	mvns	r1, r3
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001354:	4313      	orrs	r3, r2
         );
}
 8001356:	4618      	mov	r0, r3
 8001358:	3724      	adds	r7, #36	; 0x24
 800135a:	46bd      	mov	sp, r7
 800135c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001360:	4770      	bx	lr
	...

08001364 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b082      	sub	sp, #8
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	3b01      	subs	r3, #1
 8001370:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001374:	d301      	bcc.n	800137a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001376:	2301      	movs	r3, #1
 8001378:	e00f      	b.n	800139a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800137a:	4a0a      	ldr	r2, [pc, #40]	; (80013a4 <SysTick_Config+0x40>)
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	3b01      	subs	r3, #1
 8001380:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001382:	210f      	movs	r1, #15
 8001384:	f04f 30ff 	mov.w	r0, #4294967295
 8001388:	f7ff ff8e 	bl	80012a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800138c:	4b05      	ldr	r3, [pc, #20]	; (80013a4 <SysTick_Config+0x40>)
 800138e:	2200      	movs	r2, #0
 8001390:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001392:	4b04      	ldr	r3, [pc, #16]	; (80013a4 <SysTick_Config+0x40>)
 8001394:	2207      	movs	r2, #7
 8001396:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001398:	2300      	movs	r3, #0
}
 800139a:	4618      	mov	r0, r3
 800139c:	3708      	adds	r7, #8
 800139e:	46bd      	mov	sp, r7
 80013a0:	bd80      	pop	{r7, pc}
 80013a2:	bf00      	nop
 80013a4:	e000e010 	.word	0xe000e010

080013a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b082      	sub	sp, #8
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80013b0:	6878      	ldr	r0, [r7, #4]
 80013b2:	f7ff ff29 	bl	8001208 <__NVIC_SetPriorityGrouping>
}
 80013b6:	bf00      	nop
 80013b8:	3708      	adds	r7, #8
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bd80      	pop	{r7, pc}

080013be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80013be:	b580      	push	{r7, lr}
 80013c0:	b086      	sub	sp, #24
 80013c2:	af00      	add	r7, sp, #0
 80013c4:	4603      	mov	r3, r0
 80013c6:	60b9      	str	r1, [r7, #8]
 80013c8:	607a      	str	r2, [r7, #4]
 80013ca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80013cc:	2300      	movs	r3, #0
 80013ce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80013d0:	f7ff ff3e 	bl	8001250 <__NVIC_GetPriorityGrouping>
 80013d4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013d6:	687a      	ldr	r2, [r7, #4]
 80013d8:	68b9      	ldr	r1, [r7, #8]
 80013da:	6978      	ldr	r0, [r7, #20]
 80013dc:	f7ff ff8e 	bl	80012fc <NVIC_EncodePriority>
 80013e0:	4602      	mov	r2, r0
 80013e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013e6:	4611      	mov	r1, r2
 80013e8:	4618      	mov	r0, r3
 80013ea:	f7ff ff5d 	bl	80012a8 <__NVIC_SetPriority>
}
 80013ee:	bf00      	nop
 80013f0:	3718      	adds	r7, #24
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bd80      	pop	{r7, pc}

080013f6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013f6:	b580      	push	{r7, lr}
 80013f8:	b082      	sub	sp, #8
 80013fa:	af00      	add	r7, sp, #0
 80013fc:	4603      	mov	r3, r0
 80013fe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001400:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001404:	4618      	mov	r0, r3
 8001406:	f7ff ff31 	bl	800126c <__NVIC_EnableIRQ>
}
 800140a:	bf00      	nop
 800140c:	3708      	adds	r7, #8
 800140e:	46bd      	mov	sp, r7
 8001410:	bd80      	pop	{r7, pc}

08001412 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001412:	b580      	push	{r7, lr}
 8001414:	b082      	sub	sp, #8
 8001416:	af00      	add	r7, sp, #0
 8001418:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800141a:	6878      	ldr	r0, [r7, #4]
 800141c:	f7ff ffa2 	bl	8001364 <SysTick_Config>
 8001420:	4603      	mov	r3, r0
}
 8001422:	4618      	mov	r0, r3
 8001424:	3708      	adds	r7, #8
 8001426:	46bd      	mov	sp, r7
 8001428:	bd80      	pop	{r7, pc}
	...

0800142c <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b084      	sub	sp, #16
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	2b00      	cmp	r3, #0
 8001438:	d101      	bne.n	800143e <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800143a:	2301      	movs	r3, #1
 800143c:	e06a      	b.n	8001514 <HAL_ETH_Init+0xe8>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001444:	2b00      	cmp	r3, #0
 8001446:	d106      	bne.n	8001456 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	2223      	movs	r2, #35	; 0x23
 800144c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001450:	6878      	ldr	r0, [r7, #4]
 8001452:	f7ff f919 	bl	8000688 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001456:	4b31      	ldr	r3, [pc, #196]	; (800151c <HAL_ETH_Init+0xf0>)
 8001458:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800145a:	4a30      	ldr	r2, [pc, #192]	; (800151c <HAL_ETH_Init+0xf0>)
 800145c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001460:	6453      	str	r3, [r2, #68]	; 0x44
 8001462:	4b2e      	ldr	r3, [pc, #184]	; (800151c <HAL_ETH_Init+0xf0>)
 8001464:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001466:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800146a:	60bb      	str	r3, [r7, #8]
 800146c:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 800146e:	4b2c      	ldr	r3, [pc, #176]	; (8001520 <HAL_ETH_Init+0xf4>)
 8001470:	685b      	ldr	r3, [r3, #4]
 8001472:	4a2b      	ldr	r2, [pc, #172]	; (8001520 <HAL_ETH_Init+0xf4>)
 8001474:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001478:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 800147a:	4b29      	ldr	r3, [pc, #164]	; (8001520 <HAL_ETH_Init+0xf4>)
 800147c:	685a      	ldr	r2, [r3, #4]
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	689b      	ldr	r3, [r3, #8]
 8001482:	4927      	ldr	r1, [pc, #156]	; (8001520 <HAL_ETH_Init+0xf4>)
 8001484:	4313      	orrs	r3, r2
 8001486:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8001488:	4b25      	ldr	r3, [pc, #148]	; (8001520 <HAL_ETH_Init+0xf4>)
 800148a:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	687a      	ldr	r2, [r7, #4]
 8001498:	6812      	ldr	r2, [r2, #0]
 800149a:	f043 0301 	orr.w	r3, r3, #1
 800149e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80014a2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80014a4:	f7ff fe80 	bl	80011a8 <HAL_GetTick>
 80014a8:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80014aa:	e011      	b.n	80014d0 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80014ac:	f7ff fe7c 	bl	80011a8 <HAL_GetTick>
 80014b0:	4602      	mov	r2, r0
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	1ad3      	subs	r3, r2, r3
 80014b6:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80014ba:	d909      	bls.n	80014d0 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	2204      	movs	r2, #4
 80014c0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	22e0      	movs	r2, #224	; 0xe0
 80014c8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 80014cc:	2301      	movs	r3, #1
 80014ce:	e021      	b.n	8001514 <HAL_ETH_Init+0xe8>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	f003 0301 	and.w	r3, r3, #1
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d1e4      	bne.n	80014ac <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80014e2:	6878      	ldr	r0, [r7, #4]
 80014e4:	f000 f958 	bl	8001798 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80014e8:	6878      	ldr	r0, [r7, #4]
 80014ea:	f000 f9ff 	bl	80018ec <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80014ee:	6878      	ldr	r0, [r7, #4]
 80014f0:	f000 fa55 	bl	800199e <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	685b      	ldr	r3, [r3, #4]
 80014f8:	461a      	mov	r2, r3
 80014fa:	2100      	movs	r1, #0
 80014fc:	6878      	ldr	r0, [r7, #4]
 80014fe:	f000 f9bd 	bl	800187c <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	2200      	movs	r2, #0
 8001506:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	2210      	movs	r2, #16
 800150e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8001512:	2300      	movs	r3, #0
}
 8001514:	4618      	mov	r0, r3
 8001516:	3710      	adds	r7, #16
 8001518:	46bd      	mov	sp, r7
 800151a:	bd80      	pop	{r7, pc}
 800151c:	40023800 	.word	0x40023800
 8001520:	40013800 	.word	0x40013800

08001524 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b084      	sub	sp, #16
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
 800152c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8001536:	68fa      	ldr	r2, [r7, #12]
 8001538:	4b51      	ldr	r3, [pc, #324]	; (8001680 <ETH_SetMACConfig+0x15c>)
 800153a:	4013      	ands	r3, r2
 800153c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800153e:	683b      	ldr	r3, [r7, #0]
 8001540:	7c1b      	ldrb	r3, [r3, #16]
 8001542:	2b00      	cmp	r3, #0
 8001544:	d102      	bne.n	800154c <ETH_SetMACConfig+0x28>
 8001546:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800154a:	e000      	b.n	800154e <ETH_SetMACConfig+0x2a>
 800154c:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 800154e:	683b      	ldr	r3, [r7, #0]
 8001550:	7c5b      	ldrb	r3, [r3, #17]
 8001552:	2b00      	cmp	r3, #0
 8001554:	d102      	bne.n	800155c <ETH_SetMACConfig+0x38>
 8001556:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800155a:	e000      	b.n	800155e <ETH_SetMACConfig+0x3a>
 800155c:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800155e:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8001560:	683b      	ldr	r3, [r7, #0]
 8001562:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001564:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001566:	683b      	ldr	r3, [r7, #0]
 8001568:	7fdb      	ldrb	r3, [r3, #31]
 800156a:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 800156c:	431a      	orrs	r2, r3
                        macconf->Speed |
 800156e:	683b      	ldr	r3, [r7, #0]
 8001570:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001572:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001574:	683a      	ldr	r2, [r7, #0]
 8001576:	7f92      	ldrb	r2, [r2, #30]
 8001578:	2a00      	cmp	r2, #0
 800157a:	d102      	bne.n	8001582 <ETH_SetMACConfig+0x5e>
 800157c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001580:	e000      	b.n	8001584 <ETH_SetMACConfig+0x60>
 8001582:	2200      	movs	r2, #0
                        macconf->Speed |
 8001584:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001586:	683b      	ldr	r3, [r7, #0]
 8001588:	7f1b      	ldrb	r3, [r3, #28]
 800158a:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 800158c:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 800158e:	683b      	ldr	r3, [r7, #0]
 8001590:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001592:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001594:	683b      	ldr	r3, [r7, #0]
 8001596:	791b      	ldrb	r3, [r3, #4]
 8001598:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 800159a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 800159c:	683a      	ldr	r2, [r7, #0]
 800159e:	f892 2020 	ldrb.w	r2, [r2, #32]
 80015a2:	2a00      	cmp	r2, #0
 80015a4:	d102      	bne.n	80015ac <ETH_SetMACConfig+0x88>
 80015a6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80015aa:	e000      	b.n	80015ae <ETH_SetMACConfig+0x8a>
 80015ac:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80015ae:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80015b0:	683b      	ldr	r3, [r7, #0]
 80015b2:	7bdb      	ldrb	r3, [r3, #15]
 80015b4:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80015b6:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 80015b8:	683b      	ldr	r3, [r7, #0]
 80015ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80015bc:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 80015be:	683b      	ldr	r3, [r7, #0]
 80015c0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80015c4:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80015c6:	4313      	orrs	r3, r2
 80015c8:	68fa      	ldr	r2, [r7, #12]
 80015ca:	4313      	orrs	r3, r2
 80015cc:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	68fa      	ldr	r2, [r7, #12]
 80015d4:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80015de:	2001      	movs	r0, #1
 80015e0:	f7ff fdee 	bl	80011c0 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	68fa      	ldr	r2, [r7, #12]
 80015ea:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	699b      	ldr	r3, [r3, #24]
 80015f2:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 80015f4:	68fa      	ldr	r2, [r7, #12]
 80015f6:	f64f 7341 	movw	r3, #65345	; 0xff41
 80015fa:	4013      	ands	r3, r2
 80015fc:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80015fe:	683b      	ldr	r3, [r7, #0]
 8001600:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001602:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8001604:	683a      	ldr	r2, [r7, #0]
 8001606:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 800160a:	2a00      	cmp	r2, #0
 800160c:	d101      	bne.n	8001612 <ETH_SetMACConfig+0xee>
 800160e:	2280      	movs	r2, #128	; 0x80
 8001610:	e000      	b.n	8001614 <ETH_SetMACConfig+0xf0>
 8001612:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001614:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8001616:	683b      	ldr	r3, [r7, #0]
 8001618:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 800161a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 800161c:	683a      	ldr	r2, [r7, #0]
 800161e:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 8001622:	2a01      	cmp	r2, #1
 8001624:	d101      	bne.n	800162a <ETH_SetMACConfig+0x106>
 8001626:	2208      	movs	r2, #8
 8001628:	e000      	b.n	800162c <ETH_SetMACConfig+0x108>
 800162a:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 800162c:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 800162e:	683a      	ldr	r2, [r7, #0]
 8001630:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8001634:	2a01      	cmp	r2, #1
 8001636:	d101      	bne.n	800163c <ETH_SetMACConfig+0x118>
 8001638:	2204      	movs	r2, #4
 800163a:	e000      	b.n	800163e <ETH_SetMACConfig+0x11a>
 800163c:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 800163e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8001640:	683a      	ldr	r2, [r7, #0]
 8001642:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 8001646:	2a01      	cmp	r2, #1
 8001648:	d101      	bne.n	800164e <ETH_SetMACConfig+0x12a>
 800164a:	2202      	movs	r2, #2
 800164c:	e000      	b.n	8001650 <ETH_SetMACConfig+0x12c>
 800164e:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001650:	4313      	orrs	r3, r2
 8001652:	68fa      	ldr	r2, [r7, #12]
 8001654:	4313      	orrs	r3, r2
 8001656:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	68fa      	ldr	r2, [r7, #12]
 800165e:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	699b      	ldr	r3, [r3, #24]
 8001666:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001668:	2001      	movs	r0, #1
 800166a:	f7ff fda9 	bl	80011c0 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	68fa      	ldr	r2, [r7, #12]
 8001674:	619a      	str	r2, [r3, #24]
}
 8001676:	bf00      	nop
 8001678:	3710      	adds	r7, #16
 800167a:	46bd      	mov	sp, r7
 800167c:	bd80      	pop	{r7, pc}
 800167e:	bf00      	nop
 8001680:	ff20810f 	.word	0xff20810f

08001684 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b084      	sub	sp, #16
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
 800168c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001696:	699b      	ldr	r3, [r3, #24]
 8001698:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 800169a:	68fa      	ldr	r2, [r7, #12]
 800169c:	4b3d      	ldr	r3, [pc, #244]	; (8001794 <ETH_SetDMAConfig+0x110>)
 800169e:	4013      	ands	r3, r2
 80016a0:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80016a2:	683b      	ldr	r3, [r7, #0]
 80016a4:	7b1b      	ldrb	r3, [r3, #12]
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d102      	bne.n	80016b0 <ETH_SetDMAConfig+0x2c>
 80016aa:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80016ae:	e000      	b.n	80016b2 <ETH_SetDMAConfig+0x2e>
 80016b0:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80016b2:	683b      	ldr	r3, [r7, #0]
 80016b4:	7b5b      	ldrb	r3, [r3, #13]
 80016b6:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80016b8:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80016ba:	683a      	ldr	r2, [r7, #0]
 80016bc:	7f52      	ldrb	r2, [r2, #29]
 80016be:	2a00      	cmp	r2, #0
 80016c0:	d102      	bne.n	80016c8 <ETH_SetDMAConfig+0x44>
 80016c2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80016c6:	e000      	b.n	80016ca <ETH_SetDMAConfig+0x46>
 80016c8:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80016ca:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80016cc:	683b      	ldr	r3, [r7, #0]
 80016ce:	7b9b      	ldrb	r3, [r3, #14]
 80016d0:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80016d2:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 80016d4:	683b      	ldr	r3, [r7, #0]
 80016d6:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80016d8:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80016da:	683b      	ldr	r3, [r7, #0]
 80016dc:	7f1b      	ldrb	r3, [r3, #28]
 80016de:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 80016e0:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80016e2:	683b      	ldr	r3, [r7, #0]
 80016e4:	7f9b      	ldrb	r3, [r3, #30]
 80016e6:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80016e8:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 80016ea:	683b      	ldr	r3, [r7, #0]
 80016ec:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80016ee:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 80016f0:	683b      	ldr	r3, [r7, #0]
 80016f2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80016f6:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80016f8:	4313      	orrs	r3, r2
 80016fa:	68fa      	ldr	r2, [r7, #12]
 80016fc:	4313      	orrs	r3, r2
 80016fe:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001708:	461a      	mov	r2, r3
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001716:	699b      	ldr	r3, [r3, #24]
 8001718:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800171a:	2001      	movs	r0, #1
 800171c:	f7ff fd50 	bl	80011c0 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001728:	461a      	mov	r2, r3
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800172e:	683b      	ldr	r3, [r7, #0]
 8001730:	791b      	ldrb	r3, [r3, #4]
 8001732:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8001734:	683b      	ldr	r3, [r7, #0]
 8001736:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001738:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 800173a:	683b      	ldr	r3, [r7, #0]
 800173c:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 800173e:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8001740:	683b      	ldr	r3, [r7, #0]
 8001742:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8001744:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8001746:	683b      	ldr	r3, [r7, #0]
 8001748:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800174c:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 800174e:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001750:	683b      	ldr	r3, [r7, #0]
 8001752:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001754:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8001756:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8001758:	683b      	ldr	r3, [r7, #0]
 800175a:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 800175c:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800175e:	687a      	ldr	r2, [r7, #4]
 8001760:	6812      	ldr	r2, [r2, #0]
 8001762:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001766:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800176a:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001778:	2001      	movs	r0, #1
 800177a:	f7ff fd21 	bl	80011c0 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001786:	461a      	mov	r2, r3
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	6013      	str	r3, [r2, #0]
}
 800178c:	bf00      	nop
 800178e:	3710      	adds	r7, #16
 8001790:	46bd      	mov	sp, r7
 8001792:	bd80      	pop	{r7, pc}
 8001794:	f8de3f23 	.word	0xf8de3f23

08001798 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b0a6      	sub	sp, #152	; 0x98
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 80017a0:	2301      	movs	r3, #1
 80017a2:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 80017a6:	2301      	movs	r3, #1
 80017a8:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 80017ac:	2300      	movs	r3, #0
 80017ae:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80017b0:	2300      	movs	r3, #0
 80017b2:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 80017b6:	2301      	movs	r3, #1
 80017b8:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 80017bc:	2300      	movs	r3, #0
 80017be:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 80017c2:	2301      	movs	r3, #1
 80017c4:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 80017c8:	2300      	movs	r3, #0
 80017ca:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 80017ce:	2300      	movs	r3, #0
 80017d0:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80017d4:	2300      	movs	r3, #0
 80017d6:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 80017d8:	2300      	movs	r3, #0
 80017da:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 80017de:	2300      	movs	r3, #0
 80017e0:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 80017e2:	2300      	movs	r3, #0
 80017e4:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 80017e8:	2300      	movs	r3, #0
 80017ea:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80017ee:	2300      	movs	r3, #0
 80017f0:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 80017f4:	2300      	movs	r3, #0
 80017f6:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 80017fa:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80017fe:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8001800:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001804:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8001806:	2300      	movs	r3, #0
 8001808:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 800180c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001810:	4619      	mov	r1, r3
 8001812:	6878      	ldr	r0, [r7, #4]
 8001814:	f7ff fe86 	bl	8001524 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8001818:	2301      	movs	r3, #1
 800181a:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 800181c:	2301      	movs	r3, #1
 800181e:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8001820:	2301      	movs	r3, #1
 8001822:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8001826:	2301      	movs	r3, #1
 8001828:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 800182a:	2300      	movs	r3, #0
 800182c:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 800182e:	2300      	movs	r3, #0
 8001830:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8001834:	2300      	movs	r3, #0
 8001836:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 800183a:	2300      	movs	r3, #0
 800183c:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 800183e:	2301      	movs	r3, #1
 8001840:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8001844:	2301      	movs	r3, #1
 8001846:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8001848:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800184c:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800184e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001852:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001854:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001858:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 800185a:	2301      	movs	r3, #1
 800185c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8001860:	2300      	movs	r3, #0
 8001862:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8001864:	2300      	movs	r3, #0
 8001866:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8001868:	f107 0308 	add.w	r3, r7, #8
 800186c:	4619      	mov	r1, r3
 800186e:	6878      	ldr	r0, [r7, #4]
 8001870:	f7ff ff08 	bl	8001684 <ETH_SetDMAConfig>
}
 8001874:	bf00      	nop
 8001876:	3798      	adds	r7, #152	; 0x98
 8001878:	46bd      	mov	sp, r7
 800187a:	bd80      	pop	{r7, pc}

0800187c <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 800187c:	b480      	push	{r7}
 800187e:	b087      	sub	sp, #28
 8001880:	af00      	add	r7, sp, #0
 8001882:	60f8      	str	r0, [r7, #12]
 8001884:	60b9      	str	r1, [r7, #8]
 8001886:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	3305      	adds	r3, #5
 800188c:	781b      	ldrb	r3, [r3, #0]
 800188e:	021b      	lsls	r3, r3, #8
 8001890:	687a      	ldr	r2, [r7, #4]
 8001892:	3204      	adds	r2, #4
 8001894:	7812      	ldrb	r2, [r2, #0]
 8001896:	4313      	orrs	r3, r2
 8001898:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 800189a:	68ba      	ldr	r2, [r7, #8]
 800189c:	4b11      	ldr	r3, [pc, #68]	; (80018e4 <ETH_MACAddressConfig+0x68>)
 800189e:	4413      	add	r3, r2
 80018a0:	461a      	mov	r2, r3
 80018a2:	697b      	ldr	r3, [r7, #20]
 80018a4:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	3303      	adds	r3, #3
 80018aa:	781b      	ldrb	r3, [r3, #0]
 80018ac:	061a      	lsls	r2, r3, #24
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	3302      	adds	r3, #2
 80018b2:	781b      	ldrb	r3, [r3, #0]
 80018b4:	041b      	lsls	r3, r3, #16
 80018b6:	431a      	orrs	r2, r3
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	3301      	adds	r3, #1
 80018bc:	781b      	ldrb	r3, [r3, #0]
 80018be:	021b      	lsls	r3, r3, #8
 80018c0:	4313      	orrs	r3, r2
 80018c2:	687a      	ldr	r2, [r7, #4]
 80018c4:	7812      	ldrb	r2, [r2, #0]
 80018c6:	4313      	orrs	r3, r2
 80018c8:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 80018ca:	68ba      	ldr	r2, [r7, #8]
 80018cc:	4b06      	ldr	r3, [pc, #24]	; (80018e8 <ETH_MACAddressConfig+0x6c>)
 80018ce:	4413      	add	r3, r2
 80018d0:	461a      	mov	r2, r3
 80018d2:	697b      	ldr	r3, [r7, #20]
 80018d4:	6013      	str	r3, [r2, #0]
}
 80018d6:	bf00      	nop
 80018d8:	371c      	adds	r7, #28
 80018da:	46bd      	mov	sp, r7
 80018dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e0:	4770      	bx	lr
 80018e2:	bf00      	nop
 80018e4:	40028040 	.word	0x40028040
 80018e8:	40028044 	.word	0x40028044

080018ec <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 80018ec:	b480      	push	{r7}
 80018ee:	b085      	sub	sp, #20
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80018f4:	2300      	movs	r3, #0
 80018f6:	60fb      	str	r3, [r7, #12]
 80018f8:	e03e      	b.n	8001978 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	68d9      	ldr	r1, [r3, #12]
 80018fe:	68fa      	ldr	r2, [r7, #12]
 8001900:	4613      	mov	r3, r2
 8001902:	009b      	lsls	r3, r3, #2
 8001904:	4413      	add	r3, r2
 8001906:	00db      	lsls	r3, r3, #3
 8001908:	440b      	add	r3, r1
 800190a:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 800190c:	68bb      	ldr	r3, [r7, #8]
 800190e:	2200      	movs	r2, #0
 8001910:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8001912:	68bb      	ldr	r3, [r7, #8]
 8001914:	2200      	movs	r2, #0
 8001916:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8001918:	68bb      	ldr	r3, [r7, #8]
 800191a:	2200      	movs	r2, #0
 800191c:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 800191e:	68bb      	ldr	r3, [r7, #8]
 8001920:	2200      	movs	r2, #0
 8001922:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8001924:	68b9      	ldr	r1, [r7, #8]
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	68fa      	ldr	r2, [r7, #12]
 800192a:	3206      	adds	r2, #6
 800192c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8001930:	68bb      	ldr	r3, [r7, #8]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001938:	68bb      	ldr	r3, [r7, #8]
 800193a:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	2b02      	cmp	r3, #2
 8001940:	d80c      	bhi.n	800195c <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	68d9      	ldr	r1, [r3, #12]
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	1c5a      	adds	r2, r3, #1
 800194a:	4613      	mov	r3, r2
 800194c:	009b      	lsls	r3, r3, #2
 800194e:	4413      	add	r3, r2
 8001950:	00db      	lsls	r3, r3, #3
 8001952:	440b      	add	r3, r1
 8001954:	461a      	mov	r2, r3
 8001956:	68bb      	ldr	r3, [r7, #8]
 8001958:	60da      	str	r2, [r3, #12]
 800195a:	e004      	b.n	8001966 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	68db      	ldr	r3, [r3, #12]
 8001960:	461a      	mov	r2, r3
 8001962:	68bb      	ldr	r3, [r7, #8]
 8001964:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8001966:	68bb      	ldr	r3, [r7, #8]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 800196e:	68bb      	ldr	r3, [r7, #8]
 8001970:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	3301      	adds	r3, #1
 8001976:	60fb      	str	r3, [r7, #12]
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	2b03      	cmp	r3, #3
 800197c:	d9bd      	bls.n	80018fa <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	2200      	movs	r2, #0
 8001982:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	68da      	ldr	r2, [r3, #12]
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001990:	611a      	str	r2, [r3, #16]
}
 8001992:	bf00      	nop
 8001994:	3714      	adds	r7, #20
 8001996:	46bd      	mov	sp, r7
 8001998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199c:	4770      	bx	lr

0800199e <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 800199e:	b480      	push	{r7}
 80019a0:	b085      	sub	sp, #20
 80019a2:	af00      	add	r7, sp, #0
 80019a4:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80019a6:	2300      	movs	r3, #0
 80019a8:	60fb      	str	r3, [r7, #12]
 80019aa:	e046      	b.n	8001a3a <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	6919      	ldr	r1, [r3, #16]
 80019b0:	68fa      	ldr	r2, [r7, #12]
 80019b2:	4613      	mov	r3, r2
 80019b4:	009b      	lsls	r3, r3, #2
 80019b6:	4413      	add	r3, r2
 80019b8:	00db      	lsls	r3, r3, #3
 80019ba:	440b      	add	r3, r1
 80019bc:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 80019be:	68bb      	ldr	r3, [r7, #8]
 80019c0:	2200      	movs	r2, #0
 80019c2:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 80019c4:	68bb      	ldr	r3, [r7, #8]
 80019c6:	2200      	movs	r2, #0
 80019c8:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 80019ca:	68bb      	ldr	r3, [r7, #8]
 80019cc:	2200      	movs	r2, #0
 80019ce:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 80019d0:	68bb      	ldr	r3, [r7, #8]
 80019d2:	2200      	movs	r2, #0
 80019d4:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 80019d6:	68bb      	ldr	r3, [r7, #8]
 80019d8:	2200      	movs	r2, #0
 80019da:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 80019dc:	68bb      	ldr	r3, [r7, #8]
 80019de:	2200      	movs	r2, #0
 80019e0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 80019e2:	68bb      	ldr	r3, [r7, #8]
 80019e4:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80019e8:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 80019ea:	68bb      	ldr	r3, [r7, #8]
 80019ec:	f244 52f4 	movw	r2, #17908	; 0x45f4
 80019f0:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 80019f2:	68bb      	ldr	r3, [r7, #8]
 80019f4:	685b      	ldr	r3, [r3, #4]
 80019f6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80019fa:	68bb      	ldr	r3, [r7, #8]
 80019fc:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80019fe:	68b9      	ldr	r1, [r7, #8]
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	68fa      	ldr	r2, [r7, #12]
 8001a04:	3212      	adds	r2, #18
 8001a06:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	2b02      	cmp	r3, #2
 8001a0e:	d80c      	bhi.n	8001a2a <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	6919      	ldr	r1, [r3, #16]
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	1c5a      	adds	r2, r3, #1
 8001a18:	4613      	mov	r3, r2
 8001a1a:	009b      	lsls	r3, r3, #2
 8001a1c:	4413      	add	r3, r2
 8001a1e:	00db      	lsls	r3, r3, #3
 8001a20:	440b      	add	r3, r1
 8001a22:	461a      	mov	r2, r3
 8001a24:	68bb      	ldr	r3, [r7, #8]
 8001a26:	60da      	str	r2, [r3, #12]
 8001a28:	e004      	b.n	8001a34 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	691b      	ldr	r3, [r3, #16]
 8001a2e:	461a      	mov	r2, r3
 8001a30:	68bb      	ldr	r3, [r7, #8]
 8001a32:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	3301      	adds	r3, #1
 8001a38:	60fb      	str	r3, [r7, #12]
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	2b03      	cmp	r3, #3
 8001a3e:	d9b5      	bls.n	80019ac <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	2200      	movs	r2, #0
 8001a44:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	2200      	movs	r2, #0
 8001a4a:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	2200      	movs	r2, #0
 8001a50:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	2200      	movs	r2, #0
 8001a56:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	691a      	ldr	r2, [r3, #16]
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a6a:	60da      	str	r2, [r3, #12]
}
 8001a6c:	bf00      	nop
 8001a6e:	3714      	adds	r7, #20
 8001a70:	46bd      	mov	sp, r7
 8001a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a76:	4770      	bx	lr

08001a78 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	b089      	sub	sp, #36	; 0x24
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
 8001a80:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001a82:	2300      	movs	r3, #0
 8001a84:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001a86:	2300      	movs	r3, #0
 8001a88:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001a8e:	2300      	movs	r3, #0
 8001a90:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001a92:	2300      	movs	r3, #0
 8001a94:	61fb      	str	r3, [r7, #28]
 8001a96:	e175      	b.n	8001d84 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001a98:	2201      	movs	r2, #1
 8001a9a:	69fb      	ldr	r3, [r7, #28]
 8001a9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001aa2:	683b      	ldr	r3, [r7, #0]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	697a      	ldr	r2, [r7, #20]
 8001aa8:	4013      	ands	r3, r2
 8001aaa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001aac:	693a      	ldr	r2, [r7, #16]
 8001aae:	697b      	ldr	r3, [r7, #20]
 8001ab0:	429a      	cmp	r2, r3
 8001ab2:	f040 8164 	bne.w	8001d7e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001ab6:	683b      	ldr	r3, [r7, #0]
 8001ab8:	685b      	ldr	r3, [r3, #4]
 8001aba:	f003 0303 	and.w	r3, r3, #3
 8001abe:	2b01      	cmp	r3, #1
 8001ac0:	d005      	beq.n	8001ace <HAL_GPIO_Init+0x56>
 8001ac2:	683b      	ldr	r3, [r7, #0]
 8001ac4:	685b      	ldr	r3, [r3, #4]
 8001ac6:	f003 0303 	and.w	r3, r3, #3
 8001aca:	2b02      	cmp	r3, #2
 8001acc:	d130      	bne.n	8001b30 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	689b      	ldr	r3, [r3, #8]
 8001ad2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001ad4:	69fb      	ldr	r3, [r7, #28]
 8001ad6:	005b      	lsls	r3, r3, #1
 8001ad8:	2203      	movs	r2, #3
 8001ada:	fa02 f303 	lsl.w	r3, r2, r3
 8001ade:	43db      	mvns	r3, r3
 8001ae0:	69ba      	ldr	r2, [r7, #24]
 8001ae2:	4013      	ands	r3, r2
 8001ae4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001ae6:	683b      	ldr	r3, [r7, #0]
 8001ae8:	68da      	ldr	r2, [r3, #12]
 8001aea:	69fb      	ldr	r3, [r7, #28]
 8001aec:	005b      	lsls	r3, r3, #1
 8001aee:	fa02 f303 	lsl.w	r3, r2, r3
 8001af2:	69ba      	ldr	r2, [r7, #24]
 8001af4:	4313      	orrs	r3, r2
 8001af6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	69ba      	ldr	r2, [r7, #24]
 8001afc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	685b      	ldr	r3, [r3, #4]
 8001b02:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001b04:	2201      	movs	r2, #1
 8001b06:	69fb      	ldr	r3, [r7, #28]
 8001b08:	fa02 f303 	lsl.w	r3, r2, r3
 8001b0c:	43db      	mvns	r3, r3
 8001b0e:	69ba      	ldr	r2, [r7, #24]
 8001b10:	4013      	ands	r3, r2
 8001b12:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001b14:	683b      	ldr	r3, [r7, #0]
 8001b16:	685b      	ldr	r3, [r3, #4]
 8001b18:	091b      	lsrs	r3, r3, #4
 8001b1a:	f003 0201 	and.w	r2, r3, #1
 8001b1e:	69fb      	ldr	r3, [r7, #28]
 8001b20:	fa02 f303 	lsl.w	r3, r2, r3
 8001b24:	69ba      	ldr	r2, [r7, #24]
 8001b26:	4313      	orrs	r3, r2
 8001b28:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	69ba      	ldr	r2, [r7, #24]
 8001b2e:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	685b      	ldr	r3, [r3, #4]
 8001b34:	f003 0303 	and.w	r3, r3, #3
 8001b38:	2b03      	cmp	r3, #3
 8001b3a:	d017      	beq.n	8001b6c <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	68db      	ldr	r3, [r3, #12]
 8001b40:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001b42:	69fb      	ldr	r3, [r7, #28]
 8001b44:	005b      	lsls	r3, r3, #1
 8001b46:	2203      	movs	r2, #3
 8001b48:	fa02 f303 	lsl.w	r3, r2, r3
 8001b4c:	43db      	mvns	r3, r3
 8001b4e:	69ba      	ldr	r2, [r7, #24]
 8001b50:	4013      	ands	r3, r2
 8001b52:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001b54:	683b      	ldr	r3, [r7, #0]
 8001b56:	689a      	ldr	r2, [r3, #8]
 8001b58:	69fb      	ldr	r3, [r7, #28]
 8001b5a:	005b      	lsls	r3, r3, #1
 8001b5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b60:	69ba      	ldr	r2, [r7, #24]
 8001b62:	4313      	orrs	r3, r2
 8001b64:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	69ba      	ldr	r2, [r7, #24]
 8001b6a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b6c:	683b      	ldr	r3, [r7, #0]
 8001b6e:	685b      	ldr	r3, [r3, #4]
 8001b70:	f003 0303 	and.w	r3, r3, #3
 8001b74:	2b02      	cmp	r3, #2
 8001b76:	d123      	bne.n	8001bc0 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001b78:	69fb      	ldr	r3, [r7, #28]
 8001b7a:	08da      	lsrs	r2, r3, #3
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	3208      	adds	r2, #8
 8001b80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b84:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001b86:	69fb      	ldr	r3, [r7, #28]
 8001b88:	f003 0307 	and.w	r3, r3, #7
 8001b8c:	009b      	lsls	r3, r3, #2
 8001b8e:	220f      	movs	r2, #15
 8001b90:	fa02 f303 	lsl.w	r3, r2, r3
 8001b94:	43db      	mvns	r3, r3
 8001b96:	69ba      	ldr	r2, [r7, #24]
 8001b98:	4013      	ands	r3, r2
 8001b9a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001b9c:	683b      	ldr	r3, [r7, #0]
 8001b9e:	691a      	ldr	r2, [r3, #16]
 8001ba0:	69fb      	ldr	r3, [r7, #28]
 8001ba2:	f003 0307 	and.w	r3, r3, #7
 8001ba6:	009b      	lsls	r3, r3, #2
 8001ba8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bac:	69ba      	ldr	r2, [r7, #24]
 8001bae:	4313      	orrs	r3, r2
 8001bb0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001bb2:	69fb      	ldr	r3, [r7, #28]
 8001bb4:	08da      	lsrs	r2, r3, #3
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	3208      	adds	r2, #8
 8001bba:	69b9      	ldr	r1, [r7, #24]
 8001bbc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001bc6:	69fb      	ldr	r3, [r7, #28]
 8001bc8:	005b      	lsls	r3, r3, #1
 8001bca:	2203      	movs	r2, #3
 8001bcc:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd0:	43db      	mvns	r3, r3
 8001bd2:	69ba      	ldr	r2, [r7, #24]
 8001bd4:	4013      	ands	r3, r2
 8001bd6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001bd8:	683b      	ldr	r3, [r7, #0]
 8001bda:	685b      	ldr	r3, [r3, #4]
 8001bdc:	f003 0203 	and.w	r2, r3, #3
 8001be0:	69fb      	ldr	r3, [r7, #28]
 8001be2:	005b      	lsls	r3, r3, #1
 8001be4:	fa02 f303 	lsl.w	r3, r2, r3
 8001be8:	69ba      	ldr	r2, [r7, #24]
 8001bea:	4313      	orrs	r3, r2
 8001bec:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	69ba      	ldr	r2, [r7, #24]
 8001bf2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001bf4:	683b      	ldr	r3, [r7, #0]
 8001bf6:	685b      	ldr	r3, [r3, #4]
 8001bf8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	f000 80be 	beq.w	8001d7e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c02:	4b66      	ldr	r3, [pc, #408]	; (8001d9c <HAL_GPIO_Init+0x324>)
 8001c04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c06:	4a65      	ldr	r2, [pc, #404]	; (8001d9c <HAL_GPIO_Init+0x324>)
 8001c08:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c0c:	6453      	str	r3, [r2, #68]	; 0x44
 8001c0e:	4b63      	ldr	r3, [pc, #396]	; (8001d9c <HAL_GPIO_Init+0x324>)
 8001c10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c12:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c16:	60fb      	str	r3, [r7, #12]
 8001c18:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001c1a:	4a61      	ldr	r2, [pc, #388]	; (8001da0 <HAL_GPIO_Init+0x328>)
 8001c1c:	69fb      	ldr	r3, [r7, #28]
 8001c1e:	089b      	lsrs	r3, r3, #2
 8001c20:	3302      	adds	r3, #2
 8001c22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c26:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001c28:	69fb      	ldr	r3, [r7, #28]
 8001c2a:	f003 0303 	and.w	r3, r3, #3
 8001c2e:	009b      	lsls	r3, r3, #2
 8001c30:	220f      	movs	r2, #15
 8001c32:	fa02 f303 	lsl.w	r3, r2, r3
 8001c36:	43db      	mvns	r3, r3
 8001c38:	69ba      	ldr	r2, [r7, #24]
 8001c3a:	4013      	ands	r3, r2
 8001c3c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	4a58      	ldr	r2, [pc, #352]	; (8001da4 <HAL_GPIO_Init+0x32c>)
 8001c42:	4293      	cmp	r3, r2
 8001c44:	d037      	beq.n	8001cb6 <HAL_GPIO_Init+0x23e>
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	4a57      	ldr	r2, [pc, #348]	; (8001da8 <HAL_GPIO_Init+0x330>)
 8001c4a:	4293      	cmp	r3, r2
 8001c4c:	d031      	beq.n	8001cb2 <HAL_GPIO_Init+0x23a>
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	4a56      	ldr	r2, [pc, #344]	; (8001dac <HAL_GPIO_Init+0x334>)
 8001c52:	4293      	cmp	r3, r2
 8001c54:	d02b      	beq.n	8001cae <HAL_GPIO_Init+0x236>
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	4a55      	ldr	r2, [pc, #340]	; (8001db0 <HAL_GPIO_Init+0x338>)
 8001c5a:	4293      	cmp	r3, r2
 8001c5c:	d025      	beq.n	8001caa <HAL_GPIO_Init+0x232>
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	4a54      	ldr	r2, [pc, #336]	; (8001db4 <HAL_GPIO_Init+0x33c>)
 8001c62:	4293      	cmp	r3, r2
 8001c64:	d01f      	beq.n	8001ca6 <HAL_GPIO_Init+0x22e>
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	4a53      	ldr	r2, [pc, #332]	; (8001db8 <HAL_GPIO_Init+0x340>)
 8001c6a:	4293      	cmp	r3, r2
 8001c6c:	d019      	beq.n	8001ca2 <HAL_GPIO_Init+0x22a>
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	4a52      	ldr	r2, [pc, #328]	; (8001dbc <HAL_GPIO_Init+0x344>)
 8001c72:	4293      	cmp	r3, r2
 8001c74:	d013      	beq.n	8001c9e <HAL_GPIO_Init+0x226>
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	4a51      	ldr	r2, [pc, #324]	; (8001dc0 <HAL_GPIO_Init+0x348>)
 8001c7a:	4293      	cmp	r3, r2
 8001c7c:	d00d      	beq.n	8001c9a <HAL_GPIO_Init+0x222>
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	4a50      	ldr	r2, [pc, #320]	; (8001dc4 <HAL_GPIO_Init+0x34c>)
 8001c82:	4293      	cmp	r3, r2
 8001c84:	d007      	beq.n	8001c96 <HAL_GPIO_Init+0x21e>
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	4a4f      	ldr	r2, [pc, #316]	; (8001dc8 <HAL_GPIO_Init+0x350>)
 8001c8a:	4293      	cmp	r3, r2
 8001c8c:	d101      	bne.n	8001c92 <HAL_GPIO_Init+0x21a>
 8001c8e:	2309      	movs	r3, #9
 8001c90:	e012      	b.n	8001cb8 <HAL_GPIO_Init+0x240>
 8001c92:	230a      	movs	r3, #10
 8001c94:	e010      	b.n	8001cb8 <HAL_GPIO_Init+0x240>
 8001c96:	2308      	movs	r3, #8
 8001c98:	e00e      	b.n	8001cb8 <HAL_GPIO_Init+0x240>
 8001c9a:	2307      	movs	r3, #7
 8001c9c:	e00c      	b.n	8001cb8 <HAL_GPIO_Init+0x240>
 8001c9e:	2306      	movs	r3, #6
 8001ca0:	e00a      	b.n	8001cb8 <HAL_GPIO_Init+0x240>
 8001ca2:	2305      	movs	r3, #5
 8001ca4:	e008      	b.n	8001cb8 <HAL_GPIO_Init+0x240>
 8001ca6:	2304      	movs	r3, #4
 8001ca8:	e006      	b.n	8001cb8 <HAL_GPIO_Init+0x240>
 8001caa:	2303      	movs	r3, #3
 8001cac:	e004      	b.n	8001cb8 <HAL_GPIO_Init+0x240>
 8001cae:	2302      	movs	r3, #2
 8001cb0:	e002      	b.n	8001cb8 <HAL_GPIO_Init+0x240>
 8001cb2:	2301      	movs	r3, #1
 8001cb4:	e000      	b.n	8001cb8 <HAL_GPIO_Init+0x240>
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	69fa      	ldr	r2, [r7, #28]
 8001cba:	f002 0203 	and.w	r2, r2, #3
 8001cbe:	0092      	lsls	r2, r2, #2
 8001cc0:	4093      	lsls	r3, r2
 8001cc2:	69ba      	ldr	r2, [r7, #24]
 8001cc4:	4313      	orrs	r3, r2
 8001cc6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001cc8:	4935      	ldr	r1, [pc, #212]	; (8001da0 <HAL_GPIO_Init+0x328>)
 8001cca:	69fb      	ldr	r3, [r7, #28]
 8001ccc:	089b      	lsrs	r3, r3, #2
 8001cce:	3302      	adds	r3, #2
 8001cd0:	69ba      	ldr	r2, [r7, #24]
 8001cd2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001cd6:	4b3d      	ldr	r3, [pc, #244]	; (8001dcc <HAL_GPIO_Init+0x354>)
 8001cd8:	689b      	ldr	r3, [r3, #8]
 8001cda:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cdc:	693b      	ldr	r3, [r7, #16]
 8001cde:	43db      	mvns	r3, r3
 8001ce0:	69ba      	ldr	r2, [r7, #24]
 8001ce2:	4013      	ands	r3, r2
 8001ce4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001ce6:	683b      	ldr	r3, [r7, #0]
 8001ce8:	685b      	ldr	r3, [r3, #4]
 8001cea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d003      	beq.n	8001cfa <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001cf2:	69ba      	ldr	r2, [r7, #24]
 8001cf4:	693b      	ldr	r3, [r7, #16]
 8001cf6:	4313      	orrs	r3, r2
 8001cf8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001cfa:	4a34      	ldr	r2, [pc, #208]	; (8001dcc <HAL_GPIO_Init+0x354>)
 8001cfc:	69bb      	ldr	r3, [r7, #24]
 8001cfe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001d00:	4b32      	ldr	r3, [pc, #200]	; (8001dcc <HAL_GPIO_Init+0x354>)
 8001d02:	68db      	ldr	r3, [r3, #12]
 8001d04:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d06:	693b      	ldr	r3, [r7, #16]
 8001d08:	43db      	mvns	r3, r3
 8001d0a:	69ba      	ldr	r2, [r7, #24]
 8001d0c:	4013      	ands	r3, r2
 8001d0e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	685b      	ldr	r3, [r3, #4]
 8001d14:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d003      	beq.n	8001d24 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001d1c:	69ba      	ldr	r2, [r7, #24]
 8001d1e:	693b      	ldr	r3, [r7, #16]
 8001d20:	4313      	orrs	r3, r2
 8001d22:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001d24:	4a29      	ldr	r2, [pc, #164]	; (8001dcc <HAL_GPIO_Init+0x354>)
 8001d26:	69bb      	ldr	r3, [r7, #24]
 8001d28:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001d2a:	4b28      	ldr	r3, [pc, #160]	; (8001dcc <HAL_GPIO_Init+0x354>)
 8001d2c:	685b      	ldr	r3, [r3, #4]
 8001d2e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d30:	693b      	ldr	r3, [r7, #16]
 8001d32:	43db      	mvns	r3, r3
 8001d34:	69ba      	ldr	r2, [r7, #24]
 8001d36:	4013      	ands	r3, r2
 8001d38:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001d3a:	683b      	ldr	r3, [r7, #0]
 8001d3c:	685b      	ldr	r3, [r3, #4]
 8001d3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d003      	beq.n	8001d4e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001d46:	69ba      	ldr	r2, [r7, #24]
 8001d48:	693b      	ldr	r3, [r7, #16]
 8001d4a:	4313      	orrs	r3, r2
 8001d4c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001d4e:	4a1f      	ldr	r2, [pc, #124]	; (8001dcc <HAL_GPIO_Init+0x354>)
 8001d50:	69bb      	ldr	r3, [r7, #24]
 8001d52:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001d54:	4b1d      	ldr	r3, [pc, #116]	; (8001dcc <HAL_GPIO_Init+0x354>)
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d5a:	693b      	ldr	r3, [r7, #16]
 8001d5c:	43db      	mvns	r3, r3
 8001d5e:	69ba      	ldr	r2, [r7, #24]
 8001d60:	4013      	ands	r3, r2
 8001d62:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001d64:	683b      	ldr	r3, [r7, #0]
 8001d66:	685b      	ldr	r3, [r3, #4]
 8001d68:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d003      	beq.n	8001d78 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001d70:	69ba      	ldr	r2, [r7, #24]
 8001d72:	693b      	ldr	r3, [r7, #16]
 8001d74:	4313      	orrs	r3, r2
 8001d76:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001d78:	4a14      	ldr	r2, [pc, #80]	; (8001dcc <HAL_GPIO_Init+0x354>)
 8001d7a:	69bb      	ldr	r3, [r7, #24]
 8001d7c:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001d7e:	69fb      	ldr	r3, [r7, #28]
 8001d80:	3301      	adds	r3, #1
 8001d82:	61fb      	str	r3, [r7, #28]
 8001d84:	69fb      	ldr	r3, [r7, #28]
 8001d86:	2b0f      	cmp	r3, #15
 8001d88:	f67f ae86 	bls.w	8001a98 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001d8c:	bf00      	nop
 8001d8e:	bf00      	nop
 8001d90:	3724      	adds	r7, #36	; 0x24
 8001d92:	46bd      	mov	sp, r7
 8001d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d98:	4770      	bx	lr
 8001d9a:	bf00      	nop
 8001d9c:	40023800 	.word	0x40023800
 8001da0:	40013800 	.word	0x40013800
 8001da4:	40020000 	.word	0x40020000
 8001da8:	40020400 	.word	0x40020400
 8001dac:	40020800 	.word	0x40020800
 8001db0:	40020c00 	.word	0x40020c00
 8001db4:	40021000 	.word	0x40021000
 8001db8:	40021400 	.word	0x40021400
 8001dbc:	40021800 	.word	0x40021800
 8001dc0:	40021c00 	.word	0x40021c00
 8001dc4:	40022000 	.word	0x40022000
 8001dc8:	40022400 	.word	0x40022400
 8001dcc:	40013c00 	.word	0x40013c00

08001dd0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001dd0:	b480      	push	{r7}
 8001dd2:	b083      	sub	sp, #12
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
 8001dd8:	460b      	mov	r3, r1
 8001dda:	807b      	strh	r3, [r7, #2]
 8001ddc:	4613      	mov	r3, r2
 8001dde:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001de0:	787b      	ldrb	r3, [r7, #1]
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d003      	beq.n	8001dee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001de6:	887a      	ldrh	r2, [r7, #2]
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001dec:	e003      	b.n	8001df6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001dee:	887b      	ldrh	r3, [r7, #2]
 8001df0:	041a      	lsls	r2, r3, #16
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	619a      	str	r2, [r3, #24]
}
 8001df6:	bf00      	nop
 8001df8:	370c      	adds	r7, #12
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e00:	4770      	bx	lr

08001e02 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001e02:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e04:	b08f      	sub	sp, #60	; 0x3c
 8001e06:	af0a      	add	r7, sp, #40	; 0x28
 8001e08:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d101      	bne.n	8001e14 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001e10:	2301      	movs	r3, #1
 8001e12:	e116      	b.n	8002042 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8001e20:	b2db      	uxtb	r3, r3
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d106      	bne.n	8001e34 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	2200      	movs	r2, #0
 8001e2a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001e2e:	6878      	ldr	r0, [r7, #4]
 8001e30:	f7ff f8c6 	bl	8000fc0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	2203      	movs	r2, #3
 8001e38:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001e3c:	68bb      	ldr	r3, [r7, #8]
 8001e3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d102      	bne.n	8001e4e <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	4618      	mov	r0, r3
 8001e54:	f002 fc90 	bl	8004778 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	603b      	str	r3, [r7, #0]
 8001e5e:	687e      	ldr	r6, [r7, #4]
 8001e60:	466d      	mov	r5, sp
 8001e62:	f106 0410 	add.w	r4, r6, #16
 8001e66:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e68:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e6a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e6c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e6e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001e72:	e885 0003 	stmia.w	r5, {r0, r1}
 8001e76:	1d33      	adds	r3, r6, #4
 8001e78:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001e7a:	6838      	ldr	r0, [r7, #0]
 8001e7c:	f002 fc24 	bl	80046c8 <USB_CoreInit>
 8001e80:	4603      	mov	r3, r0
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d005      	beq.n	8001e92 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	2202      	movs	r2, #2
 8001e8a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001e8e:	2301      	movs	r3, #1
 8001e90:	e0d7      	b.n	8002042 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	2100      	movs	r1, #0
 8001e98:	4618      	mov	r0, r3
 8001e9a:	f002 fc7e 	bl	800479a <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	73fb      	strb	r3, [r7, #15]
 8001ea2:	e04a      	b.n	8001f3a <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001ea4:	7bfa      	ldrb	r2, [r7, #15]
 8001ea6:	6879      	ldr	r1, [r7, #4]
 8001ea8:	4613      	mov	r3, r2
 8001eaa:	00db      	lsls	r3, r3, #3
 8001eac:	4413      	add	r3, r2
 8001eae:	009b      	lsls	r3, r3, #2
 8001eb0:	440b      	add	r3, r1
 8001eb2:	333d      	adds	r3, #61	; 0x3d
 8001eb4:	2201      	movs	r2, #1
 8001eb6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001eb8:	7bfa      	ldrb	r2, [r7, #15]
 8001eba:	6879      	ldr	r1, [r7, #4]
 8001ebc:	4613      	mov	r3, r2
 8001ebe:	00db      	lsls	r3, r3, #3
 8001ec0:	4413      	add	r3, r2
 8001ec2:	009b      	lsls	r3, r3, #2
 8001ec4:	440b      	add	r3, r1
 8001ec6:	333c      	adds	r3, #60	; 0x3c
 8001ec8:	7bfa      	ldrb	r2, [r7, #15]
 8001eca:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001ecc:	7bfa      	ldrb	r2, [r7, #15]
 8001ece:	7bfb      	ldrb	r3, [r7, #15]
 8001ed0:	b298      	uxth	r0, r3
 8001ed2:	6879      	ldr	r1, [r7, #4]
 8001ed4:	4613      	mov	r3, r2
 8001ed6:	00db      	lsls	r3, r3, #3
 8001ed8:	4413      	add	r3, r2
 8001eda:	009b      	lsls	r3, r3, #2
 8001edc:	440b      	add	r3, r1
 8001ede:	3344      	adds	r3, #68	; 0x44
 8001ee0:	4602      	mov	r2, r0
 8001ee2:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001ee4:	7bfa      	ldrb	r2, [r7, #15]
 8001ee6:	6879      	ldr	r1, [r7, #4]
 8001ee8:	4613      	mov	r3, r2
 8001eea:	00db      	lsls	r3, r3, #3
 8001eec:	4413      	add	r3, r2
 8001eee:	009b      	lsls	r3, r3, #2
 8001ef0:	440b      	add	r3, r1
 8001ef2:	3340      	adds	r3, #64	; 0x40
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001ef8:	7bfa      	ldrb	r2, [r7, #15]
 8001efa:	6879      	ldr	r1, [r7, #4]
 8001efc:	4613      	mov	r3, r2
 8001efe:	00db      	lsls	r3, r3, #3
 8001f00:	4413      	add	r3, r2
 8001f02:	009b      	lsls	r3, r3, #2
 8001f04:	440b      	add	r3, r1
 8001f06:	3348      	adds	r3, #72	; 0x48
 8001f08:	2200      	movs	r2, #0
 8001f0a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001f0c:	7bfa      	ldrb	r2, [r7, #15]
 8001f0e:	6879      	ldr	r1, [r7, #4]
 8001f10:	4613      	mov	r3, r2
 8001f12:	00db      	lsls	r3, r3, #3
 8001f14:	4413      	add	r3, r2
 8001f16:	009b      	lsls	r3, r3, #2
 8001f18:	440b      	add	r3, r1
 8001f1a:	334c      	adds	r3, #76	; 0x4c
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001f20:	7bfa      	ldrb	r2, [r7, #15]
 8001f22:	6879      	ldr	r1, [r7, #4]
 8001f24:	4613      	mov	r3, r2
 8001f26:	00db      	lsls	r3, r3, #3
 8001f28:	4413      	add	r3, r2
 8001f2a:	009b      	lsls	r3, r3, #2
 8001f2c:	440b      	add	r3, r1
 8001f2e:	3354      	adds	r3, #84	; 0x54
 8001f30:	2200      	movs	r2, #0
 8001f32:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f34:	7bfb      	ldrb	r3, [r7, #15]
 8001f36:	3301      	adds	r3, #1
 8001f38:	73fb      	strb	r3, [r7, #15]
 8001f3a:	7bfa      	ldrb	r2, [r7, #15]
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	685b      	ldr	r3, [r3, #4]
 8001f40:	429a      	cmp	r2, r3
 8001f42:	d3af      	bcc.n	8001ea4 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f44:	2300      	movs	r3, #0
 8001f46:	73fb      	strb	r3, [r7, #15]
 8001f48:	e044      	b.n	8001fd4 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001f4a:	7bfa      	ldrb	r2, [r7, #15]
 8001f4c:	6879      	ldr	r1, [r7, #4]
 8001f4e:	4613      	mov	r3, r2
 8001f50:	00db      	lsls	r3, r3, #3
 8001f52:	4413      	add	r3, r2
 8001f54:	009b      	lsls	r3, r3, #2
 8001f56:	440b      	add	r3, r1
 8001f58:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001f60:	7bfa      	ldrb	r2, [r7, #15]
 8001f62:	6879      	ldr	r1, [r7, #4]
 8001f64:	4613      	mov	r3, r2
 8001f66:	00db      	lsls	r3, r3, #3
 8001f68:	4413      	add	r3, r2
 8001f6a:	009b      	lsls	r3, r3, #2
 8001f6c:	440b      	add	r3, r1
 8001f6e:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8001f72:	7bfa      	ldrb	r2, [r7, #15]
 8001f74:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001f76:	7bfa      	ldrb	r2, [r7, #15]
 8001f78:	6879      	ldr	r1, [r7, #4]
 8001f7a:	4613      	mov	r3, r2
 8001f7c:	00db      	lsls	r3, r3, #3
 8001f7e:	4413      	add	r3, r2
 8001f80:	009b      	lsls	r3, r3, #2
 8001f82:	440b      	add	r3, r1
 8001f84:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001f88:	2200      	movs	r2, #0
 8001f8a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001f8c:	7bfa      	ldrb	r2, [r7, #15]
 8001f8e:	6879      	ldr	r1, [r7, #4]
 8001f90:	4613      	mov	r3, r2
 8001f92:	00db      	lsls	r3, r3, #3
 8001f94:	4413      	add	r3, r2
 8001f96:	009b      	lsls	r3, r3, #2
 8001f98:	440b      	add	r3, r1
 8001f9a:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001fa2:	7bfa      	ldrb	r2, [r7, #15]
 8001fa4:	6879      	ldr	r1, [r7, #4]
 8001fa6:	4613      	mov	r3, r2
 8001fa8:	00db      	lsls	r3, r3, #3
 8001faa:	4413      	add	r3, r2
 8001fac:	009b      	lsls	r3, r3, #2
 8001fae:	440b      	add	r3, r1
 8001fb0:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001fb8:	7bfa      	ldrb	r2, [r7, #15]
 8001fba:	6879      	ldr	r1, [r7, #4]
 8001fbc:	4613      	mov	r3, r2
 8001fbe:	00db      	lsls	r3, r3, #3
 8001fc0:	4413      	add	r3, r2
 8001fc2:	009b      	lsls	r3, r3, #2
 8001fc4:	440b      	add	r3, r1
 8001fc6:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8001fca:	2200      	movs	r2, #0
 8001fcc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001fce:	7bfb      	ldrb	r3, [r7, #15]
 8001fd0:	3301      	adds	r3, #1
 8001fd2:	73fb      	strb	r3, [r7, #15]
 8001fd4:	7bfa      	ldrb	r2, [r7, #15]
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	685b      	ldr	r3, [r3, #4]
 8001fda:	429a      	cmp	r2, r3
 8001fdc:	d3b5      	bcc.n	8001f4a <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	603b      	str	r3, [r7, #0]
 8001fe4:	687e      	ldr	r6, [r7, #4]
 8001fe6:	466d      	mov	r5, sp
 8001fe8:	f106 0410 	add.w	r4, r6, #16
 8001fec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001fee:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001ff0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001ff2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001ff4:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001ff8:	e885 0003 	stmia.w	r5, {r0, r1}
 8001ffc:	1d33      	adds	r3, r6, #4
 8001ffe:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002000:	6838      	ldr	r0, [r7, #0]
 8002002:	f002 fc17 	bl	8004834 <USB_DevInit>
 8002006:	4603      	mov	r3, r0
 8002008:	2b00      	cmp	r3, #0
 800200a:	d005      	beq.n	8002018 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	2202      	movs	r2, #2
 8002010:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002014:	2301      	movs	r3, #1
 8002016:	e014      	b.n	8002042 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	2200      	movs	r2, #0
 800201c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	2201      	movs	r2, #1
 8002024:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800202c:	2b01      	cmp	r3, #1
 800202e:	d102      	bne.n	8002036 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002030:	6878      	ldr	r0, [r7, #4]
 8002032:	f000 f80b 	bl	800204c <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	4618      	mov	r0, r3
 800203c:	f002 fdd5 	bl	8004bea <USB_DevDisconnect>

  return HAL_OK;
 8002040:	2300      	movs	r3, #0
}
 8002042:	4618      	mov	r0, r3
 8002044:	3714      	adds	r7, #20
 8002046:	46bd      	mov	sp, r7
 8002048:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0800204c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800204c:	b480      	push	{r7}
 800204e:	b085      	sub	sp, #20
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	2201      	movs	r2, #1
 800205e:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	2200      	movs	r2, #0
 8002066:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	699b      	ldr	r3, [r3, #24]
 800206e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800207a:	4b05      	ldr	r3, [pc, #20]	; (8002090 <HAL_PCDEx_ActivateLPM+0x44>)
 800207c:	4313      	orrs	r3, r2
 800207e:	68fa      	ldr	r2, [r7, #12]
 8002080:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8002082:	2300      	movs	r3, #0
}
 8002084:	4618      	mov	r0, r3
 8002086:	3714      	adds	r7, #20
 8002088:	46bd      	mov	sp, r7
 800208a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208e:	4770      	bx	lr
 8002090:	10000003 	.word	0x10000003

08002094 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002094:	b480      	push	{r7}
 8002096:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002098:	4b05      	ldr	r3, [pc, #20]	; (80020b0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	4a04      	ldr	r2, [pc, #16]	; (80020b0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800209e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020a2:	6013      	str	r3, [r2, #0]
}
 80020a4:	bf00      	nop
 80020a6:	46bd      	mov	sp, r7
 80020a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ac:	4770      	bx	lr
 80020ae:	bf00      	nop
 80020b0:	40007000 	.word	0x40007000

080020b4 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b082      	sub	sp, #8
 80020b8:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80020ba:	2300      	movs	r3, #0
 80020bc:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80020be:	4b23      	ldr	r3, [pc, #140]	; (800214c <HAL_PWREx_EnableOverDrive+0x98>)
 80020c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020c2:	4a22      	ldr	r2, [pc, #136]	; (800214c <HAL_PWREx_EnableOverDrive+0x98>)
 80020c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020c8:	6413      	str	r3, [r2, #64]	; 0x40
 80020ca:	4b20      	ldr	r3, [pc, #128]	; (800214c <HAL_PWREx_EnableOverDrive+0x98>)
 80020cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020d2:	603b      	str	r3, [r7, #0]
 80020d4:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80020d6:	4b1e      	ldr	r3, [pc, #120]	; (8002150 <HAL_PWREx_EnableOverDrive+0x9c>)
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	4a1d      	ldr	r2, [pc, #116]	; (8002150 <HAL_PWREx_EnableOverDrive+0x9c>)
 80020dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020e0:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80020e2:	f7ff f861 	bl	80011a8 <HAL_GetTick>
 80020e6:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80020e8:	e009      	b.n	80020fe <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80020ea:	f7ff f85d 	bl	80011a8 <HAL_GetTick>
 80020ee:	4602      	mov	r2, r0
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	1ad3      	subs	r3, r2, r3
 80020f4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80020f8:	d901      	bls.n	80020fe <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80020fa:	2303      	movs	r3, #3
 80020fc:	e022      	b.n	8002144 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80020fe:	4b14      	ldr	r3, [pc, #80]	; (8002150 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002100:	685b      	ldr	r3, [r3, #4]
 8002102:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002106:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800210a:	d1ee      	bne.n	80020ea <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800210c:	4b10      	ldr	r3, [pc, #64]	; (8002150 <HAL_PWREx_EnableOverDrive+0x9c>)
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	4a0f      	ldr	r2, [pc, #60]	; (8002150 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002112:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002116:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002118:	f7ff f846 	bl	80011a8 <HAL_GetTick>
 800211c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800211e:	e009      	b.n	8002134 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002120:	f7ff f842 	bl	80011a8 <HAL_GetTick>
 8002124:	4602      	mov	r2, r0
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	1ad3      	subs	r3, r2, r3
 800212a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800212e:	d901      	bls.n	8002134 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8002130:	2303      	movs	r3, #3
 8002132:	e007      	b.n	8002144 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002134:	4b06      	ldr	r3, [pc, #24]	; (8002150 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002136:	685b      	ldr	r3, [r3, #4]
 8002138:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800213c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002140:	d1ee      	bne.n	8002120 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8002142:	2300      	movs	r3, #0
}
 8002144:	4618      	mov	r0, r3
 8002146:	3708      	adds	r7, #8
 8002148:	46bd      	mov	sp, r7
 800214a:	bd80      	pop	{r7, pc}
 800214c:	40023800 	.word	0x40023800
 8002150:	40007000 	.word	0x40007000

08002154 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	b086      	sub	sp, #24
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800215c:	2300      	movs	r3, #0
 800215e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	2b00      	cmp	r3, #0
 8002164:	d101      	bne.n	800216a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002166:	2301      	movs	r3, #1
 8002168:	e29b      	b.n	80026a2 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f003 0301 	and.w	r3, r3, #1
 8002172:	2b00      	cmp	r3, #0
 8002174:	f000 8087 	beq.w	8002286 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002178:	4b96      	ldr	r3, [pc, #600]	; (80023d4 <HAL_RCC_OscConfig+0x280>)
 800217a:	689b      	ldr	r3, [r3, #8]
 800217c:	f003 030c 	and.w	r3, r3, #12
 8002180:	2b04      	cmp	r3, #4
 8002182:	d00c      	beq.n	800219e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002184:	4b93      	ldr	r3, [pc, #588]	; (80023d4 <HAL_RCC_OscConfig+0x280>)
 8002186:	689b      	ldr	r3, [r3, #8]
 8002188:	f003 030c 	and.w	r3, r3, #12
 800218c:	2b08      	cmp	r3, #8
 800218e:	d112      	bne.n	80021b6 <HAL_RCC_OscConfig+0x62>
 8002190:	4b90      	ldr	r3, [pc, #576]	; (80023d4 <HAL_RCC_OscConfig+0x280>)
 8002192:	685b      	ldr	r3, [r3, #4]
 8002194:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002198:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800219c:	d10b      	bne.n	80021b6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800219e:	4b8d      	ldr	r3, [pc, #564]	; (80023d4 <HAL_RCC_OscConfig+0x280>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d06c      	beq.n	8002284 <HAL_RCC_OscConfig+0x130>
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	685b      	ldr	r3, [r3, #4]
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d168      	bne.n	8002284 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80021b2:	2301      	movs	r3, #1
 80021b4:	e275      	b.n	80026a2 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	685b      	ldr	r3, [r3, #4]
 80021ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80021be:	d106      	bne.n	80021ce <HAL_RCC_OscConfig+0x7a>
 80021c0:	4b84      	ldr	r3, [pc, #528]	; (80023d4 <HAL_RCC_OscConfig+0x280>)
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	4a83      	ldr	r2, [pc, #524]	; (80023d4 <HAL_RCC_OscConfig+0x280>)
 80021c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021ca:	6013      	str	r3, [r2, #0]
 80021cc:	e02e      	b.n	800222c <HAL_RCC_OscConfig+0xd8>
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	685b      	ldr	r3, [r3, #4]
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d10c      	bne.n	80021f0 <HAL_RCC_OscConfig+0x9c>
 80021d6:	4b7f      	ldr	r3, [pc, #508]	; (80023d4 <HAL_RCC_OscConfig+0x280>)
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	4a7e      	ldr	r2, [pc, #504]	; (80023d4 <HAL_RCC_OscConfig+0x280>)
 80021dc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80021e0:	6013      	str	r3, [r2, #0]
 80021e2:	4b7c      	ldr	r3, [pc, #496]	; (80023d4 <HAL_RCC_OscConfig+0x280>)
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	4a7b      	ldr	r2, [pc, #492]	; (80023d4 <HAL_RCC_OscConfig+0x280>)
 80021e8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80021ec:	6013      	str	r3, [r2, #0]
 80021ee:	e01d      	b.n	800222c <HAL_RCC_OscConfig+0xd8>
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	685b      	ldr	r3, [r3, #4]
 80021f4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80021f8:	d10c      	bne.n	8002214 <HAL_RCC_OscConfig+0xc0>
 80021fa:	4b76      	ldr	r3, [pc, #472]	; (80023d4 <HAL_RCC_OscConfig+0x280>)
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	4a75      	ldr	r2, [pc, #468]	; (80023d4 <HAL_RCC_OscConfig+0x280>)
 8002200:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002204:	6013      	str	r3, [r2, #0]
 8002206:	4b73      	ldr	r3, [pc, #460]	; (80023d4 <HAL_RCC_OscConfig+0x280>)
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	4a72      	ldr	r2, [pc, #456]	; (80023d4 <HAL_RCC_OscConfig+0x280>)
 800220c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002210:	6013      	str	r3, [r2, #0]
 8002212:	e00b      	b.n	800222c <HAL_RCC_OscConfig+0xd8>
 8002214:	4b6f      	ldr	r3, [pc, #444]	; (80023d4 <HAL_RCC_OscConfig+0x280>)
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	4a6e      	ldr	r2, [pc, #440]	; (80023d4 <HAL_RCC_OscConfig+0x280>)
 800221a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800221e:	6013      	str	r3, [r2, #0]
 8002220:	4b6c      	ldr	r3, [pc, #432]	; (80023d4 <HAL_RCC_OscConfig+0x280>)
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	4a6b      	ldr	r2, [pc, #428]	; (80023d4 <HAL_RCC_OscConfig+0x280>)
 8002226:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800222a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	685b      	ldr	r3, [r3, #4]
 8002230:	2b00      	cmp	r3, #0
 8002232:	d013      	beq.n	800225c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002234:	f7fe ffb8 	bl	80011a8 <HAL_GetTick>
 8002238:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800223a:	e008      	b.n	800224e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800223c:	f7fe ffb4 	bl	80011a8 <HAL_GetTick>
 8002240:	4602      	mov	r2, r0
 8002242:	693b      	ldr	r3, [r7, #16]
 8002244:	1ad3      	subs	r3, r2, r3
 8002246:	2b64      	cmp	r3, #100	; 0x64
 8002248:	d901      	bls.n	800224e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800224a:	2303      	movs	r3, #3
 800224c:	e229      	b.n	80026a2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800224e:	4b61      	ldr	r3, [pc, #388]	; (80023d4 <HAL_RCC_OscConfig+0x280>)
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002256:	2b00      	cmp	r3, #0
 8002258:	d0f0      	beq.n	800223c <HAL_RCC_OscConfig+0xe8>
 800225a:	e014      	b.n	8002286 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800225c:	f7fe ffa4 	bl	80011a8 <HAL_GetTick>
 8002260:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002262:	e008      	b.n	8002276 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002264:	f7fe ffa0 	bl	80011a8 <HAL_GetTick>
 8002268:	4602      	mov	r2, r0
 800226a:	693b      	ldr	r3, [r7, #16]
 800226c:	1ad3      	subs	r3, r2, r3
 800226e:	2b64      	cmp	r3, #100	; 0x64
 8002270:	d901      	bls.n	8002276 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002272:	2303      	movs	r3, #3
 8002274:	e215      	b.n	80026a2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002276:	4b57      	ldr	r3, [pc, #348]	; (80023d4 <HAL_RCC_OscConfig+0x280>)
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800227e:	2b00      	cmp	r3, #0
 8002280:	d1f0      	bne.n	8002264 <HAL_RCC_OscConfig+0x110>
 8002282:	e000      	b.n	8002286 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002284:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f003 0302 	and.w	r3, r3, #2
 800228e:	2b00      	cmp	r3, #0
 8002290:	d069      	beq.n	8002366 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002292:	4b50      	ldr	r3, [pc, #320]	; (80023d4 <HAL_RCC_OscConfig+0x280>)
 8002294:	689b      	ldr	r3, [r3, #8]
 8002296:	f003 030c 	and.w	r3, r3, #12
 800229a:	2b00      	cmp	r3, #0
 800229c:	d00b      	beq.n	80022b6 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800229e:	4b4d      	ldr	r3, [pc, #308]	; (80023d4 <HAL_RCC_OscConfig+0x280>)
 80022a0:	689b      	ldr	r3, [r3, #8]
 80022a2:	f003 030c 	and.w	r3, r3, #12
 80022a6:	2b08      	cmp	r3, #8
 80022a8:	d11c      	bne.n	80022e4 <HAL_RCC_OscConfig+0x190>
 80022aa:	4b4a      	ldr	r3, [pc, #296]	; (80023d4 <HAL_RCC_OscConfig+0x280>)
 80022ac:	685b      	ldr	r3, [r3, #4]
 80022ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d116      	bne.n	80022e4 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022b6:	4b47      	ldr	r3, [pc, #284]	; (80023d4 <HAL_RCC_OscConfig+0x280>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f003 0302 	and.w	r3, r3, #2
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d005      	beq.n	80022ce <HAL_RCC_OscConfig+0x17a>
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	68db      	ldr	r3, [r3, #12]
 80022c6:	2b01      	cmp	r3, #1
 80022c8:	d001      	beq.n	80022ce <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80022ca:	2301      	movs	r3, #1
 80022cc:	e1e9      	b.n	80026a2 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022ce:	4b41      	ldr	r3, [pc, #260]	; (80023d4 <HAL_RCC_OscConfig+0x280>)
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	691b      	ldr	r3, [r3, #16]
 80022da:	00db      	lsls	r3, r3, #3
 80022dc:	493d      	ldr	r1, [pc, #244]	; (80023d4 <HAL_RCC_OscConfig+0x280>)
 80022de:	4313      	orrs	r3, r2
 80022e0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022e2:	e040      	b.n	8002366 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	68db      	ldr	r3, [r3, #12]
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d023      	beq.n	8002334 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80022ec:	4b39      	ldr	r3, [pc, #228]	; (80023d4 <HAL_RCC_OscConfig+0x280>)
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	4a38      	ldr	r2, [pc, #224]	; (80023d4 <HAL_RCC_OscConfig+0x280>)
 80022f2:	f043 0301 	orr.w	r3, r3, #1
 80022f6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022f8:	f7fe ff56 	bl	80011a8 <HAL_GetTick>
 80022fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022fe:	e008      	b.n	8002312 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002300:	f7fe ff52 	bl	80011a8 <HAL_GetTick>
 8002304:	4602      	mov	r2, r0
 8002306:	693b      	ldr	r3, [r7, #16]
 8002308:	1ad3      	subs	r3, r2, r3
 800230a:	2b02      	cmp	r3, #2
 800230c:	d901      	bls.n	8002312 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800230e:	2303      	movs	r3, #3
 8002310:	e1c7      	b.n	80026a2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002312:	4b30      	ldr	r3, [pc, #192]	; (80023d4 <HAL_RCC_OscConfig+0x280>)
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f003 0302 	and.w	r3, r3, #2
 800231a:	2b00      	cmp	r3, #0
 800231c:	d0f0      	beq.n	8002300 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800231e:	4b2d      	ldr	r3, [pc, #180]	; (80023d4 <HAL_RCC_OscConfig+0x280>)
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	691b      	ldr	r3, [r3, #16]
 800232a:	00db      	lsls	r3, r3, #3
 800232c:	4929      	ldr	r1, [pc, #164]	; (80023d4 <HAL_RCC_OscConfig+0x280>)
 800232e:	4313      	orrs	r3, r2
 8002330:	600b      	str	r3, [r1, #0]
 8002332:	e018      	b.n	8002366 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002334:	4b27      	ldr	r3, [pc, #156]	; (80023d4 <HAL_RCC_OscConfig+0x280>)
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	4a26      	ldr	r2, [pc, #152]	; (80023d4 <HAL_RCC_OscConfig+0x280>)
 800233a:	f023 0301 	bic.w	r3, r3, #1
 800233e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002340:	f7fe ff32 	bl	80011a8 <HAL_GetTick>
 8002344:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002346:	e008      	b.n	800235a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002348:	f7fe ff2e 	bl	80011a8 <HAL_GetTick>
 800234c:	4602      	mov	r2, r0
 800234e:	693b      	ldr	r3, [r7, #16]
 8002350:	1ad3      	subs	r3, r2, r3
 8002352:	2b02      	cmp	r3, #2
 8002354:	d901      	bls.n	800235a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002356:	2303      	movs	r3, #3
 8002358:	e1a3      	b.n	80026a2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800235a:	4b1e      	ldr	r3, [pc, #120]	; (80023d4 <HAL_RCC_OscConfig+0x280>)
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f003 0302 	and.w	r3, r3, #2
 8002362:	2b00      	cmp	r3, #0
 8002364:	d1f0      	bne.n	8002348 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f003 0308 	and.w	r3, r3, #8
 800236e:	2b00      	cmp	r3, #0
 8002370:	d038      	beq.n	80023e4 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	695b      	ldr	r3, [r3, #20]
 8002376:	2b00      	cmp	r3, #0
 8002378:	d019      	beq.n	80023ae <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800237a:	4b16      	ldr	r3, [pc, #88]	; (80023d4 <HAL_RCC_OscConfig+0x280>)
 800237c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800237e:	4a15      	ldr	r2, [pc, #84]	; (80023d4 <HAL_RCC_OscConfig+0x280>)
 8002380:	f043 0301 	orr.w	r3, r3, #1
 8002384:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002386:	f7fe ff0f 	bl	80011a8 <HAL_GetTick>
 800238a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800238c:	e008      	b.n	80023a0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800238e:	f7fe ff0b 	bl	80011a8 <HAL_GetTick>
 8002392:	4602      	mov	r2, r0
 8002394:	693b      	ldr	r3, [r7, #16]
 8002396:	1ad3      	subs	r3, r2, r3
 8002398:	2b02      	cmp	r3, #2
 800239a:	d901      	bls.n	80023a0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800239c:	2303      	movs	r3, #3
 800239e:	e180      	b.n	80026a2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023a0:	4b0c      	ldr	r3, [pc, #48]	; (80023d4 <HAL_RCC_OscConfig+0x280>)
 80023a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80023a4:	f003 0302 	and.w	r3, r3, #2
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d0f0      	beq.n	800238e <HAL_RCC_OscConfig+0x23a>
 80023ac:	e01a      	b.n	80023e4 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80023ae:	4b09      	ldr	r3, [pc, #36]	; (80023d4 <HAL_RCC_OscConfig+0x280>)
 80023b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80023b2:	4a08      	ldr	r2, [pc, #32]	; (80023d4 <HAL_RCC_OscConfig+0x280>)
 80023b4:	f023 0301 	bic.w	r3, r3, #1
 80023b8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023ba:	f7fe fef5 	bl	80011a8 <HAL_GetTick>
 80023be:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023c0:	e00a      	b.n	80023d8 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80023c2:	f7fe fef1 	bl	80011a8 <HAL_GetTick>
 80023c6:	4602      	mov	r2, r0
 80023c8:	693b      	ldr	r3, [r7, #16]
 80023ca:	1ad3      	subs	r3, r2, r3
 80023cc:	2b02      	cmp	r3, #2
 80023ce:	d903      	bls.n	80023d8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80023d0:	2303      	movs	r3, #3
 80023d2:	e166      	b.n	80026a2 <HAL_RCC_OscConfig+0x54e>
 80023d4:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023d8:	4b92      	ldr	r3, [pc, #584]	; (8002624 <HAL_RCC_OscConfig+0x4d0>)
 80023da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80023dc:	f003 0302 	and.w	r3, r3, #2
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d1ee      	bne.n	80023c2 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f003 0304 	and.w	r3, r3, #4
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	f000 80a4 	beq.w	800253a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80023f2:	4b8c      	ldr	r3, [pc, #560]	; (8002624 <HAL_RCC_OscConfig+0x4d0>)
 80023f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d10d      	bne.n	800241a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80023fe:	4b89      	ldr	r3, [pc, #548]	; (8002624 <HAL_RCC_OscConfig+0x4d0>)
 8002400:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002402:	4a88      	ldr	r2, [pc, #544]	; (8002624 <HAL_RCC_OscConfig+0x4d0>)
 8002404:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002408:	6413      	str	r3, [r2, #64]	; 0x40
 800240a:	4b86      	ldr	r3, [pc, #536]	; (8002624 <HAL_RCC_OscConfig+0x4d0>)
 800240c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800240e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002412:	60bb      	str	r3, [r7, #8]
 8002414:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002416:	2301      	movs	r3, #1
 8002418:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800241a:	4b83      	ldr	r3, [pc, #524]	; (8002628 <HAL_RCC_OscConfig+0x4d4>)
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002422:	2b00      	cmp	r3, #0
 8002424:	d118      	bne.n	8002458 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002426:	4b80      	ldr	r3, [pc, #512]	; (8002628 <HAL_RCC_OscConfig+0x4d4>)
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	4a7f      	ldr	r2, [pc, #508]	; (8002628 <HAL_RCC_OscConfig+0x4d4>)
 800242c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002430:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002432:	f7fe feb9 	bl	80011a8 <HAL_GetTick>
 8002436:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002438:	e008      	b.n	800244c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800243a:	f7fe feb5 	bl	80011a8 <HAL_GetTick>
 800243e:	4602      	mov	r2, r0
 8002440:	693b      	ldr	r3, [r7, #16]
 8002442:	1ad3      	subs	r3, r2, r3
 8002444:	2b64      	cmp	r3, #100	; 0x64
 8002446:	d901      	bls.n	800244c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002448:	2303      	movs	r3, #3
 800244a:	e12a      	b.n	80026a2 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800244c:	4b76      	ldr	r3, [pc, #472]	; (8002628 <HAL_RCC_OscConfig+0x4d4>)
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002454:	2b00      	cmp	r3, #0
 8002456:	d0f0      	beq.n	800243a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	689b      	ldr	r3, [r3, #8]
 800245c:	2b01      	cmp	r3, #1
 800245e:	d106      	bne.n	800246e <HAL_RCC_OscConfig+0x31a>
 8002460:	4b70      	ldr	r3, [pc, #448]	; (8002624 <HAL_RCC_OscConfig+0x4d0>)
 8002462:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002464:	4a6f      	ldr	r2, [pc, #444]	; (8002624 <HAL_RCC_OscConfig+0x4d0>)
 8002466:	f043 0301 	orr.w	r3, r3, #1
 800246a:	6713      	str	r3, [r2, #112]	; 0x70
 800246c:	e02d      	b.n	80024ca <HAL_RCC_OscConfig+0x376>
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	689b      	ldr	r3, [r3, #8]
 8002472:	2b00      	cmp	r3, #0
 8002474:	d10c      	bne.n	8002490 <HAL_RCC_OscConfig+0x33c>
 8002476:	4b6b      	ldr	r3, [pc, #428]	; (8002624 <HAL_RCC_OscConfig+0x4d0>)
 8002478:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800247a:	4a6a      	ldr	r2, [pc, #424]	; (8002624 <HAL_RCC_OscConfig+0x4d0>)
 800247c:	f023 0301 	bic.w	r3, r3, #1
 8002480:	6713      	str	r3, [r2, #112]	; 0x70
 8002482:	4b68      	ldr	r3, [pc, #416]	; (8002624 <HAL_RCC_OscConfig+0x4d0>)
 8002484:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002486:	4a67      	ldr	r2, [pc, #412]	; (8002624 <HAL_RCC_OscConfig+0x4d0>)
 8002488:	f023 0304 	bic.w	r3, r3, #4
 800248c:	6713      	str	r3, [r2, #112]	; 0x70
 800248e:	e01c      	b.n	80024ca <HAL_RCC_OscConfig+0x376>
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	689b      	ldr	r3, [r3, #8]
 8002494:	2b05      	cmp	r3, #5
 8002496:	d10c      	bne.n	80024b2 <HAL_RCC_OscConfig+0x35e>
 8002498:	4b62      	ldr	r3, [pc, #392]	; (8002624 <HAL_RCC_OscConfig+0x4d0>)
 800249a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800249c:	4a61      	ldr	r2, [pc, #388]	; (8002624 <HAL_RCC_OscConfig+0x4d0>)
 800249e:	f043 0304 	orr.w	r3, r3, #4
 80024a2:	6713      	str	r3, [r2, #112]	; 0x70
 80024a4:	4b5f      	ldr	r3, [pc, #380]	; (8002624 <HAL_RCC_OscConfig+0x4d0>)
 80024a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024a8:	4a5e      	ldr	r2, [pc, #376]	; (8002624 <HAL_RCC_OscConfig+0x4d0>)
 80024aa:	f043 0301 	orr.w	r3, r3, #1
 80024ae:	6713      	str	r3, [r2, #112]	; 0x70
 80024b0:	e00b      	b.n	80024ca <HAL_RCC_OscConfig+0x376>
 80024b2:	4b5c      	ldr	r3, [pc, #368]	; (8002624 <HAL_RCC_OscConfig+0x4d0>)
 80024b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024b6:	4a5b      	ldr	r2, [pc, #364]	; (8002624 <HAL_RCC_OscConfig+0x4d0>)
 80024b8:	f023 0301 	bic.w	r3, r3, #1
 80024bc:	6713      	str	r3, [r2, #112]	; 0x70
 80024be:	4b59      	ldr	r3, [pc, #356]	; (8002624 <HAL_RCC_OscConfig+0x4d0>)
 80024c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024c2:	4a58      	ldr	r2, [pc, #352]	; (8002624 <HAL_RCC_OscConfig+0x4d0>)
 80024c4:	f023 0304 	bic.w	r3, r3, #4
 80024c8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	689b      	ldr	r3, [r3, #8]
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d015      	beq.n	80024fe <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024d2:	f7fe fe69 	bl	80011a8 <HAL_GetTick>
 80024d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024d8:	e00a      	b.n	80024f0 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024da:	f7fe fe65 	bl	80011a8 <HAL_GetTick>
 80024de:	4602      	mov	r2, r0
 80024e0:	693b      	ldr	r3, [r7, #16]
 80024e2:	1ad3      	subs	r3, r2, r3
 80024e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80024e8:	4293      	cmp	r3, r2
 80024ea:	d901      	bls.n	80024f0 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80024ec:	2303      	movs	r3, #3
 80024ee:	e0d8      	b.n	80026a2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024f0:	4b4c      	ldr	r3, [pc, #304]	; (8002624 <HAL_RCC_OscConfig+0x4d0>)
 80024f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024f4:	f003 0302 	and.w	r3, r3, #2
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d0ee      	beq.n	80024da <HAL_RCC_OscConfig+0x386>
 80024fc:	e014      	b.n	8002528 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024fe:	f7fe fe53 	bl	80011a8 <HAL_GetTick>
 8002502:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002504:	e00a      	b.n	800251c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002506:	f7fe fe4f 	bl	80011a8 <HAL_GetTick>
 800250a:	4602      	mov	r2, r0
 800250c:	693b      	ldr	r3, [r7, #16]
 800250e:	1ad3      	subs	r3, r2, r3
 8002510:	f241 3288 	movw	r2, #5000	; 0x1388
 8002514:	4293      	cmp	r3, r2
 8002516:	d901      	bls.n	800251c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002518:	2303      	movs	r3, #3
 800251a:	e0c2      	b.n	80026a2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800251c:	4b41      	ldr	r3, [pc, #260]	; (8002624 <HAL_RCC_OscConfig+0x4d0>)
 800251e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002520:	f003 0302 	and.w	r3, r3, #2
 8002524:	2b00      	cmp	r3, #0
 8002526:	d1ee      	bne.n	8002506 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002528:	7dfb      	ldrb	r3, [r7, #23]
 800252a:	2b01      	cmp	r3, #1
 800252c:	d105      	bne.n	800253a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800252e:	4b3d      	ldr	r3, [pc, #244]	; (8002624 <HAL_RCC_OscConfig+0x4d0>)
 8002530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002532:	4a3c      	ldr	r2, [pc, #240]	; (8002624 <HAL_RCC_OscConfig+0x4d0>)
 8002534:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002538:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	699b      	ldr	r3, [r3, #24]
 800253e:	2b00      	cmp	r3, #0
 8002540:	f000 80ae 	beq.w	80026a0 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002544:	4b37      	ldr	r3, [pc, #220]	; (8002624 <HAL_RCC_OscConfig+0x4d0>)
 8002546:	689b      	ldr	r3, [r3, #8]
 8002548:	f003 030c 	and.w	r3, r3, #12
 800254c:	2b08      	cmp	r3, #8
 800254e:	d06d      	beq.n	800262c <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	699b      	ldr	r3, [r3, #24]
 8002554:	2b02      	cmp	r3, #2
 8002556:	d14b      	bne.n	80025f0 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002558:	4b32      	ldr	r3, [pc, #200]	; (8002624 <HAL_RCC_OscConfig+0x4d0>)
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	4a31      	ldr	r2, [pc, #196]	; (8002624 <HAL_RCC_OscConfig+0x4d0>)
 800255e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002562:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002564:	f7fe fe20 	bl	80011a8 <HAL_GetTick>
 8002568:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800256a:	e008      	b.n	800257e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800256c:	f7fe fe1c 	bl	80011a8 <HAL_GetTick>
 8002570:	4602      	mov	r2, r0
 8002572:	693b      	ldr	r3, [r7, #16]
 8002574:	1ad3      	subs	r3, r2, r3
 8002576:	2b02      	cmp	r3, #2
 8002578:	d901      	bls.n	800257e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800257a:	2303      	movs	r3, #3
 800257c:	e091      	b.n	80026a2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800257e:	4b29      	ldr	r3, [pc, #164]	; (8002624 <HAL_RCC_OscConfig+0x4d0>)
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002586:	2b00      	cmp	r3, #0
 8002588:	d1f0      	bne.n	800256c <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	69da      	ldr	r2, [r3, #28]
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	6a1b      	ldr	r3, [r3, #32]
 8002592:	431a      	orrs	r2, r3
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002598:	019b      	lsls	r3, r3, #6
 800259a:	431a      	orrs	r2, r3
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025a0:	085b      	lsrs	r3, r3, #1
 80025a2:	3b01      	subs	r3, #1
 80025a4:	041b      	lsls	r3, r3, #16
 80025a6:	431a      	orrs	r2, r3
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025ac:	061b      	lsls	r3, r3, #24
 80025ae:	431a      	orrs	r2, r3
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025b4:	071b      	lsls	r3, r3, #28
 80025b6:	491b      	ldr	r1, [pc, #108]	; (8002624 <HAL_RCC_OscConfig+0x4d0>)
 80025b8:	4313      	orrs	r3, r2
 80025ba:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80025bc:	4b19      	ldr	r3, [pc, #100]	; (8002624 <HAL_RCC_OscConfig+0x4d0>)
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	4a18      	ldr	r2, [pc, #96]	; (8002624 <HAL_RCC_OscConfig+0x4d0>)
 80025c2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80025c6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025c8:	f7fe fdee 	bl	80011a8 <HAL_GetTick>
 80025cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025ce:	e008      	b.n	80025e2 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025d0:	f7fe fdea 	bl	80011a8 <HAL_GetTick>
 80025d4:	4602      	mov	r2, r0
 80025d6:	693b      	ldr	r3, [r7, #16]
 80025d8:	1ad3      	subs	r3, r2, r3
 80025da:	2b02      	cmp	r3, #2
 80025dc:	d901      	bls.n	80025e2 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80025de:	2303      	movs	r3, #3
 80025e0:	e05f      	b.n	80026a2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025e2:	4b10      	ldr	r3, [pc, #64]	; (8002624 <HAL_RCC_OscConfig+0x4d0>)
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d0f0      	beq.n	80025d0 <HAL_RCC_OscConfig+0x47c>
 80025ee:	e057      	b.n	80026a0 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025f0:	4b0c      	ldr	r3, [pc, #48]	; (8002624 <HAL_RCC_OscConfig+0x4d0>)
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	4a0b      	ldr	r2, [pc, #44]	; (8002624 <HAL_RCC_OscConfig+0x4d0>)
 80025f6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80025fa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025fc:	f7fe fdd4 	bl	80011a8 <HAL_GetTick>
 8002600:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002602:	e008      	b.n	8002616 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002604:	f7fe fdd0 	bl	80011a8 <HAL_GetTick>
 8002608:	4602      	mov	r2, r0
 800260a:	693b      	ldr	r3, [r7, #16]
 800260c:	1ad3      	subs	r3, r2, r3
 800260e:	2b02      	cmp	r3, #2
 8002610:	d901      	bls.n	8002616 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8002612:	2303      	movs	r3, #3
 8002614:	e045      	b.n	80026a2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002616:	4b03      	ldr	r3, [pc, #12]	; (8002624 <HAL_RCC_OscConfig+0x4d0>)
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800261e:	2b00      	cmp	r3, #0
 8002620:	d1f0      	bne.n	8002604 <HAL_RCC_OscConfig+0x4b0>
 8002622:	e03d      	b.n	80026a0 <HAL_RCC_OscConfig+0x54c>
 8002624:	40023800 	.word	0x40023800
 8002628:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800262c:	4b1f      	ldr	r3, [pc, #124]	; (80026ac <HAL_RCC_OscConfig+0x558>)
 800262e:	685b      	ldr	r3, [r3, #4]
 8002630:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	699b      	ldr	r3, [r3, #24]
 8002636:	2b01      	cmp	r3, #1
 8002638:	d030      	beq.n	800269c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002644:	429a      	cmp	r2, r3
 8002646:	d129      	bne.n	800269c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002652:	429a      	cmp	r2, r3
 8002654:	d122      	bne.n	800269c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002656:	68fa      	ldr	r2, [r7, #12]
 8002658:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800265c:	4013      	ands	r3, r2
 800265e:	687a      	ldr	r2, [r7, #4]
 8002660:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002662:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002664:	4293      	cmp	r3, r2
 8002666:	d119      	bne.n	800269c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002672:	085b      	lsrs	r3, r3, #1
 8002674:	3b01      	subs	r3, #1
 8002676:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002678:	429a      	cmp	r2, r3
 800267a:	d10f      	bne.n	800269c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002686:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002688:	429a      	cmp	r2, r3
 800268a:	d107      	bne.n	800269c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002696:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002698:	429a      	cmp	r2, r3
 800269a:	d001      	beq.n	80026a0 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 800269c:	2301      	movs	r3, #1
 800269e:	e000      	b.n	80026a2 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 80026a0:	2300      	movs	r3, #0
}
 80026a2:	4618      	mov	r0, r3
 80026a4:	3718      	adds	r7, #24
 80026a6:	46bd      	mov	sp, r7
 80026a8:	bd80      	pop	{r7, pc}
 80026aa:	bf00      	nop
 80026ac:	40023800 	.word	0x40023800

080026b0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b084      	sub	sp, #16
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
 80026b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80026ba:	2300      	movs	r3, #0
 80026bc:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d101      	bne.n	80026c8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80026c4:	2301      	movs	r3, #1
 80026c6:	e0d0      	b.n	800286a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80026c8:	4b6a      	ldr	r3, [pc, #424]	; (8002874 <HAL_RCC_ClockConfig+0x1c4>)
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f003 030f 	and.w	r3, r3, #15
 80026d0:	683a      	ldr	r2, [r7, #0]
 80026d2:	429a      	cmp	r2, r3
 80026d4:	d910      	bls.n	80026f8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026d6:	4b67      	ldr	r3, [pc, #412]	; (8002874 <HAL_RCC_ClockConfig+0x1c4>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f023 020f 	bic.w	r2, r3, #15
 80026de:	4965      	ldr	r1, [pc, #404]	; (8002874 <HAL_RCC_ClockConfig+0x1c4>)
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	4313      	orrs	r3, r2
 80026e4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80026e6:	4b63      	ldr	r3, [pc, #396]	; (8002874 <HAL_RCC_ClockConfig+0x1c4>)
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f003 030f 	and.w	r3, r3, #15
 80026ee:	683a      	ldr	r2, [r7, #0]
 80026f0:	429a      	cmp	r2, r3
 80026f2:	d001      	beq.n	80026f8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80026f4:	2301      	movs	r3, #1
 80026f6:	e0b8      	b.n	800286a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f003 0302 	and.w	r3, r3, #2
 8002700:	2b00      	cmp	r3, #0
 8002702:	d020      	beq.n	8002746 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f003 0304 	and.w	r3, r3, #4
 800270c:	2b00      	cmp	r3, #0
 800270e:	d005      	beq.n	800271c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002710:	4b59      	ldr	r3, [pc, #356]	; (8002878 <HAL_RCC_ClockConfig+0x1c8>)
 8002712:	689b      	ldr	r3, [r3, #8]
 8002714:	4a58      	ldr	r2, [pc, #352]	; (8002878 <HAL_RCC_ClockConfig+0x1c8>)
 8002716:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800271a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f003 0308 	and.w	r3, r3, #8
 8002724:	2b00      	cmp	r3, #0
 8002726:	d005      	beq.n	8002734 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002728:	4b53      	ldr	r3, [pc, #332]	; (8002878 <HAL_RCC_ClockConfig+0x1c8>)
 800272a:	689b      	ldr	r3, [r3, #8]
 800272c:	4a52      	ldr	r2, [pc, #328]	; (8002878 <HAL_RCC_ClockConfig+0x1c8>)
 800272e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002732:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002734:	4b50      	ldr	r3, [pc, #320]	; (8002878 <HAL_RCC_ClockConfig+0x1c8>)
 8002736:	689b      	ldr	r3, [r3, #8]
 8002738:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	689b      	ldr	r3, [r3, #8]
 8002740:	494d      	ldr	r1, [pc, #308]	; (8002878 <HAL_RCC_ClockConfig+0x1c8>)
 8002742:	4313      	orrs	r3, r2
 8002744:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f003 0301 	and.w	r3, r3, #1
 800274e:	2b00      	cmp	r3, #0
 8002750:	d040      	beq.n	80027d4 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	685b      	ldr	r3, [r3, #4]
 8002756:	2b01      	cmp	r3, #1
 8002758:	d107      	bne.n	800276a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800275a:	4b47      	ldr	r3, [pc, #284]	; (8002878 <HAL_RCC_ClockConfig+0x1c8>)
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002762:	2b00      	cmp	r3, #0
 8002764:	d115      	bne.n	8002792 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002766:	2301      	movs	r3, #1
 8002768:	e07f      	b.n	800286a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	685b      	ldr	r3, [r3, #4]
 800276e:	2b02      	cmp	r3, #2
 8002770:	d107      	bne.n	8002782 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002772:	4b41      	ldr	r3, [pc, #260]	; (8002878 <HAL_RCC_ClockConfig+0x1c8>)
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800277a:	2b00      	cmp	r3, #0
 800277c:	d109      	bne.n	8002792 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800277e:	2301      	movs	r3, #1
 8002780:	e073      	b.n	800286a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002782:	4b3d      	ldr	r3, [pc, #244]	; (8002878 <HAL_RCC_ClockConfig+0x1c8>)
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f003 0302 	and.w	r3, r3, #2
 800278a:	2b00      	cmp	r3, #0
 800278c:	d101      	bne.n	8002792 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800278e:	2301      	movs	r3, #1
 8002790:	e06b      	b.n	800286a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002792:	4b39      	ldr	r3, [pc, #228]	; (8002878 <HAL_RCC_ClockConfig+0x1c8>)
 8002794:	689b      	ldr	r3, [r3, #8]
 8002796:	f023 0203 	bic.w	r2, r3, #3
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	685b      	ldr	r3, [r3, #4]
 800279e:	4936      	ldr	r1, [pc, #216]	; (8002878 <HAL_RCC_ClockConfig+0x1c8>)
 80027a0:	4313      	orrs	r3, r2
 80027a2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80027a4:	f7fe fd00 	bl	80011a8 <HAL_GetTick>
 80027a8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027aa:	e00a      	b.n	80027c2 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027ac:	f7fe fcfc 	bl	80011a8 <HAL_GetTick>
 80027b0:	4602      	mov	r2, r0
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	1ad3      	subs	r3, r2, r3
 80027b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80027ba:	4293      	cmp	r3, r2
 80027bc:	d901      	bls.n	80027c2 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80027be:	2303      	movs	r3, #3
 80027c0:	e053      	b.n	800286a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027c2:	4b2d      	ldr	r3, [pc, #180]	; (8002878 <HAL_RCC_ClockConfig+0x1c8>)
 80027c4:	689b      	ldr	r3, [r3, #8]
 80027c6:	f003 020c 	and.w	r2, r3, #12
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	685b      	ldr	r3, [r3, #4]
 80027ce:	009b      	lsls	r3, r3, #2
 80027d0:	429a      	cmp	r2, r3
 80027d2:	d1eb      	bne.n	80027ac <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80027d4:	4b27      	ldr	r3, [pc, #156]	; (8002874 <HAL_RCC_ClockConfig+0x1c4>)
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f003 030f 	and.w	r3, r3, #15
 80027dc:	683a      	ldr	r2, [r7, #0]
 80027de:	429a      	cmp	r2, r3
 80027e0:	d210      	bcs.n	8002804 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027e2:	4b24      	ldr	r3, [pc, #144]	; (8002874 <HAL_RCC_ClockConfig+0x1c4>)
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f023 020f 	bic.w	r2, r3, #15
 80027ea:	4922      	ldr	r1, [pc, #136]	; (8002874 <HAL_RCC_ClockConfig+0x1c4>)
 80027ec:	683b      	ldr	r3, [r7, #0]
 80027ee:	4313      	orrs	r3, r2
 80027f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80027f2:	4b20      	ldr	r3, [pc, #128]	; (8002874 <HAL_RCC_ClockConfig+0x1c4>)
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f003 030f 	and.w	r3, r3, #15
 80027fa:	683a      	ldr	r2, [r7, #0]
 80027fc:	429a      	cmp	r2, r3
 80027fe:	d001      	beq.n	8002804 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002800:	2301      	movs	r3, #1
 8002802:	e032      	b.n	800286a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f003 0304 	and.w	r3, r3, #4
 800280c:	2b00      	cmp	r3, #0
 800280e:	d008      	beq.n	8002822 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002810:	4b19      	ldr	r3, [pc, #100]	; (8002878 <HAL_RCC_ClockConfig+0x1c8>)
 8002812:	689b      	ldr	r3, [r3, #8]
 8002814:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	68db      	ldr	r3, [r3, #12]
 800281c:	4916      	ldr	r1, [pc, #88]	; (8002878 <HAL_RCC_ClockConfig+0x1c8>)
 800281e:	4313      	orrs	r3, r2
 8002820:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f003 0308 	and.w	r3, r3, #8
 800282a:	2b00      	cmp	r3, #0
 800282c:	d009      	beq.n	8002842 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800282e:	4b12      	ldr	r3, [pc, #72]	; (8002878 <HAL_RCC_ClockConfig+0x1c8>)
 8002830:	689b      	ldr	r3, [r3, #8]
 8002832:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	691b      	ldr	r3, [r3, #16]
 800283a:	00db      	lsls	r3, r3, #3
 800283c:	490e      	ldr	r1, [pc, #56]	; (8002878 <HAL_RCC_ClockConfig+0x1c8>)
 800283e:	4313      	orrs	r3, r2
 8002840:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002842:	f000 f821 	bl	8002888 <HAL_RCC_GetSysClockFreq>
 8002846:	4602      	mov	r2, r0
 8002848:	4b0b      	ldr	r3, [pc, #44]	; (8002878 <HAL_RCC_ClockConfig+0x1c8>)
 800284a:	689b      	ldr	r3, [r3, #8]
 800284c:	091b      	lsrs	r3, r3, #4
 800284e:	f003 030f 	and.w	r3, r3, #15
 8002852:	490a      	ldr	r1, [pc, #40]	; (800287c <HAL_RCC_ClockConfig+0x1cc>)
 8002854:	5ccb      	ldrb	r3, [r1, r3]
 8002856:	fa22 f303 	lsr.w	r3, r2, r3
 800285a:	4a09      	ldr	r2, [pc, #36]	; (8002880 <HAL_RCC_ClockConfig+0x1d0>)
 800285c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800285e:	4b09      	ldr	r3, [pc, #36]	; (8002884 <HAL_RCC_ClockConfig+0x1d4>)
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	4618      	mov	r0, r3
 8002864:	f7fe fc5c 	bl	8001120 <HAL_InitTick>

  return HAL_OK;
 8002868:	2300      	movs	r3, #0
}
 800286a:	4618      	mov	r0, r3
 800286c:	3710      	adds	r7, #16
 800286e:	46bd      	mov	sp, r7
 8002870:	bd80      	pop	{r7, pc}
 8002872:	bf00      	nop
 8002874:	40023c00 	.word	0x40023c00
 8002878:	40023800 	.word	0x40023800
 800287c:	08005620 	.word	0x08005620
 8002880:	20000000 	.word	0x20000000
 8002884:	20000004 	.word	0x20000004

08002888 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002888:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800288c:	b094      	sub	sp, #80	; 0x50
 800288e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002890:	2300      	movs	r3, #0
 8002892:	647b      	str	r3, [r7, #68]	; 0x44
 8002894:	2300      	movs	r3, #0
 8002896:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002898:	2300      	movs	r3, #0
 800289a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 800289c:	2300      	movs	r3, #0
 800289e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80028a0:	4b79      	ldr	r3, [pc, #484]	; (8002a88 <HAL_RCC_GetSysClockFreq+0x200>)
 80028a2:	689b      	ldr	r3, [r3, #8]
 80028a4:	f003 030c 	and.w	r3, r3, #12
 80028a8:	2b08      	cmp	r3, #8
 80028aa:	d00d      	beq.n	80028c8 <HAL_RCC_GetSysClockFreq+0x40>
 80028ac:	2b08      	cmp	r3, #8
 80028ae:	f200 80e1 	bhi.w	8002a74 <HAL_RCC_GetSysClockFreq+0x1ec>
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d002      	beq.n	80028bc <HAL_RCC_GetSysClockFreq+0x34>
 80028b6:	2b04      	cmp	r3, #4
 80028b8:	d003      	beq.n	80028c2 <HAL_RCC_GetSysClockFreq+0x3a>
 80028ba:	e0db      	b.n	8002a74 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80028bc:	4b73      	ldr	r3, [pc, #460]	; (8002a8c <HAL_RCC_GetSysClockFreq+0x204>)
 80028be:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80028c0:	e0db      	b.n	8002a7a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80028c2:	4b73      	ldr	r3, [pc, #460]	; (8002a90 <HAL_RCC_GetSysClockFreq+0x208>)
 80028c4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80028c6:	e0d8      	b.n	8002a7a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80028c8:	4b6f      	ldr	r3, [pc, #444]	; (8002a88 <HAL_RCC_GetSysClockFreq+0x200>)
 80028ca:	685b      	ldr	r3, [r3, #4]
 80028cc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80028d0:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80028d2:	4b6d      	ldr	r3, [pc, #436]	; (8002a88 <HAL_RCC_GetSysClockFreq+0x200>)
 80028d4:	685b      	ldr	r3, [r3, #4]
 80028d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d063      	beq.n	80029a6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80028de:	4b6a      	ldr	r3, [pc, #424]	; (8002a88 <HAL_RCC_GetSysClockFreq+0x200>)
 80028e0:	685b      	ldr	r3, [r3, #4]
 80028e2:	099b      	lsrs	r3, r3, #6
 80028e4:	2200      	movs	r2, #0
 80028e6:	63bb      	str	r3, [r7, #56]	; 0x38
 80028e8:	63fa      	str	r2, [r7, #60]	; 0x3c
 80028ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80028f0:	633b      	str	r3, [r7, #48]	; 0x30
 80028f2:	2300      	movs	r3, #0
 80028f4:	637b      	str	r3, [r7, #52]	; 0x34
 80028f6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80028fa:	4622      	mov	r2, r4
 80028fc:	462b      	mov	r3, r5
 80028fe:	f04f 0000 	mov.w	r0, #0
 8002902:	f04f 0100 	mov.w	r1, #0
 8002906:	0159      	lsls	r1, r3, #5
 8002908:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800290c:	0150      	lsls	r0, r2, #5
 800290e:	4602      	mov	r2, r0
 8002910:	460b      	mov	r3, r1
 8002912:	4621      	mov	r1, r4
 8002914:	1a51      	subs	r1, r2, r1
 8002916:	6139      	str	r1, [r7, #16]
 8002918:	4629      	mov	r1, r5
 800291a:	eb63 0301 	sbc.w	r3, r3, r1
 800291e:	617b      	str	r3, [r7, #20]
 8002920:	f04f 0200 	mov.w	r2, #0
 8002924:	f04f 0300 	mov.w	r3, #0
 8002928:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800292c:	4659      	mov	r1, fp
 800292e:	018b      	lsls	r3, r1, #6
 8002930:	4651      	mov	r1, sl
 8002932:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002936:	4651      	mov	r1, sl
 8002938:	018a      	lsls	r2, r1, #6
 800293a:	4651      	mov	r1, sl
 800293c:	ebb2 0801 	subs.w	r8, r2, r1
 8002940:	4659      	mov	r1, fp
 8002942:	eb63 0901 	sbc.w	r9, r3, r1
 8002946:	f04f 0200 	mov.w	r2, #0
 800294a:	f04f 0300 	mov.w	r3, #0
 800294e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002952:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002956:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800295a:	4690      	mov	r8, r2
 800295c:	4699      	mov	r9, r3
 800295e:	4623      	mov	r3, r4
 8002960:	eb18 0303 	adds.w	r3, r8, r3
 8002964:	60bb      	str	r3, [r7, #8]
 8002966:	462b      	mov	r3, r5
 8002968:	eb49 0303 	adc.w	r3, r9, r3
 800296c:	60fb      	str	r3, [r7, #12]
 800296e:	f04f 0200 	mov.w	r2, #0
 8002972:	f04f 0300 	mov.w	r3, #0
 8002976:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800297a:	4629      	mov	r1, r5
 800297c:	024b      	lsls	r3, r1, #9
 800297e:	4621      	mov	r1, r4
 8002980:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002984:	4621      	mov	r1, r4
 8002986:	024a      	lsls	r2, r1, #9
 8002988:	4610      	mov	r0, r2
 800298a:	4619      	mov	r1, r3
 800298c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800298e:	2200      	movs	r2, #0
 8002990:	62bb      	str	r3, [r7, #40]	; 0x28
 8002992:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002994:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002998:	f7fd fcaa 	bl	80002f0 <__aeabi_uldivmod>
 800299c:	4602      	mov	r2, r0
 800299e:	460b      	mov	r3, r1
 80029a0:	4613      	mov	r3, r2
 80029a2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80029a4:	e058      	b.n	8002a58 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80029a6:	4b38      	ldr	r3, [pc, #224]	; (8002a88 <HAL_RCC_GetSysClockFreq+0x200>)
 80029a8:	685b      	ldr	r3, [r3, #4]
 80029aa:	099b      	lsrs	r3, r3, #6
 80029ac:	2200      	movs	r2, #0
 80029ae:	4618      	mov	r0, r3
 80029b0:	4611      	mov	r1, r2
 80029b2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80029b6:	623b      	str	r3, [r7, #32]
 80029b8:	2300      	movs	r3, #0
 80029ba:	627b      	str	r3, [r7, #36]	; 0x24
 80029bc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80029c0:	4642      	mov	r2, r8
 80029c2:	464b      	mov	r3, r9
 80029c4:	f04f 0000 	mov.w	r0, #0
 80029c8:	f04f 0100 	mov.w	r1, #0
 80029cc:	0159      	lsls	r1, r3, #5
 80029ce:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80029d2:	0150      	lsls	r0, r2, #5
 80029d4:	4602      	mov	r2, r0
 80029d6:	460b      	mov	r3, r1
 80029d8:	4641      	mov	r1, r8
 80029da:	ebb2 0a01 	subs.w	sl, r2, r1
 80029de:	4649      	mov	r1, r9
 80029e0:	eb63 0b01 	sbc.w	fp, r3, r1
 80029e4:	f04f 0200 	mov.w	r2, #0
 80029e8:	f04f 0300 	mov.w	r3, #0
 80029ec:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80029f0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80029f4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80029f8:	ebb2 040a 	subs.w	r4, r2, sl
 80029fc:	eb63 050b 	sbc.w	r5, r3, fp
 8002a00:	f04f 0200 	mov.w	r2, #0
 8002a04:	f04f 0300 	mov.w	r3, #0
 8002a08:	00eb      	lsls	r3, r5, #3
 8002a0a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002a0e:	00e2      	lsls	r2, r4, #3
 8002a10:	4614      	mov	r4, r2
 8002a12:	461d      	mov	r5, r3
 8002a14:	4643      	mov	r3, r8
 8002a16:	18e3      	adds	r3, r4, r3
 8002a18:	603b      	str	r3, [r7, #0]
 8002a1a:	464b      	mov	r3, r9
 8002a1c:	eb45 0303 	adc.w	r3, r5, r3
 8002a20:	607b      	str	r3, [r7, #4]
 8002a22:	f04f 0200 	mov.w	r2, #0
 8002a26:	f04f 0300 	mov.w	r3, #0
 8002a2a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002a2e:	4629      	mov	r1, r5
 8002a30:	028b      	lsls	r3, r1, #10
 8002a32:	4621      	mov	r1, r4
 8002a34:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002a38:	4621      	mov	r1, r4
 8002a3a:	028a      	lsls	r2, r1, #10
 8002a3c:	4610      	mov	r0, r2
 8002a3e:	4619      	mov	r1, r3
 8002a40:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002a42:	2200      	movs	r2, #0
 8002a44:	61bb      	str	r3, [r7, #24]
 8002a46:	61fa      	str	r2, [r7, #28]
 8002a48:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002a4c:	f7fd fc50 	bl	80002f0 <__aeabi_uldivmod>
 8002a50:	4602      	mov	r2, r0
 8002a52:	460b      	mov	r3, r1
 8002a54:	4613      	mov	r3, r2
 8002a56:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002a58:	4b0b      	ldr	r3, [pc, #44]	; (8002a88 <HAL_RCC_GetSysClockFreq+0x200>)
 8002a5a:	685b      	ldr	r3, [r3, #4]
 8002a5c:	0c1b      	lsrs	r3, r3, #16
 8002a5e:	f003 0303 	and.w	r3, r3, #3
 8002a62:	3301      	adds	r3, #1
 8002a64:	005b      	lsls	r3, r3, #1
 8002a66:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8002a68:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002a6a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002a6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a70:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002a72:	e002      	b.n	8002a7a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002a74:	4b05      	ldr	r3, [pc, #20]	; (8002a8c <HAL_RCC_GetSysClockFreq+0x204>)
 8002a76:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002a78:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002a7a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002a7c:	4618      	mov	r0, r3
 8002a7e:	3750      	adds	r7, #80	; 0x50
 8002a80:	46bd      	mov	sp, r7
 8002a82:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002a86:	bf00      	nop
 8002a88:	40023800 	.word	0x40023800
 8002a8c:	00f42400 	.word	0x00f42400
 8002a90:	007a1200 	.word	0x007a1200

08002a94 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002a94:	b480      	push	{r7}
 8002a96:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002a98:	4b03      	ldr	r3, [pc, #12]	; (8002aa8 <HAL_RCC_GetHCLKFreq+0x14>)
 8002a9a:	681b      	ldr	r3, [r3, #0]
}
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa4:	4770      	bx	lr
 8002aa6:	bf00      	nop
 8002aa8:	20000000 	.word	0x20000000

08002aac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002ab0:	f7ff fff0 	bl	8002a94 <HAL_RCC_GetHCLKFreq>
 8002ab4:	4602      	mov	r2, r0
 8002ab6:	4b05      	ldr	r3, [pc, #20]	; (8002acc <HAL_RCC_GetPCLK1Freq+0x20>)
 8002ab8:	689b      	ldr	r3, [r3, #8]
 8002aba:	0a9b      	lsrs	r3, r3, #10
 8002abc:	f003 0307 	and.w	r3, r3, #7
 8002ac0:	4903      	ldr	r1, [pc, #12]	; (8002ad0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002ac2:	5ccb      	ldrb	r3, [r1, r3]
 8002ac4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ac8:	4618      	mov	r0, r3
 8002aca:	bd80      	pop	{r7, pc}
 8002acc:	40023800 	.word	0x40023800
 8002ad0:	08005630 	.word	0x08005630

08002ad4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002ad8:	f7ff ffdc 	bl	8002a94 <HAL_RCC_GetHCLKFreq>
 8002adc:	4602      	mov	r2, r0
 8002ade:	4b05      	ldr	r3, [pc, #20]	; (8002af4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002ae0:	689b      	ldr	r3, [r3, #8]
 8002ae2:	0b5b      	lsrs	r3, r3, #13
 8002ae4:	f003 0307 	and.w	r3, r3, #7
 8002ae8:	4903      	ldr	r1, [pc, #12]	; (8002af8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002aea:	5ccb      	ldrb	r3, [r1, r3]
 8002aec:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002af0:	4618      	mov	r0, r3
 8002af2:	bd80      	pop	{r7, pc}
 8002af4:	40023800 	.word	0x40023800
 8002af8:	08005630 	.word	0x08005630

08002afc <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	b088      	sub	sp, #32
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002b04:	2300      	movs	r3, #0
 8002b06:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002b08:	2300      	movs	r3, #0
 8002b0a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002b0c:	2300      	movs	r3, #0
 8002b0e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002b10:	2300      	movs	r3, #0
 8002b12:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002b14:	2300      	movs	r3, #0
 8002b16:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f003 0301 	and.w	r3, r3, #1
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d012      	beq.n	8002b4a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002b24:	4b69      	ldr	r3, [pc, #420]	; (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b26:	689b      	ldr	r3, [r3, #8]
 8002b28:	4a68      	ldr	r2, [pc, #416]	; (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b2a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002b2e:	6093      	str	r3, [r2, #8]
 8002b30:	4b66      	ldr	r3, [pc, #408]	; (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b32:	689a      	ldr	r2, [r3, #8]
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b38:	4964      	ldr	r1, [pc, #400]	; (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b3a:	4313      	orrs	r3, r2
 8002b3c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d101      	bne.n	8002b4a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8002b46:	2301      	movs	r3, #1
 8002b48:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d017      	beq.n	8002b86 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002b56:	4b5d      	ldr	r3, [pc, #372]	; (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b58:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002b5c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b64:	4959      	ldr	r1, [pc, #356]	; (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b66:	4313      	orrs	r3, r2
 8002b68:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b70:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002b74:	d101      	bne.n	8002b7a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8002b76:	2301      	movs	r3, #1
 8002b78:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d101      	bne.n	8002b86 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8002b82:	2301      	movs	r3, #1
 8002b84:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d017      	beq.n	8002bc2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002b92:	4b4e      	ldr	r3, [pc, #312]	; (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b94:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002b98:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ba0:	494a      	ldr	r1, [pc, #296]	; (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ba2:	4313      	orrs	r3, r2
 8002ba4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bac:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002bb0:	d101      	bne.n	8002bb6 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8002bb2:	2301      	movs	r3, #1
 8002bb4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d101      	bne.n	8002bc2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8002bbe:	2301      	movs	r3, #1
 8002bc0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d001      	beq.n	8002bd2 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8002bce:	2301      	movs	r3, #1
 8002bd0:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f003 0320 	and.w	r3, r3, #32
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	f000 808b 	beq.w	8002cf6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002be0:	4b3a      	ldr	r3, [pc, #232]	; (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002be2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002be4:	4a39      	ldr	r2, [pc, #228]	; (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002be6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002bea:	6413      	str	r3, [r2, #64]	; 0x40
 8002bec:	4b37      	ldr	r3, [pc, #220]	; (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002bee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bf0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bf4:	60bb      	str	r3, [r7, #8]
 8002bf6:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002bf8:	4b35      	ldr	r3, [pc, #212]	; (8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	4a34      	ldr	r2, [pc, #208]	; (8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002bfe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c02:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002c04:	f7fe fad0 	bl	80011a8 <HAL_GetTick>
 8002c08:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002c0a:	e008      	b.n	8002c1e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c0c:	f7fe facc 	bl	80011a8 <HAL_GetTick>
 8002c10:	4602      	mov	r2, r0
 8002c12:	697b      	ldr	r3, [r7, #20]
 8002c14:	1ad3      	subs	r3, r2, r3
 8002c16:	2b64      	cmp	r3, #100	; 0x64
 8002c18:	d901      	bls.n	8002c1e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8002c1a:	2303      	movs	r3, #3
 8002c1c:	e38f      	b.n	800333e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002c1e:	4b2c      	ldr	r3, [pc, #176]	; (8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d0f0      	beq.n	8002c0c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002c2a:	4b28      	ldr	r3, [pc, #160]	; (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c2e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c32:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002c34:	693b      	ldr	r3, [r7, #16]
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d035      	beq.n	8002ca6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c3e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c42:	693a      	ldr	r2, [r7, #16]
 8002c44:	429a      	cmp	r2, r3
 8002c46:	d02e      	beq.n	8002ca6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002c48:	4b20      	ldr	r3, [pc, #128]	; (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c4c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c50:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002c52:	4b1e      	ldr	r3, [pc, #120]	; (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c56:	4a1d      	ldr	r2, [pc, #116]	; (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c5c:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002c5e:	4b1b      	ldr	r3, [pc, #108]	; (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c62:	4a1a      	ldr	r2, [pc, #104]	; (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c64:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c68:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8002c6a:	4a18      	ldr	r2, [pc, #96]	; (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c6c:	693b      	ldr	r3, [r7, #16]
 8002c6e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002c70:	4b16      	ldr	r3, [pc, #88]	; (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c74:	f003 0301 	and.w	r3, r3, #1
 8002c78:	2b01      	cmp	r3, #1
 8002c7a:	d114      	bne.n	8002ca6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c7c:	f7fe fa94 	bl	80011a8 <HAL_GetTick>
 8002c80:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c82:	e00a      	b.n	8002c9a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c84:	f7fe fa90 	bl	80011a8 <HAL_GetTick>
 8002c88:	4602      	mov	r2, r0
 8002c8a:	697b      	ldr	r3, [r7, #20]
 8002c8c:	1ad3      	subs	r3, r2, r3
 8002c8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c92:	4293      	cmp	r3, r2
 8002c94:	d901      	bls.n	8002c9a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002c96:	2303      	movs	r3, #3
 8002c98:	e351      	b.n	800333e <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c9a:	4b0c      	ldr	r3, [pc, #48]	; (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c9e:	f003 0302 	and.w	r3, r3, #2
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d0ee      	beq.n	8002c84 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002caa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002cae:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002cb2:	d111      	bne.n	8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002cb4:	4b05      	ldr	r3, [pc, #20]	; (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002cb6:	689b      	ldr	r3, [r3, #8]
 8002cb8:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002cc0:	4b04      	ldr	r3, [pc, #16]	; (8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002cc2:	400b      	ands	r3, r1
 8002cc4:	4901      	ldr	r1, [pc, #4]	; (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002cc6:	4313      	orrs	r3, r2
 8002cc8:	608b      	str	r3, [r1, #8]
 8002cca:	e00b      	b.n	8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002ccc:	40023800 	.word	0x40023800
 8002cd0:	40007000 	.word	0x40007000
 8002cd4:	0ffffcff 	.word	0x0ffffcff
 8002cd8:	4bac      	ldr	r3, [pc, #688]	; (8002f8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002cda:	689b      	ldr	r3, [r3, #8]
 8002cdc:	4aab      	ldr	r2, [pc, #684]	; (8002f8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002cde:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002ce2:	6093      	str	r3, [r2, #8]
 8002ce4:	4ba9      	ldr	r3, [pc, #676]	; (8002f8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ce6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002cf0:	49a6      	ldr	r1, [pc, #664]	; (8002f8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002cf2:	4313      	orrs	r3, r2
 8002cf4:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f003 0310 	and.w	r3, r3, #16
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d010      	beq.n	8002d24 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002d02:	4ba2      	ldr	r3, [pc, #648]	; (8002f8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d04:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002d08:	4aa0      	ldr	r2, [pc, #640]	; (8002f8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d0a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002d0e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002d12:	4b9e      	ldr	r3, [pc, #632]	; (8002f8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d14:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d1c:	499b      	ldr	r1, [pc, #620]	; (8002f8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d1e:	4313      	orrs	r3, r2
 8002d20:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d00a      	beq.n	8002d46 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002d30:	4b96      	ldr	r3, [pc, #600]	; (8002f8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d36:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002d3e:	4993      	ldr	r1, [pc, #588]	; (8002f8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d40:	4313      	orrs	r3, r2
 8002d42:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d00a      	beq.n	8002d68 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002d52:	4b8e      	ldr	r3, [pc, #568]	; (8002f8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d58:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002d60:	498a      	ldr	r1, [pc, #552]	; (8002f8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d62:	4313      	orrs	r3, r2
 8002d64:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d00a      	beq.n	8002d8a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002d74:	4b85      	ldr	r3, [pc, #532]	; (8002f8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d7a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002d82:	4982      	ldr	r1, [pc, #520]	; (8002f8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d84:	4313      	orrs	r3, r2
 8002d86:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d00a      	beq.n	8002dac <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002d96:	4b7d      	ldr	r3, [pc, #500]	; (8002f8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d9c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002da4:	4979      	ldr	r1, [pc, #484]	; (8002f8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002da6:	4313      	orrs	r3, r2
 8002da8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d00a      	beq.n	8002dce <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002db8:	4b74      	ldr	r3, [pc, #464]	; (8002f8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002dba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002dbe:	f023 0203 	bic.w	r2, r3, #3
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dc6:	4971      	ldr	r1, [pc, #452]	; (8002f8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002dc8:	4313      	orrs	r3, r2
 8002dca:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d00a      	beq.n	8002df0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002dda:	4b6c      	ldr	r3, [pc, #432]	; (8002f8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ddc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002de0:	f023 020c 	bic.w	r2, r3, #12
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002de8:	4968      	ldr	r1, [pc, #416]	; (8002f8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002dea:	4313      	orrs	r3, r2
 8002dec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d00a      	beq.n	8002e12 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002dfc:	4b63      	ldr	r3, [pc, #396]	; (8002f8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002dfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e02:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e0a:	4960      	ldr	r1, [pc, #384]	; (8002f8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e0c:	4313      	orrs	r3, r2
 8002e0e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d00a      	beq.n	8002e34 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002e1e:	4b5b      	ldr	r3, [pc, #364]	; (8002f8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e24:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e2c:	4957      	ldr	r1, [pc, #348]	; (8002f8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e2e:	4313      	orrs	r3, r2
 8002e30:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d00a      	beq.n	8002e56 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002e40:	4b52      	ldr	r3, [pc, #328]	; (8002f8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e46:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e4e:	494f      	ldr	r1, [pc, #316]	; (8002f8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e50:	4313      	orrs	r3, r2
 8002e52:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d00a      	beq.n	8002e78 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8002e62:	4b4a      	ldr	r3, [pc, #296]	; (8002f8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e68:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e70:	4946      	ldr	r1, [pc, #280]	; (8002f8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e72:	4313      	orrs	r3, r2
 8002e74:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d00a      	beq.n	8002e9a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002e84:	4b41      	ldr	r3, [pc, #260]	; (8002f8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e8a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e92:	493e      	ldr	r1, [pc, #248]	; (8002f8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e94:	4313      	orrs	r3, r2
 8002e96:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d00a      	beq.n	8002ebc <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002ea6:	4b39      	ldr	r3, [pc, #228]	; (8002f8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ea8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002eac:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002eb4:	4935      	ldr	r1, [pc, #212]	; (8002f8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002eb6:	4313      	orrs	r3, r2
 8002eb8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d00a      	beq.n	8002ede <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002ec8:	4b30      	ldr	r3, [pc, #192]	; (8002f8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002eca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ece:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002ed6:	492d      	ldr	r1, [pc, #180]	; (8002f8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ed8:	4313      	orrs	r3, r2
 8002eda:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d011      	beq.n	8002f0e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002eea:	4b28      	ldr	r3, [pc, #160]	; (8002f8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002eec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ef0:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002ef8:	4924      	ldr	r1, [pc, #144]	; (8002f8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002efa:	4313      	orrs	r3, r2
 8002efc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002f04:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002f08:	d101      	bne.n	8002f0e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8002f0a:	2301      	movs	r3, #1
 8002f0c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f003 0308 	and.w	r3, r3, #8
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d001      	beq.n	8002f1e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8002f1a:	2301      	movs	r3, #1
 8002f1c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d00a      	beq.n	8002f40 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002f2a:	4b18      	ldr	r3, [pc, #96]	; (8002f8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f30:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f38:	4914      	ldr	r1, [pc, #80]	; (8002f8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f3a:	4313      	orrs	r3, r2
 8002f3c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d00b      	beq.n	8002f64 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002f4c:	4b0f      	ldr	r3, [pc, #60]	; (8002f8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f52:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002f5c:	490b      	ldr	r1, [pc, #44]	; (8002f8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f5e:	4313      	orrs	r3, r2
 8002f60:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d00f      	beq.n	8002f90 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8002f70:	4b06      	ldr	r3, [pc, #24]	; (8002f8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f76:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002f80:	4902      	ldr	r1, [pc, #8]	; (8002f8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f82:	4313      	orrs	r3, r2
 8002f84:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002f88:	e002      	b.n	8002f90 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8002f8a:	bf00      	nop
 8002f8c:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d00b      	beq.n	8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002f9c:	4b8a      	ldr	r3, [pc, #552]	; (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f9e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002fa2:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fac:	4986      	ldr	r1, [pc, #536]	; (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002fae:	4313      	orrs	r3, r2
 8002fb0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d00b      	beq.n	8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8002fc0:	4b81      	ldr	r3, [pc, #516]	; (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002fc2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002fc6:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002fd0:	497d      	ldr	r1, [pc, #500]	; (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002fd2:	4313      	orrs	r3, r2
 8002fd4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002fd8:	69fb      	ldr	r3, [r7, #28]
 8002fda:	2b01      	cmp	r3, #1
 8002fdc:	d006      	beq.n	8002fec <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	f000 80d6 	beq.w	8003198 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002fec:	4b76      	ldr	r3, [pc, #472]	; (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	4a75      	ldr	r2, [pc, #468]	; (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002ff2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002ff6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002ff8:	f7fe f8d6 	bl	80011a8 <HAL_GetTick>
 8002ffc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002ffe:	e008      	b.n	8003012 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003000:	f7fe f8d2 	bl	80011a8 <HAL_GetTick>
 8003004:	4602      	mov	r2, r0
 8003006:	697b      	ldr	r3, [r7, #20]
 8003008:	1ad3      	subs	r3, r2, r3
 800300a:	2b64      	cmp	r3, #100	; 0x64
 800300c:	d901      	bls.n	8003012 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800300e:	2303      	movs	r3, #3
 8003010:	e195      	b.n	800333e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003012:	4b6d      	ldr	r3, [pc, #436]	; (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800301a:	2b00      	cmp	r3, #0
 800301c:	d1f0      	bne.n	8003000 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f003 0301 	and.w	r3, r3, #1
 8003026:	2b00      	cmp	r3, #0
 8003028:	d021      	beq.n	800306e <HAL_RCCEx_PeriphCLKConfig+0x572>
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800302e:	2b00      	cmp	r3, #0
 8003030:	d11d      	bne.n	800306e <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003032:	4b65      	ldr	r3, [pc, #404]	; (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003034:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003038:	0c1b      	lsrs	r3, r3, #16
 800303a:	f003 0303 	and.w	r3, r3, #3
 800303e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003040:	4b61      	ldr	r3, [pc, #388]	; (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003042:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003046:	0e1b      	lsrs	r3, r3, #24
 8003048:	f003 030f 	and.w	r3, r3, #15
 800304c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	685b      	ldr	r3, [r3, #4]
 8003052:	019a      	lsls	r2, r3, #6
 8003054:	693b      	ldr	r3, [r7, #16]
 8003056:	041b      	lsls	r3, r3, #16
 8003058:	431a      	orrs	r2, r3
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	061b      	lsls	r3, r3, #24
 800305e:	431a      	orrs	r2, r3
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	689b      	ldr	r3, [r3, #8]
 8003064:	071b      	lsls	r3, r3, #28
 8003066:	4958      	ldr	r1, [pc, #352]	; (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003068:	4313      	orrs	r3, r2
 800306a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003076:	2b00      	cmp	r3, #0
 8003078:	d004      	beq.n	8003084 <HAL_RCCEx_PeriphCLKConfig+0x588>
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800307e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003082:	d00a      	beq.n	800309a <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800308c:	2b00      	cmp	r3, #0
 800308e:	d02e      	beq.n	80030ee <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003094:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003098:	d129      	bne.n	80030ee <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800309a:	4b4b      	ldr	r3, [pc, #300]	; (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800309c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80030a0:	0c1b      	lsrs	r3, r3, #16
 80030a2:	f003 0303 	and.w	r3, r3, #3
 80030a6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80030a8:	4b47      	ldr	r3, [pc, #284]	; (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80030aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80030ae:	0f1b      	lsrs	r3, r3, #28
 80030b0:	f003 0307 	and.w	r3, r3, #7
 80030b4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	685b      	ldr	r3, [r3, #4]
 80030ba:	019a      	lsls	r2, r3, #6
 80030bc:	693b      	ldr	r3, [r7, #16]
 80030be:	041b      	lsls	r3, r3, #16
 80030c0:	431a      	orrs	r2, r3
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	68db      	ldr	r3, [r3, #12]
 80030c6:	061b      	lsls	r3, r3, #24
 80030c8:	431a      	orrs	r2, r3
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	071b      	lsls	r3, r3, #28
 80030ce:	493e      	ldr	r1, [pc, #248]	; (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80030d0:	4313      	orrs	r3, r2
 80030d2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80030d6:	4b3c      	ldr	r3, [pc, #240]	; (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80030d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80030dc:	f023 021f 	bic.w	r2, r3, #31
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030e4:	3b01      	subs	r3, #1
 80030e6:	4938      	ldr	r1, [pc, #224]	; (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80030e8:	4313      	orrs	r3, r2
 80030ea:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d01d      	beq.n	8003136 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80030fa:	4b33      	ldr	r3, [pc, #204]	; (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80030fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003100:	0e1b      	lsrs	r3, r3, #24
 8003102:	f003 030f 	and.w	r3, r3, #15
 8003106:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003108:	4b2f      	ldr	r3, [pc, #188]	; (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800310a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800310e:	0f1b      	lsrs	r3, r3, #28
 8003110:	f003 0307 	and.w	r3, r3, #7
 8003114:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	685b      	ldr	r3, [r3, #4]
 800311a:	019a      	lsls	r2, r3, #6
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	691b      	ldr	r3, [r3, #16]
 8003120:	041b      	lsls	r3, r3, #16
 8003122:	431a      	orrs	r2, r3
 8003124:	693b      	ldr	r3, [r7, #16]
 8003126:	061b      	lsls	r3, r3, #24
 8003128:	431a      	orrs	r2, r3
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	071b      	lsls	r3, r3, #28
 800312e:	4926      	ldr	r1, [pc, #152]	; (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003130:	4313      	orrs	r3, r2
 8003132:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800313e:	2b00      	cmp	r3, #0
 8003140:	d011      	beq.n	8003166 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	685b      	ldr	r3, [r3, #4]
 8003146:	019a      	lsls	r2, r3, #6
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	691b      	ldr	r3, [r3, #16]
 800314c:	041b      	lsls	r3, r3, #16
 800314e:	431a      	orrs	r2, r3
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	68db      	ldr	r3, [r3, #12]
 8003154:	061b      	lsls	r3, r3, #24
 8003156:	431a      	orrs	r2, r3
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	689b      	ldr	r3, [r3, #8]
 800315c:	071b      	lsls	r3, r3, #28
 800315e:	491a      	ldr	r1, [pc, #104]	; (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003160:	4313      	orrs	r3, r2
 8003162:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003166:	4b18      	ldr	r3, [pc, #96]	; (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	4a17      	ldr	r2, [pc, #92]	; (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800316c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003170:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003172:	f7fe f819 	bl	80011a8 <HAL_GetTick>
 8003176:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003178:	e008      	b.n	800318c <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800317a:	f7fe f815 	bl	80011a8 <HAL_GetTick>
 800317e:	4602      	mov	r2, r0
 8003180:	697b      	ldr	r3, [r7, #20]
 8003182:	1ad3      	subs	r3, r2, r3
 8003184:	2b64      	cmp	r3, #100	; 0x64
 8003186:	d901      	bls.n	800318c <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003188:	2303      	movs	r3, #3
 800318a:	e0d8      	b.n	800333e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800318c:	4b0e      	ldr	r3, [pc, #56]	; (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003194:	2b00      	cmp	r3, #0
 8003196:	d0f0      	beq.n	800317a <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003198:	69bb      	ldr	r3, [r7, #24]
 800319a:	2b01      	cmp	r3, #1
 800319c:	f040 80ce 	bne.w	800333c <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80031a0:	4b09      	ldr	r3, [pc, #36]	; (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	4a08      	ldr	r2, [pc, #32]	; (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80031a6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80031aa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80031ac:	f7fd fffc 	bl	80011a8 <HAL_GetTick>
 80031b0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80031b2:	e00b      	b.n	80031cc <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80031b4:	f7fd fff8 	bl	80011a8 <HAL_GetTick>
 80031b8:	4602      	mov	r2, r0
 80031ba:	697b      	ldr	r3, [r7, #20]
 80031bc:	1ad3      	subs	r3, r2, r3
 80031be:	2b64      	cmp	r3, #100	; 0x64
 80031c0:	d904      	bls.n	80031cc <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80031c2:	2303      	movs	r3, #3
 80031c4:	e0bb      	b.n	800333e <HAL_RCCEx_PeriphCLKConfig+0x842>
 80031c6:	bf00      	nop
 80031c8:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80031cc:	4b5e      	ldr	r3, [pc, #376]	; (8003348 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80031d4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80031d8:	d0ec      	beq.n	80031b4 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d003      	beq.n	80031ee <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d009      	beq.n	8003202 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d02e      	beq.n	8003258 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d12a      	bne.n	8003258 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003202:	4b51      	ldr	r3, [pc, #324]	; (8003348 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003204:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003208:	0c1b      	lsrs	r3, r3, #16
 800320a:	f003 0303 	and.w	r3, r3, #3
 800320e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003210:	4b4d      	ldr	r3, [pc, #308]	; (8003348 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003212:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003216:	0f1b      	lsrs	r3, r3, #28
 8003218:	f003 0307 	and.w	r3, r3, #7
 800321c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	695b      	ldr	r3, [r3, #20]
 8003222:	019a      	lsls	r2, r3, #6
 8003224:	693b      	ldr	r3, [r7, #16]
 8003226:	041b      	lsls	r3, r3, #16
 8003228:	431a      	orrs	r2, r3
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	699b      	ldr	r3, [r3, #24]
 800322e:	061b      	lsls	r3, r3, #24
 8003230:	431a      	orrs	r2, r3
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	071b      	lsls	r3, r3, #28
 8003236:	4944      	ldr	r1, [pc, #272]	; (8003348 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003238:	4313      	orrs	r3, r2
 800323a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800323e:	4b42      	ldr	r3, [pc, #264]	; (8003348 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003240:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003244:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800324c:	3b01      	subs	r3, #1
 800324e:	021b      	lsls	r3, r3, #8
 8003250:	493d      	ldr	r1, [pc, #244]	; (8003348 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003252:	4313      	orrs	r3, r2
 8003254:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003260:	2b00      	cmp	r3, #0
 8003262:	d022      	beq.n	80032aa <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003268:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800326c:	d11d      	bne.n	80032aa <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800326e:	4b36      	ldr	r3, [pc, #216]	; (8003348 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003270:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003274:	0e1b      	lsrs	r3, r3, #24
 8003276:	f003 030f 	and.w	r3, r3, #15
 800327a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800327c:	4b32      	ldr	r3, [pc, #200]	; (8003348 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800327e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003282:	0f1b      	lsrs	r3, r3, #28
 8003284:	f003 0307 	and.w	r3, r3, #7
 8003288:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	695b      	ldr	r3, [r3, #20]
 800328e:	019a      	lsls	r2, r3, #6
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	6a1b      	ldr	r3, [r3, #32]
 8003294:	041b      	lsls	r3, r3, #16
 8003296:	431a      	orrs	r2, r3
 8003298:	693b      	ldr	r3, [r7, #16]
 800329a:	061b      	lsls	r3, r3, #24
 800329c:	431a      	orrs	r2, r3
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	071b      	lsls	r3, r3, #28
 80032a2:	4929      	ldr	r1, [pc, #164]	; (8003348 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80032a4:	4313      	orrs	r3, r2
 80032a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f003 0308 	and.w	r3, r3, #8
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d028      	beq.n	8003308 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80032b6:	4b24      	ldr	r3, [pc, #144]	; (8003348 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80032b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032bc:	0e1b      	lsrs	r3, r3, #24
 80032be:	f003 030f 	and.w	r3, r3, #15
 80032c2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80032c4:	4b20      	ldr	r3, [pc, #128]	; (8003348 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80032c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032ca:	0c1b      	lsrs	r3, r3, #16
 80032cc:	f003 0303 	and.w	r3, r3, #3
 80032d0:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	695b      	ldr	r3, [r3, #20]
 80032d6:	019a      	lsls	r2, r3, #6
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	041b      	lsls	r3, r3, #16
 80032dc:	431a      	orrs	r2, r3
 80032de:	693b      	ldr	r3, [r7, #16]
 80032e0:	061b      	lsls	r3, r3, #24
 80032e2:	431a      	orrs	r2, r3
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	69db      	ldr	r3, [r3, #28]
 80032e8:	071b      	lsls	r3, r3, #28
 80032ea:	4917      	ldr	r1, [pc, #92]	; (8003348 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80032ec:	4313      	orrs	r3, r2
 80032ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80032f2:	4b15      	ldr	r3, [pc, #84]	; (8003348 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80032f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80032f8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003300:	4911      	ldr	r1, [pc, #68]	; (8003348 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003302:	4313      	orrs	r3, r2
 8003304:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003308:	4b0f      	ldr	r3, [pc, #60]	; (8003348 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	4a0e      	ldr	r2, [pc, #56]	; (8003348 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800330e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003312:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003314:	f7fd ff48 	bl	80011a8 <HAL_GetTick>
 8003318:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800331a:	e008      	b.n	800332e <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800331c:	f7fd ff44 	bl	80011a8 <HAL_GetTick>
 8003320:	4602      	mov	r2, r0
 8003322:	697b      	ldr	r3, [r7, #20]
 8003324:	1ad3      	subs	r3, r2, r3
 8003326:	2b64      	cmp	r3, #100	; 0x64
 8003328:	d901      	bls.n	800332e <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800332a:	2303      	movs	r3, #3
 800332c:	e007      	b.n	800333e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800332e:	4b06      	ldr	r3, [pc, #24]	; (8003348 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003336:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800333a:	d1ef      	bne.n	800331c <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 800333c:	2300      	movs	r3, #0
}
 800333e:	4618      	mov	r0, r3
 8003340:	3720      	adds	r7, #32
 8003342:	46bd      	mov	sp, r7
 8003344:	bd80      	pop	{r7, pc}
 8003346:	bf00      	nop
 8003348:	40023800 	.word	0x40023800

0800334c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800334c:	b580      	push	{r7, lr}
 800334e:	b082      	sub	sp, #8
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	2b00      	cmp	r3, #0
 8003358:	d101      	bne.n	800335e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800335a:	2301      	movs	r3, #1
 800335c:	e049      	b.n	80033f2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003364:	b2db      	uxtb	r3, r3
 8003366:	2b00      	cmp	r3, #0
 8003368:	d106      	bne.n	8003378 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	2200      	movs	r2, #0
 800336e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003372:	6878      	ldr	r0, [r7, #4]
 8003374:	f7fd fd26 	bl	8000dc4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	2202      	movs	r2, #2
 800337c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681a      	ldr	r2, [r3, #0]
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	3304      	adds	r3, #4
 8003388:	4619      	mov	r1, r3
 800338a:	4610      	mov	r0, r2
 800338c:	f000 faca 	bl	8003924 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	2201      	movs	r2, #1
 8003394:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	2201      	movs	r2, #1
 800339c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	2201      	movs	r2, #1
 80033a4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	2201      	movs	r2, #1
 80033ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	2201      	movs	r2, #1
 80033b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	2201      	movs	r2, #1
 80033bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	2201      	movs	r2, #1
 80033c4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	2201      	movs	r2, #1
 80033cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	2201      	movs	r2, #1
 80033d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	2201      	movs	r2, #1
 80033dc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	2201      	movs	r2, #1
 80033e4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	2201      	movs	r2, #1
 80033ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80033f0:	2300      	movs	r3, #0
}
 80033f2:	4618      	mov	r0, r3
 80033f4:	3708      	adds	r7, #8
 80033f6:	46bd      	mov	sp, r7
 80033f8:	bd80      	pop	{r7, pc}
	...

080033fc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80033fc:	b480      	push	{r7}
 80033fe:	b085      	sub	sp, #20
 8003400:	af00      	add	r7, sp, #0
 8003402:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800340a:	b2db      	uxtb	r3, r3
 800340c:	2b01      	cmp	r3, #1
 800340e:	d001      	beq.n	8003414 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003410:	2301      	movs	r3, #1
 8003412:	e054      	b.n	80034be <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2202      	movs	r2, #2
 8003418:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	68da      	ldr	r2, [r3, #12]
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f042 0201 	orr.w	r2, r2, #1
 800342a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	4a26      	ldr	r2, [pc, #152]	; (80034cc <HAL_TIM_Base_Start_IT+0xd0>)
 8003432:	4293      	cmp	r3, r2
 8003434:	d022      	beq.n	800347c <HAL_TIM_Base_Start_IT+0x80>
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800343e:	d01d      	beq.n	800347c <HAL_TIM_Base_Start_IT+0x80>
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	4a22      	ldr	r2, [pc, #136]	; (80034d0 <HAL_TIM_Base_Start_IT+0xd4>)
 8003446:	4293      	cmp	r3, r2
 8003448:	d018      	beq.n	800347c <HAL_TIM_Base_Start_IT+0x80>
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	4a21      	ldr	r2, [pc, #132]	; (80034d4 <HAL_TIM_Base_Start_IT+0xd8>)
 8003450:	4293      	cmp	r3, r2
 8003452:	d013      	beq.n	800347c <HAL_TIM_Base_Start_IT+0x80>
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	4a1f      	ldr	r2, [pc, #124]	; (80034d8 <HAL_TIM_Base_Start_IT+0xdc>)
 800345a:	4293      	cmp	r3, r2
 800345c:	d00e      	beq.n	800347c <HAL_TIM_Base_Start_IT+0x80>
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	4a1e      	ldr	r2, [pc, #120]	; (80034dc <HAL_TIM_Base_Start_IT+0xe0>)
 8003464:	4293      	cmp	r3, r2
 8003466:	d009      	beq.n	800347c <HAL_TIM_Base_Start_IT+0x80>
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	4a1c      	ldr	r2, [pc, #112]	; (80034e0 <HAL_TIM_Base_Start_IT+0xe4>)
 800346e:	4293      	cmp	r3, r2
 8003470:	d004      	beq.n	800347c <HAL_TIM_Base_Start_IT+0x80>
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	4a1b      	ldr	r2, [pc, #108]	; (80034e4 <HAL_TIM_Base_Start_IT+0xe8>)
 8003478:	4293      	cmp	r3, r2
 800347a:	d115      	bne.n	80034a8 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	689a      	ldr	r2, [r3, #8]
 8003482:	4b19      	ldr	r3, [pc, #100]	; (80034e8 <HAL_TIM_Base_Start_IT+0xec>)
 8003484:	4013      	ands	r3, r2
 8003486:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	2b06      	cmp	r3, #6
 800348c:	d015      	beq.n	80034ba <HAL_TIM_Base_Start_IT+0xbe>
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003494:	d011      	beq.n	80034ba <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	681a      	ldr	r2, [r3, #0]
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f042 0201 	orr.w	r2, r2, #1
 80034a4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80034a6:	e008      	b.n	80034ba <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	681a      	ldr	r2, [r3, #0]
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f042 0201 	orr.w	r2, r2, #1
 80034b6:	601a      	str	r2, [r3, #0]
 80034b8:	e000      	b.n	80034bc <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80034ba:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80034bc:	2300      	movs	r3, #0
}
 80034be:	4618      	mov	r0, r3
 80034c0:	3714      	adds	r7, #20
 80034c2:	46bd      	mov	sp, r7
 80034c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c8:	4770      	bx	lr
 80034ca:	bf00      	nop
 80034cc:	40010000 	.word	0x40010000
 80034d0:	40000400 	.word	0x40000400
 80034d4:	40000800 	.word	0x40000800
 80034d8:	40000c00 	.word	0x40000c00
 80034dc:	40010400 	.word	0x40010400
 80034e0:	40014000 	.word	0x40014000
 80034e4:	40001800 	.word	0x40001800
 80034e8:	00010007 	.word	0x00010007

080034ec <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80034ec:	b580      	push	{r7, lr}
 80034ee:	b082      	sub	sp, #8
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	691b      	ldr	r3, [r3, #16]
 80034fa:	f003 0302 	and.w	r3, r3, #2
 80034fe:	2b02      	cmp	r3, #2
 8003500:	d122      	bne.n	8003548 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	68db      	ldr	r3, [r3, #12]
 8003508:	f003 0302 	and.w	r3, r3, #2
 800350c:	2b02      	cmp	r3, #2
 800350e:	d11b      	bne.n	8003548 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f06f 0202 	mvn.w	r2, #2
 8003518:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	2201      	movs	r2, #1
 800351e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	699b      	ldr	r3, [r3, #24]
 8003526:	f003 0303 	and.w	r3, r3, #3
 800352a:	2b00      	cmp	r3, #0
 800352c:	d003      	beq.n	8003536 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800352e:	6878      	ldr	r0, [r7, #4]
 8003530:	f000 f9da 	bl	80038e8 <HAL_TIM_IC_CaptureCallback>
 8003534:	e005      	b.n	8003542 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003536:	6878      	ldr	r0, [r7, #4]
 8003538:	f000 f9cc 	bl	80038d4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800353c:	6878      	ldr	r0, [r7, #4]
 800353e:	f000 f9dd 	bl	80038fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	2200      	movs	r2, #0
 8003546:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	691b      	ldr	r3, [r3, #16]
 800354e:	f003 0304 	and.w	r3, r3, #4
 8003552:	2b04      	cmp	r3, #4
 8003554:	d122      	bne.n	800359c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	68db      	ldr	r3, [r3, #12]
 800355c:	f003 0304 	and.w	r3, r3, #4
 8003560:	2b04      	cmp	r3, #4
 8003562:	d11b      	bne.n	800359c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f06f 0204 	mvn.w	r2, #4
 800356c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	2202      	movs	r2, #2
 8003572:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	699b      	ldr	r3, [r3, #24]
 800357a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800357e:	2b00      	cmp	r3, #0
 8003580:	d003      	beq.n	800358a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003582:	6878      	ldr	r0, [r7, #4]
 8003584:	f000 f9b0 	bl	80038e8 <HAL_TIM_IC_CaptureCallback>
 8003588:	e005      	b.n	8003596 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800358a:	6878      	ldr	r0, [r7, #4]
 800358c:	f000 f9a2 	bl	80038d4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003590:	6878      	ldr	r0, [r7, #4]
 8003592:	f000 f9b3 	bl	80038fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	2200      	movs	r2, #0
 800359a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	691b      	ldr	r3, [r3, #16]
 80035a2:	f003 0308 	and.w	r3, r3, #8
 80035a6:	2b08      	cmp	r3, #8
 80035a8:	d122      	bne.n	80035f0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	68db      	ldr	r3, [r3, #12]
 80035b0:	f003 0308 	and.w	r3, r3, #8
 80035b4:	2b08      	cmp	r3, #8
 80035b6:	d11b      	bne.n	80035f0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f06f 0208 	mvn.w	r2, #8
 80035c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	2204      	movs	r2, #4
 80035c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	69db      	ldr	r3, [r3, #28]
 80035ce:	f003 0303 	and.w	r3, r3, #3
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d003      	beq.n	80035de <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80035d6:	6878      	ldr	r0, [r7, #4]
 80035d8:	f000 f986 	bl	80038e8 <HAL_TIM_IC_CaptureCallback>
 80035dc:	e005      	b.n	80035ea <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80035de:	6878      	ldr	r0, [r7, #4]
 80035e0:	f000 f978 	bl	80038d4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80035e4:	6878      	ldr	r0, [r7, #4]
 80035e6:	f000 f989 	bl	80038fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	2200      	movs	r2, #0
 80035ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	691b      	ldr	r3, [r3, #16]
 80035f6:	f003 0310 	and.w	r3, r3, #16
 80035fa:	2b10      	cmp	r3, #16
 80035fc:	d122      	bne.n	8003644 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	68db      	ldr	r3, [r3, #12]
 8003604:	f003 0310 	and.w	r3, r3, #16
 8003608:	2b10      	cmp	r3, #16
 800360a:	d11b      	bne.n	8003644 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f06f 0210 	mvn.w	r2, #16
 8003614:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	2208      	movs	r2, #8
 800361a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	69db      	ldr	r3, [r3, #28]
 8003622:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003626:	2b00      	cmp	r3, #0
 8003628:	d003      	beq.n	8003632 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800362a:	6878      	ldr	r0, [r7, #4]
 800362c:	f000 f95c 	bl	80038e8 <HAL_TIM_IC_CaptureCallback>
 8003630:	e005      	b.n	800363e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003632:	6878      	ldr	r0, [r7, #4]
 8003634:	f000 f94e 	bl	80038d4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003638:	6878      	ldr	r0, [r7, #4]
 800363a:	f000 f95f 	bl	80038fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	2200      	movs	r2, #0
 8003642:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	691b      	ldr	r3, [r3, #16]
 800364a:	f003 0301 	and.w	r3, r3, #1
 800364e:	2b01      	cmp	r3, #1
 8003650:	d10e      	bne.n	8003670 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	68db      	ldr	r3, [r3, #12]
 8003658:	f003 0301 	and.w	r3, r3, #1
 800365c:	2b01      	cmp	r3, #1
 800365e:	d107      	bne.n	8003670 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f06f 0201 	mvn.w	r2, #1
 8003668:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800366a:	6878      	ldr	r0, [r7, #4]
 800366c:	f000 f928 	bl	80038c0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	691b      	ldr	r3, [r3, #16]
 8003676:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800367a:	2b80      	cmp	r3, #128	; 0x80
 800367c:	d10e      	bne.n	800369c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	68db      	ldr	r3, [r3, #12]
 8003684:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003688:	2b80      	cmp	r3, #128	; 0x80
 800368a:	d107      	bne.n	800369c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003694:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003696:	6878      	ldr	r0, [r7, #4]
 8003698:	f000 fb16 	bl	8003cc8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	691b      	ldr	r3, [r3, #16]
 80036a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80036aa:	d10e      	bne.n	80036ca <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	68db      	ldr	r3, [r3, #12]
 80036b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036b6:	2b80      	cmp	r3, #128	; 0x80
 80036b8:	d107      	bne.n	80036ca <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80036c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80036c4:	6878      	ldr	r0, [r7, #4]
 80036c6:	f000 fb09 	bl	8003cdc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	691b      	ldr	r3, [r3, #16]
 80036d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036d4:	2b40      	cmp	r3, #64	; 0x40
 80036d6:	d10e      	bne.n	80036f6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	68db      	ldr	r3, [r3, #12]
 80036de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036e2:	2b40      	cmp	r3, #64	; 0x40
 80036e4:	d107      	bne.n	80036f6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80036ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80036f0:	6878      	ldr	r0, [r7, #4]
 80036f2:	f000 f90d 	bl	8003910 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	691b      	ldr	r3, [r3, #16]
 80036fc:	f003 0320 	and.w	r3, r3, #32
 8003700:	2b20      	cmp	r3, #32
 8003702:	d10e      	bne.n	8003722 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	68db      	ldr	r3, [r3, #12]
 800370a:	f003 0320 	and.w	r3, r3, #32
 800370e:	2b20      	cmp	r3, #32
 8003710:	d107      	bne.n	8003722 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f06f 0220 	mvn.w	r2, #32
 800371a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800371c:	6878      	ldr	r0, [r7, #4]
 800371e:	f000 fac9 	bl	8003cb4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003722:	bf00      	nop
 8003724:	3708      	adds	r7, #8
 8003726:	46bd      	mov	sp, r7
 8003728:	bd80      	pop	{r7, pc}
	...

0800372c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800372c:	b580      	push	{r7, lr}
 800372e:	b084      	sub	sp, #16
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]
 8003734:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003736:	2300      	movs	r3, #0
 8003738:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003740:	2b01      	cmp	r3, #1
 8003742:	d101      	bne.n	8003748 <HAL_TIM_ConfigClockSource+0x1c>
 8003744:	2302      	movs	r3, #2
 8003746:	e0b4      	b.n	80038b2 <HAL_TIM_ConfigClockSource+0x186>
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2201      	movs	r2, #1
 800374c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	2202      	movs	r2, #2
 8003754:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	689b      	ldr	r3, [r3, #8]
 800375e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003760:	68ba      	ldr	r2, [r7, #8]
 8003762:	4b56      	ldr	r3, [pc, #344]	; (80038bc <HAL_TIM_ConfigClockSource+0x190>)
 8003764:	4013      	ands	r3, r2
 8003766:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003768:	68bb      	ldr	r3, [r7, #8]
 800376a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800376e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	68ba      	ldr	r2, [r7, #8]
 8003776:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003778:	683b      	ldr	r3, [r7, #0]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003780:	d03e      	beq.n	8003800 <HAL_TIM_ConfigClockSource+0xd4>
 8003782:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003786:	f200 8087 	bhi.w	8003898 <HAL_TIM_ConfigClockSource+0x16c>
 800378a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800378e:	f000 8086 	beq.w	800389e <HAL_TIM_ConfigClockSource+0x172>
 8003792:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003796:	d87f      	bhi.n	8003898 <HAL_TIM_ConfigClockSource+0x16c>
 8003798:	2b70      	cmp	r3, #112	; 0x70
 800379a:	d01a      	beq.n	80037d2 <HAL_TIM_ConfigClockSource+0xa6>
 800379c:	2b70      	cmp	r3, #112	; 0x70
 800379e:	d87b      	bhi.n	8003898 <HAL_TIM_ConfigClockSource+0x16c>
 80037a0:	2b60      	cmp	r3, #96	; 0x60
 80037a2:	d050      	beq.n	8003846 <HAL_TIM_ConfigClockSource+0x11a>
 80037a4:	2b60      	cmp	r3, #96	; 0x60
 80037a6:	d877      	bhi.n	8003898 <HAL_TIM_ConfigClockSource+0x16c>
 80037a8:	2b50      	cmp	r3, #80	; 0x50
 80037aa:	d03c      	beq.n	8003826 <HAL_TIM_ConfigClockSource+0xfa>
 80037ac:	2b50      	cmp	r3, #80	; 0x50
 80037ae:	d873      	bhi.n	8003898 <HAL_TIM_ConfigClockSource+0x16c>
 80037b0:	2b40      	cmp	r3, #64	; 0x40
 80037b2:	d058      	beq.n	8003866 <HAL_TIM_ConfigClockSource+0x13a>
 80037b4:	2b40      	cmp	r3, #64	; 0x40
 80037b6:	d86f      	bhi.n	8003898 <HAL_TIM_ConfigClockSource+0x16c>
 80037b8:	2b30      	cmp	r3, #48	; 0x30
 80037ba:	d064      	beq.n	8003886 <HAL_TIM_ConfigClockSource+0x15a>
 80037bc:	2b30      	cmp	r3, #48	; 0x30
 80037be:	d86b      	bhi.n	8003898 <HAL_TIM_ConfigClockSource+0x16c>
 80037c0:	2b20      	cmp	r3, #32
 80037c2:	d060      	beq.n	8003886 <HAL_TIM_ConfigClockSource+0x15a>
 80037c4:	2b20      	cmp	r3, #32
 80037c6:	d867      	bhi.n	8003898 <HAL_TIM_ConfigClockSource+0x16c>
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d05c      	beq.n	8003886 <HAL_TIM_ConfigClockSource+0x15a>
 80037cc:	2b10      	cmp	r3, #16
 80037ce:	d05a      	beq.n	8003886 <HAL_TIM_ConfigClockSource+0x15a>
 80037d0:	e062      	b.n	8003898 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80037d6:	683b      	ldr	r3, [r7, #0]
 80037d8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80037da:	683b      	ldr	r3, [r7, #0]
 80037dc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80037de:	683b      	ldr	r3, [r7, #0]
 80037e0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80037e2:	f000 f9b9 	bl	8003b58 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	689b      	ldr	r3, [r3, #8]
 80037ec:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80037ee:	68bb      	ldr	r3, [r7, #8]
 80037f0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80037f4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	68ba      	ldr	r2, [r7, #8]
 80037fc:	609a      	str	r2, [r3, #8]
      break;
 80037fe:	e04f      	b.n	80038a0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003804:	683b      	ldr	r3, [r7, #0]
 8003806:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003808:	683b      	ldr	r3, [r7, #0]
 800380a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800380c:	683b      	ldr	r3, [r7, #0]
 800380e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003810:	f000 f9a2 	bl	8003b58 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	689a      	ldr	r2, [r3, #8]
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003822:	609a      	str	r2, [r3, #8]
      break;
 8003824:	e03c      	b.n	80038a0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800382a:	683b      	ldr	r3, [r7, #0]
 800382c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800382e:	683b      	ldr	r3, [r7, #0]
 8003830:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003832:	461a      	mov	r2, r3
 8003834:	f000 f916 	bl	8003a64 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	2150      	movs	r1, #80	; 0x50
 800383e:	4618      	mov	r0, r3
 8003840:	f000 f96f 	bl	8003b22 <TIM_ITRx_SetConfig>
      break;
 8003844:	e02c      	b.n	80038a0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800384a:	683b      	ldr	r3, [r7, #0]
 800384c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800384e:	683b      	ldr	r3, [r7, #0]
 8003850:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003852:	461a      	mov	r2, r3
 8003854:	f000 f935 	bl	8003ac2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	2160      	movs	r1, #96	; 0x60
 800385e:	4618      	mov	r0, r3
 8003860:	f000 f95f 	bl	8003b22 <TIM_ITRx_SetConfig>
      break;
 8003864:	e01c      	b.n	80038a0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800386a:	683b      	ldr	r3, [r7, #0]
 800386c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800386e:	683b      	ldr	r3, [r7, #0]
 8003870:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003872:	461a      	mov	r2, r3
 8003874:	f000 f8f6 	bl	8003a64 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	2140      	movs	r1, #64	; 0x40
 800387e:	4618      	mov	r0, r3
 8003880:	f000 f94f 	bl	8003b22 <TIM_ITRx_SetConfig>
      break;
 8003884:	e00c      	b.n	80038a0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681a      	ldr	r2, [r3, #0]
 800388a:	683b      	ldr	r3, [r7, #0]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	4619      	mov	r1, r3
 8003890:	4610      	mov	r0, r2
 8003892:	f000 f946 	bl	8003b22 <TIM_ITRx_SetConfig>
      break;
 8003896:	e003      	b.n	80038a0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003898:	2301      	movs	r3, #1
 800389a:	73fb      	strb	r3, [r7, #15]
      break;
 800389c:	e000      	b.n	80038a0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800389e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	2201      	movs	r2, #1
 80038a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	2200      	movs	r2, #0
 80038ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80038b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80038b2:	4618      	mov	r0, r3
 80038b4:	3710      	adds	r7, #16
 80038b6:	46bd      	mov	sp, r7
 80038b8:	bd80      	pop	{r7, pc}
 80038ba:	bf00      	nop
 80038bc:	fffeff88 	.word	0xfffeff88

080038c0 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80038c0:	b480      	push	{r7}
 80038c2:	b083      	sub	sp, #12
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80038c8:	bf00      	nop
 80038ca:	370c      	adds	r7, #12
 80038cc:	46bd      	mov	sp, r7
 80038ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d2:	4770      	bx	lr

080038d4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80038d4:	b480      	push	{r7}
 80038d6:	b083      	sub	sp, #12
 80038d8:	af00      	add	r7, sp, #0
 80038da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80038dc:	bf00      	nop
 80038de:	370c      	adds	r7, #12
 80038e0:	46bd      	mov	sp, r7
 80038e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e6:	4770      	bx	lr

080038e8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80038e8:	b480      	push	{r7}
 80038ea:	b083      	sub	sp, #12
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80038f0:	bf00      	nop
 80038f2:	370c      	adds	r7, #12
 80038f4:	46bd      	mov	sp, r7
 80038f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fa:	4770      	bx	lr

080038fc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80038fc:	b480      	push	{r7}
 80038fe:	b083      	sub	sp, #12
 8003900:	af00      	add	r7, sp, #0
 8003902:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003904:	bf00      	nop
 8003906:	370c      	adds	r7, #12
 8003908:	46bd      	mov	sp, r7
 800390a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390e:	4770      	bx	lr

08003910 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003910:	b480      	push	{r7}
 8003912:	b083      	sub	sp, #12
 8003914:	af00      	add	r7, sp, #0
 8003916:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003918:	bf00      	nop
 800391a:	370c      	adds	r7, #12
 800391c:	46bd      	mov	sp, r7
 800391e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003922:	4770      	bx	lr

08003924 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003924:	b480      	push	{r7}
 8003926:	b085      	sub	sp, #20
 8003928:	af00      	add	r7, sp, #0
 800392a:	6078      	str	r0, [r7, #4]
 800392c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	4a40      	ldr	r2, [pc, #256]	; (8003a38 <TIM_Base_SetConfig+0x114>)
 8003938:	4293      	cmp	r3, r2
 800393a:	d013      	beq.n	8003964 <TIM_Base_SetConfig+0x40>
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003942:	d00f      	beq.n	8003964 <TIM_Base_SetConfig+0x40>
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	4a3d      	ldr	r2, [pc, #244]	; (8003a3c <TIM_Base_SetConfig+0x118>)
 8003948:	4293      	cmp	r3, r2
 800394a:	d00b      	beq.n	8003964 <TIM_Base_SetConfig+0x40>
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	4a3c      	ldr	r2, [pc, #240]	; (8003a40 <TIM_Base_SetConfig+0x11c>)
 8003950:	4293      	cmp	r3, r2
 8003952:	d007      	beq.n	8003964 <TIM_Base_SetConfig+0x40>
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	4a3b      	ldr	r2, [pc, #236]	; (8003a44 <TIM_Base_SetConfig+0x120>)
 8003958:	4293      	cmp	r3, r2
 800395a:	d003      	beq.n	8003964 <TIM_Base_SetConfig+0x40>
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	4a3a      	ldr	r2, [pc, #232]	; (8003a48 <TIM_Base_SetConfig+0x124>)
 8003960:	4293      	cmp	r3, r2
 8003962:	d108      	bne.n	8003976 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800396a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800396c:	683b      	ldr	r3, [r7, #0]
 800396e:	685b      	ldr	r3, [r3, #4]
 8003970:	68fa      	ldr	r2, [r7, #12]
 8003972:	4313      	orrs	r3, r2
 8003974:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	4a2f      	ldr	r2, [pc, #188]	; (8003a38 <TIM_Base_SetConfig+0x114>)
 800397a:	4293      	cmp	r3, r2
 800397c:	d02b      	beq.n	80039d6 <TIM_Base_SetConfig+0xb2>
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003984:	d027      	beq.n	80039d6 <TIM_Base_SetConfig+0xb2>
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	4a2c      	ldr	r2, [pc, #176]	; (8003a3c <TIM_Base_SetConfig+0x118>)
 800398a:	4293      	cmp	r3, r2
 800398c:	d023      	beq.n	80039d6 <TIM_Base_SetConfig+0xb2>
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	4a2b      	ldr	r2, [pc, #172]	; (8003a40 <TIM_Base_SetConfig+0x11c>)
 8003992:	4293      	cmp	r3, r2
 8003994:	d01f      	beq.n	80039d6 <TIM_Base_SetConfig+0xb2>
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	4a2a      	ldr	r2, [pc, #168]	; (8003a44 <TIM_Base_SetConfig+0x120>)
 800399a:	4293      	cmp	r3, r2
 800399c:	d01b      	beq.n	80039d6 <TIM_Base_SetConfig+0xb2>
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	4a29      	ldr	r2, [pc, #164]	; (8003a48 <TIM_Base_SetConfig+0x124>)
 80039a2:	4293      	cmp	r3, r2
 80039a4:	d017      	beq.n	80039d6 <TIM_Base_SetConfig+0xb2>
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	4a28      	ldr	r2, [pc, #160]	; (8003a4c <TIM_Base_SetConfig+0x128>)
 80039aa:	4293      	cmp	r3, r2
 80039ac:	d013      	beq.n	80039d6 <TIM_Base_SetConfig+0xb2>
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	4a27      	ldr	r2, [pc, #156]	; (8003a50 <TIM_Base_SetConfig+0x12c>)
 80039b2:	4293      	cmp	r3, r2
 80039b4:	d00f      	beq.n	80039d6 <TIM_Base_SetConfig+0xb2>
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	4a26      	ldr	r2, [pc, #152]	; (8003a54 <TIM_Base_SetConfig+0x130>)
 80039ba:	4293      	cmp	r3, r2
 80039bc:	d00b      	beq.n	80039d6 <TIM_Base_SetConfig+0xb2>
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	4a25      	ldr	r2, [pc, #148]	; (8003a58 <TIM_Base_SetConfig+0x134>)
 80039c2:	4293      	cmp	r3, r2
 80039c4:	d007      	beq.n	80039d6 <TIM_Base_SetConfig+0xb2>
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	4a24      	ldr	r2, [pc, #144]	; (8003a5c <TIM_Base_SetConfig+0x138>)
 80039ca:	4293      	cmp	r3, r2
 80039cc:	d003      	beq.n	80039d6 <TIM_Base_SetConfig+0xb2>
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	4a23      	ldr	r2, [pc, #140]	; (8003a60 <TIM_Base_SetConfig+0x13c>)
 80039d2:	4293      	cmp	r3, r2
 80039d4:	d108      	bne.n	80039e8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80039dc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80039de:	683b      	ldr	r3, [r7, #0]
 80039e0:	68db      	ldr	r3, [r3, #12]
 80039e2:	68fa      	ldr	r2, [r7, #12]
 80039e4:	4313      	orrs	r3, r2
 80039e6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80039ee:	683b      	ldr	r3, [r7, #0]
 80039f0:	695b      	ldr	r3, [r3, #20]
 80039f2:	4313      	orrs	r3, r2
 80039f4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	68fa      	ldr	r2, [r7, #12]
 80039fa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80039fc:	683b      	ldr	r3, [r7, #0]
 80039fe:	689a      	ldr	r2, [r3, #8]
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003a04:	683b      	ldr	r3, [r7, #0]
 8003a06:	681a      	ldr	r2, [r3, #0]
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	4a0a      	ldr	r2, [pc, #40]	; (8003a38 <TIM_Base_SetConfig+0x114>)
 8003a10:	4293      	cmp	r3, r2
 8003a12:	d003      	beq.n	8003a1c <TIM_Base_SetConfig+0xf8>
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	4a0c      	ldr	r2, [pc, #48]	; (8003a48 <TIM_Base_SetConfig+0x124>)
 8003a18:	4293      	cmp	r3, r2
 8003a1a:	d103      	bne.n	8003a24 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003a1c:	683b      	ldr	r3, [r7, #0]
 8003a1e:	691a      	ldr	r2, [r3, #16]
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	2201      	movs	r2, #1
 8003a28:	615a      	str	r2, [r3, #20]
}
 8003a2a:	bf00      	nop
 8003a2c:	3714      	adds	r7, #20
 8003a2e:	46bd      	mov	sp, r7
 8003a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a34:	4770      	bx	lr
 8003a36:	bf00      	nop
 8003a38:	40010000 	.word	0x40010000
 8003a3c:	40000400 	.word	0x40000400
 8003a40:	40000800 	.word	0x40000800
 8003a44:	40000c00 	.word	0x40000c00
 8003a48:	40010400 	.word	0x40010400
 8003a4c:	40014000 	.word	0x40014000
 8003a50:	40014400 	.word	0x40014400
 8003a54:	40014800 	.word	0x40014800
 8003a58:	40001800 	.word	0x40001800
 8003a5c:	40001c00 	.word	0x40001c00
 8003a60:	40002000 	.word	0x40002000

08003a64 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003a64:	b480      	push	{r7}
 8003a66:	b087      	sub	sp, #28
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	60f8      	str	r0, [r7, #12]
 8003a6c:	60b9      	str	r1, [r7, #8]
 8003a6e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	6a1b      	ldr	r3, [r3, #32]
 8003a74:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	6a1b      	ldr	r3, [r3, #32]
 8003a7a:	f023 0201 	bic.w	r2, r3, #1
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	699b      	ldr	r3, [r3, #24]
 8003a86:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003a88:	693b      	ldr	r3, [r7, #16]
 8003a8a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003a8e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	011b      	lsls	r3, r3, #4
 8003a94:	693a      	ldr	r2, [r7, #16]
 8003a96:	4313      	orrs	r3, r2
 8003a98:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003a9a:	697b      	ldr	r3, [r7, #20]
 8003a9c:	f023 030a 	bic.w	r3, r3, #10
 8003aa0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003aa2:	697a      	ldr	r2, [r7, #20]
 8003aa4:	68bb      	ldr	r3, [r7, #8]
 8003aa6:	4313      	orrs	r3, r2
 8003aa8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	693a      	ldr	r2, [r7, #16]
 8003aae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	697a      	ldr	r2, [r7, #20]
 8003ab4:	621a      	str	r2, [r3, #32]
}
 8003ab6:	bf00      	nop
 8003ab8:	371c      	adds	r7, #28
 8003aba:	46bd      	mov	sp, r7
 8003abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac0:	4770      	bx	lr

08003ac2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003ac2:	b480      	push	{r7}
 8003ac4:	b087      	sub	sp, #28
 8003ac6:	af00      	add	r7, sp, #0
 8003ac8:	60f8      	str	r0, [r7, #12]
 8003aca:	60b9      	str	r1, [r7, #8]
 8003acc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	6a1b      	ldr	r3, [r3, #32]
 8003ad2:	f023 0210 	bic.w	r2, r3, #16
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	699b      	ldr	r3, [r3, #24]
 8003ade:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	6a1b      	ldr	r3, [r3, #32]
 8003ae4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003ae6:	697b      	ldr	r3, [r7, #20]
 8003ae8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003aec:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	031b      	lsls	r3, r3, #12
 8003af2:	697a      	ldr	r2, [r7, #20]
 8003af4:	4313      	orrs	r3, r2
 8003af6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003af8:	693b      	ldr	r3, [r7, #16]
 8003afa:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003afe:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003b00:	68bb      	ldr	r3, [r7, #8]
 8003b02:	011b      	lsls	r3, r3, #4
 8003b04:	693a      	ldr	r2, [r7, #16]
 8003b06:	4313      	orrs	r3, r2
 8003b08:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	697a      	ldr	r2, [r7, #20]
 8003b0e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	693a      	ldr	r2, [r7, #16]
 8003b14:	621a      	str	r2, [r3, #32]
}
 8003b16:	bf00      	nop
 8003b18:	371c      	adds	r7, #28
 8003b1a:	46bd      	mov	sp, r7
 8003b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b20:	4770      	bx	lr

08003b22 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003b22:	b480      	push	{r7}
 8003b24:	b085      	sub	sp, #20
 8003b26:	af00      	add	r7, sp, #0
 8003b28:	6078      	str	r0, [r7, #4]
 8003b2a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	689b      	ldr	r3, [r3, #8]
 8003b30:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b38:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003b3a:	683a      	ldr	r2, [r7, #0]
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	4313      	orrs	r3, r2
 8003b40:	f043 0307 	orr.w	r3, r3, #7
 8003b44:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	68fa      	ldr	r2, [r7, #12]
 8003b4a:	609a      	str	r2, [r3, #8]
}
 8003b4c:	bf00      	nop
 8003b4e:	3714      	adds	r7, #20
 8003b50:	46bd      	mov	sp, r7
 8003b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b56:	4770      	bx	lr

08003b58 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003b58:	b480      	push	{r7}
 8003b5a:	b087      	sub	sp, #28
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	60f8      	str	r0, [r7, #12]
 8003b60:	60b9      	str	r1, [r7, #8]
 8003b62:	607a      	str	r2, [r7, #4]
 8003b64:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	689b      	ldr	r3, [r3, #8]
 8003b6a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003b6c:	697b      	ldr	r3, [r7, #20]
 8003b6e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003b72:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003b74:	683b      	ldr	r3, [r7, #0]
 8003b76:	021a      	lsls	r2, r3, #8
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	431a      	orrs	r2, r3
 8003b7c:	68bb      	ldr	r3, [r7, #8]
 8003b7e:	4313      	orrs	r3, r2
 8003b80:	697a      	ldr	r2, [r7, #20]
 8003b82:	4313      	orrs	r3, r2
 8003b84:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	697a      	ldr	r2, [r7, #20]
 8003b8a:	609a      	str	r2, [r3, #8]
}
 8003b8c:	bf00      	nop
 8003b8e:	371c      	adds	r7, #28
 8003b90:	46bd      	mov	sp, r7
 8003b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b96:	4770      	bx	lr

08003b98 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003b98:	b480      	push	{r7}
 8003b9a:	b085      	sub	sp, #20
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	6078      	str	r0, [r7, #4]
 8003ba0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ba8:	2b01      	cmp	r3, #1
 8003baa:	d101      	bne.n	8003bb0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003bac:	2302      	movs	r3, #2
 8003bae:	e06d      	b.n	8003c8c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	2201      	movs	r2, #1
 8003bb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	2202      	movs	r2, #2
 8003bbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	685b      	ldr	r3, [r3, #4]
 8003bc6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	689b      	ldr	r3, [r3, #8]
 8003bce:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	4a30      	ldr	r2, [pc, #192]	; (8003c98 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003bd6:	4293      	cmp	r3, r2
 8003bd8:	d004      	beq.n	8003be4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	4a2f      	ldr	r2, [pc, #188]	; (8003c9c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003be0:	4293      	cmp	r3, r2
 8003be2:	d108      	bne.n	8003bf6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003bea:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003bec:	683b      	ldr	r3, [r7, #0]
 8003bee:	685b      	ldr	r3, [r3, #4]
 8003bf0:	68fa      	ldr	r2, [r7, #12]
 8003bf2:	4313      	orrs	r3, r2
 8003bf4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003bfc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003bfe:	683b      	ldr	r3, [r7, #0]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	68fa      	ldr	r2, [r7, #12]
 8003c04:	4313      	orrs	r3, r2
 8003c06:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	68fa      	ldr	r2, [r7, #12]
 8003c0e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	4a20      	ldr	r2, [pc, #128]	; (8003c98 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003c16:	4293      	cmp	r3, r2
 8003c18:	d022      	beq.n	8003c60 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c22:	d01d      	beq.n	8003c60 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	4a1d      	ldr	r2, [pc, #116]	; (8003ca0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8003c2a:	4293      	cmp	r3, r2
 8003c2c:	d018      	beq.n	8003c60 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	4a1c      	ldr	r2, [pc, #112]	; (8003ca4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8003c34:	4293      	cmp	r3, r2
 8003c36:	d013      	beq.n	8003c60 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	4a1a      	ldr	r2, [pc, #104]	; (8003ca8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8003c3e:	4293      	cmp	r3, r2
 8003c40:	d00e      	beq.n	8003c60 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	4a15      	ldr	r2, [pc, #84]	; (8003c9c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003c48:	4293      	cmp	r3, r2
 8003c4a:	d009      	beq.n	8003c60 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	4a16      	ldr	r2, [pc, #88]	; (8003cac <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8003c52:	4293      	cmp	r3, r2
 8003c54:	d004      	beq.n	8003c60 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	4a15      	ldr	r2, [pc, #84]	; (8003cb0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8003c5c:	4293      	cmp	r3, r2
 8003c5e:	d10c      	bne.n	8003c7a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003c60:	68bb      	ldr	r3, [r7, #8]
 8003c62:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003c66:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003c68:	683b      	ldr	r3, [r7, #0]
 8003c6a:	689b      	ldr	r3, [r3, #8]
 8003c6c:	68ba      	ldr	r2, [r7, #8]
 8003c6e:	4313      	orrs	r3, r2
 8003c70:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	68ba      	ldr	r2, [r7, #8]
 8003c78:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	2201      	movs	r2, #1
 8003c7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	2200      	movs	r2, #0
 8003c86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003c8a:	2300      	movs	r3, #0
}
 8003c8c:	4618      	mov	r0, r3
 8003c8e:	3714      	adds	r7, #20
 8003c90:	46bd      	mov	sp, r7
 8003c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c96:	4770      	bx	lr
 8003c98:	40010000 	.word	0x40010000
 8003c9c:	40010400 	.word	0x40010400
 8003ca0:	40000400 	.word	0x40000400
 8003ca4:	40000800 	.word	0x40000800
 8003ca8:	40000c00 	.word	0x40000c00
 8003cac:	40014000 	.word	0x40014000
 8003cb0:	40001800 	.word	0x40001800

08003cb4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003cb4:	b480      	push	{r7}
 8003cb6:	b083      	sub	sp, #12
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003cbc:	bf00      	nop
 8003cbe:	370c      	adds	r7, #12
 8003cc0:	46bd      	mov	sp, r7
 8003cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc6:	4770      	bx	lr

08003cc8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003cc8:	b480      	push	{r7}
 8003cca:	b083      	sub	sp, #12
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003cd0:	bf00      	nop
 8003cd2:	370c      	adds	r7, #12
 8003cd4:	46bd      	mov	sp, r7
 8003cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cda:	4770      	bx	lr

08003cdc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003cdc:	b480      	push	{r7}
 8003cde:	b083      	sub	sp, #12
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003ce4:	bf00      	nop
 8003ce6:	370c      	adds	r7, #12
 8003ce8:	46bd      	mov	sp, r7
 8003cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cee:	4770      	bx	lr

08003cf0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003cf0:	b580      	push	{r7, lr}
 8003cf2:	b082      	sub	sp, #8
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d101      	bne.n	8003d02 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003cfe:	2301      	movs	r3, #1
 8003d00:	e040      	b.n	8003d84 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d106      	bne.n	8003d18 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	2200      	movs	r2, #0
 8003d0e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003d12:	6878      	ldr	r0, [r7, #4]
 8003d14:	f7fd f8c6 	bl	8000ea4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	2224      	movs	r2, #36	; 0x24
 8003d1c:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	681a      	ldr	r2, [r3, #0]
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f022 0201 	bic.w	r2, r2, #1
 8003d2c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003d2e:	6878      	ldr	r0, [r7, #4]
 8003d30:	f000 f8b0 	bl	8003e94 <UART_SetConfig>
 8003d34:	4603      	mov	r3, r0
 8003d36:	2b01      	cmp	r3, #1
 8003d38:	d101      	bne.n	8003d3e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003d3a:	2301      	movs	r3, #1
 8003d3c:	e022      	b.n	8003d84 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d002      	beq.n	8003d4c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003d46:	6878      	ldr	r0, [r7, #4]
 8003d48:	f000 fb08 	bl	800435c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	685a      	ldr	r2, [r3, #4]
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003d5a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	689a      	ldr	r2, [r3, #8]
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003d6a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	681a      	ldr	r2, [r3, #0]
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f042 0201 	orr.w	r2, r2, #1
 8003d7a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003d7c:	6878      	ldr	r0, [r7, #4]
 8003d7e:	f000 fb8f 	bl	80044a0 <UART_CheckIdleState>
 8003d82:	4603      	mov	r3, r0
}
 8003d84:	4618      	mov	r0, r3
 8003d86:	3708      	adds	r7, #8
 8003d88:	46bd      	mov	sp, r7
 8003d8a:	bd80      	pop	{r7, pc}

08003d8c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d8c:	b580      	push	{r7, lr}
 8003d8e:	b08a      	sub	sp, #40	; 0x28
 8003d90:	af02      	add	r7, sp, #8
 8003d92:	60f8      	str	r0, [r7, #12]
 8003d94:	60b9      	str	r1, [r7, #8]
 8003d96:	603b      	str	r3, [r7, #0]
 8003d98:	4613      	mov	r3, r2
 8003d9a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003da0:	2b20      	cmp	r3, #32
 8003da2:	d171      	bne.n	8003e88 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8003da4:	68bb      	ldr	r3, [r7, #8]
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d002      	beq.n	8003db0 <HAL_UART_Transmit+0x24>
 8003daa:	88fb      	ldrh	r3, [r7, #6]
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d101      	bne.n	8003db4 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8003db0:	2301      	movs	r3, #1
 8003db2:	e06a      	b.n	8003e8a <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	2200      	movs	r2, #0
 8003db8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	2221      	movs	r2, #33	; 0x21
 8003dc0:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003dc2:	f7fd f9f1 	bl	80011a8 <HAL_GetTick>
 8003dc6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	88fa      	ldrh	r2, [r7, #6]
 8003dcc:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	88fa      	ldrh	r2, [r7, #6]
 8003dd4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	689b      	ldr	r3, [r3, #8]
 8003ddc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003de0:	d108      	bne.n	8003df4 <HAL_UART_Transmit+0x68>
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	691b      	ldr	r3, [r3, #16]
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d104      	bne.n	8003df4 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8003dea:	2300      	movs	r3, #0
 8003dec:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003dee:	68bb      	ldr	r3, [r7, #8]
 8003df0:	61bb      	str	r3, [r7, #24]
 8003df2:	e003      	b.n	8003dfc <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8003df4:	68bb      	ldr	r3, [r7, #8]
 8003df6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003df8:	2300      	movs	r3, #0
 8003dfa:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003dfc:	e02c      	b.n	8003e58 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003dfe:	683b      	ldr	r3, [r7, #0]
 8003e00:	9300      	str	r3, [sp, #0]
 8003e02:	697b      	ldr	r3, [r7, #20]
 8003e04:	2200      	movs	r2, #0
 8003e06:	2180      	movs	r1, #128	; 0x80
 8003e08:	68f8      	ldr	r0, [r7, #12]
 8003e0a:	f000 fb96 	bl	800453a <UART_WaitOnFlagUntilTimeout>
 8003e0e:	4603      	mov	r3, r0
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d001      	beq.n	8003e18 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 8003e14:	2303      	movs	r3, #3
 8003e16:	e038      	b.n	8003e8a <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8003e18:	69fb      	ldr	r3, [r7, #28]
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d10b      	bne.n	8003e36 <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003e1e:	69bb      	ldr	r3, [r7, #24]
 8003e20:	881b      	ldrh	r3, [r3, #0]
 8003e22:	461a      	mov	r2, r3
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003e2c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003e2e:	69bb      	ldr	r3, [r7, #24]
 8003e30:	3302      	adds	r3, #2
 8003e32:	61bb      	str	r3, [r7, #24]
 8003e34:	e007      	b.n	8003e46 <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003e36:	69fb      	ldr	r3, [r7, #28]
 8003e38:	781a      	ldrb	r2, [r3, #0]
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003e40:	69fb      	ldr	r3, [r7, #28]
 8003e42:	3301      	adds	r3, #1
 8003e44:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003e4c:	b29b      	uxth	r3, r3
 8003e4e:	3b01      	subs	r3, #1
 8003e50:	b29a      	uxth	r2, r3
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003e5e:	b29b      	uxth	r3, r3
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d1cc      	bne.n	8003dfe <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003e64:	683b      	ldr	r3, [r7, #0]
 8003e66:	9300      	str	r3, [sp, #0]
 8003e68:	697b      	ldr	r3, [r7, #20]
 8003e6a:	2200      	movs	r2, #0
 8003e6c:	2140      	movs	r1, #64	; 0x40
 8003e6e:	68f8      	ldr	r0, [r7, #12]
 8003e70:	f000 fb63 	bl	800453a <UART_WaitOnFlagUntilTimeout>
 8003e74:	4603      	mov	r3, r0
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d001      	beq.n	8003e7e <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 8003e7a:	2303      	movs	r3, #3
 8003e7c:	e005      	b.n	8003e8a <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	2220      	movs	r2, #32
 8003e82:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8003e84:	2300      	movs	r3, #0
 8003e86:	e000      	b.n	8003e8a <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8003e88:	2302      	movs	r3, #2
  }
}
 8003e8a:	4618      	mov	r0, r3
 8003e8c:	3720      	adds	r7, #32
 8003e8e:	46bd      	mov	sp, r7
 8003e90:	bd80      	pop	{r7, pc}
	...

08003e94 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003e94:	b580      	push	{r7, lr}
 8003e96:	b088      	sub	sp, #32
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003e9c:	2300      	movs	r3, #0
 8003e9e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	689a      	ldr	r2, [r3, #8]
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	691b      	ldr	r3, [r3, #16]
 8003ea8:	431a      	orrs	r2, r3
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	695b      	ldr	r3, [r3, #20]
 8003eae:	431a      	orrs	r2, r3
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	69db      	ldr	r3, [r3, #28]
 8003eb4:	4313      	orrs	r3, r2
 8003eb6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	681a      	ldr	r2, [r3, #0]
 8003ebe:	4ba6      	ldr	r3, [pc, #664]	; (8004158 <UART_SetConfig+0x2c4>)
 8003ec0:	4013      	ands	r3, r2
 8003ec2:	687a      	ldr	r2, [r7, #4]
 8003ec4:	6812      	ldr	r2, [r2, #0]
 8003ec6:	6979      	ldr	r1, [r7, #20]
 8003ec8:	430b      	orrs	r3, r1
 8003eca:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	685b      	ldr	r3, [r3, #4]
 8003ed2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	68da      	ldr	r2, [r3, #12]
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	430a      	orrs	r2, r1
 8003ee0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	699b      	ldr	r3, [r3, #24]
 8003ee6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	6a1b      	ldr	r3, [r3, #32]
 8003eec:	697a      	ldr	r2, [r7, #20]
 8003eee:	4313      	orrs	r3, r2
 8003ef0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	689b      	ldr	r3, [r3, #8]
 8003ef8:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	697a      	ldr	r2, [r7, #20]
 8003f02:	430a      	orrs	r2, r1
 8003f04:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	4a94      	ldr	r2, [pc, #592]	; (800415c <UART_SetConfig+0x2c8>)
 8003f0c:	4293      	cmp	r3, r2
 8003f0e:	d120      	bne.n	8003f52 <UART_SetConfig+0xbe>
 8003f10:	4b93      	ldr	r3, [pc, #588]	; (8004160 <UART_SetConfig+0x2cc>)
 8003f12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f16:	f003 0303 	and.w	r3, r3, #3
 8003f1a:	2b03      	cmp	r3, #3
 8003f1c:	d816      	bhi.n	8003f4c <UART_SetConfig+0xb8>
 8003f1e:	a201      	add	r2, pc, #4	; (adr r2, 8003f24 <UART_SetConfig+0x90>)
 8003f20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f24:	08003f35 	.word	0x08003f35
 8003f28:	08003f41 	.word	0x08003f41
 8003f2c:	08003f3b 	.word	0x08003f3b
 8003f30:	08003f47 	.word	0x08003f47
 8003f34:	2301      	movs	r3, #1
 8003f36:	77fb      	strb	r3, [r7, #31]
 8003f38:	e150      	b.n	80041dc <UART_SetConfig+0x348>
 8003f3a:	2302      	movs	r3, #2
 8003f3c:	77fb      	strb	r3, [r7, #31]
 8003f3e:	e14d      	b.n	80041dc <UART_SetConfig+0x348>
 8003f40:	2304      	movs	r3, #4
 8003f42:	77fb      	strb	r3, [r7, #31]
 8003f44:	e14a      	b.n	80041dc <UART_SetConfig+0x348>
 8003f46:	2308      	movs	r3, #8
 8003f48:	77fb      	strb	r3, [r7, #31]
 8003f4a:	e147      	b.n	80041dc <UART_SetConfig+0x348>
 8003f4c:	2310      	movs	r3, #16
 8003f4e:	77fb      	strb	r3, [r7, #31]
 8003f50:	e144      	b.n	80041dc <UART_SetConfig+0x348>
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	4a83      	ldr	r2, [pc, #524]	; (8004164 <UART_SetConfig+0x2d0>)
 8003f58:	4293      	cmp	r3, r2
 8003f5a:	d132      	bne.n	8003fc2 <UART_SetConfig+0x12e>
 8003f5c:	4b80      	ldr	r3, [pc, #512]	; (8004160 <UART_SetConfig+0x2cc>)
 8003f5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f62:	f003 030c 	and.w	r3, r3, #12
 8003f66:	2b0c      	cmp	r3, #12
 8003f68:	d828      	bhi.n	8003fbc <UART_SetConfig+0x128>
 8003f6a:	a201      	add	r2, pc, #4	; (adr r2, 8003f70 <UART_SetConfig+0xdc>)
 8003f6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f70:	08003fa5 	.word	0x08003fa5
 8003f74:	08003fbd 	.word	0x08003fbd
 8003f78:	08003fbd 	.word	0x08003fbd
 8003f7c:	08003fbd 	.word	0x08003fbd
 8003f80:	08003fb1 	.word	0x08003fb1
 8003f84:	08003fbd 	.word	0x08003fbd
 8003f88:	08003fbd 	.word	0x08003fbd
 8003f8c:	08003fbd 	.word	0x08003fbd
 8003f90:	08003fab 	.word	0x08003fab
 8003f94:	08003fbd 	.word	0x08003fbd
 8003f98:	08003fbd 	.word	0x08003fbd
 8003f9c:	08003fbd 	.word	0x08003fbd
 8003fa0:	08003fb7 	.word	0x08003fb7
 8003fa4:	2300      	movs	r3, #0
 8003fa6:	77fb      	strb	r3, [r7, #31]
 8003fa8:	e118      	b.n	80041dc <UART_SetConfig+0x348>
 8003faa:	2302      	movs	r3, #2
 8003fac:	77fb      	strb	r3, [r7, #31]
 8003fae:	e115      	b.n	80041dc <UART_SetConfig+0x348>
 8003fb0:	2304      	movs	r3, #4
 8003fb2:	77fb      	strb	r3, [r7, #31]
 8003fb4:	e112      	b.n	80041dc <UART_SetConfig+0x348>
 8003fb6:	2308      	movs	r3, #8
 8003fb8:	77fb      	strb	r3, [r7, #31]
 8003fba:	e10f      	b.n	80041dc <UART_SetConfig+0x348>
 8003fbc:	2310      	movs	r3, #16
 8003fbe:	77fb      	strb	r3, [r7, #31]
 8003fc0:	e10c      	b.n	80041dc <UART_SetConfig+0x348>
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	4a68      	ldr	r2, [pc, #416]	; (8004168 <UART_SetConfig+0x2d4>)
 8003fc8:	4293      	cmp	r3, r2
 8003fca:	d120      	bne.n	800400e <UART_SetConfig+0x17a>
 8003fcc:	4b64      	ldr	r3, [pc, #400]	; (8004160 <UART_SetConfig+0x2cc>)
 8003fce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fd2:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003fd6:	2b30      	cmp	r3, #48	; 0x30
 8003fd8:	d013      	beq.n	8004002 <UART_SetConfig+0x16e>
 8003fda:	2b30      	cmp	r3, #48	; 0x30
 8003fdc:	d814      	bhi.n	8004008 <UART_SetConfig+0x174>
 8003fde:	2b20      	cmp	r3, #32
 8003fe0:	d009      	beq.n	8003ff6 <UART_SetConfig+0x162>
 8003fe2:	2b20      	cmp	r3, #32
 8003fe4:	d810      	bhi.n	8004008 <UART_SetConfig+0x174>
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d002      	beq.n	8003ff0 <UART_SetConfig+0x15c>
 8003fea:	2b10      	cmp	r3, #16
 8003fec:	d006      	beq.n	8003ffc <UART_SetConfig+0x168>
 8003fee:	e00b      	b.n	8004008 <UART_SetConfig+0x174>
 8003ff0:	2300      	movs	r3, #0
 8003ff2:	77fb      	strb	r3, [r7, #31]
 8003ff4:	e0f2      	b.n	80041dc <UART_SetConfig+0x348>
 8003ff6:	2302      	movs	r3, #2
 8003ff8:	77fb      	strb	r3, [r7, #31]
 8003ffa:	e0ef      	b.n	80041dc <UART_SetConfig+0x348>
 8003ffc:	2304      	movs	r3, #4
 8003ffe:	77fb      	strb	r3, [r7, #31]
 8004000:	e0ec      	b.n	80041dc <UART_SetConfig+0x348>
 8004002:	2308      	movs	r3, #8
 8004004:	77fb      	strb	r3, [r7, #31]
 8004006:	e0e9      	b.n	80041dc <UART_SetConfig+0x348>
 8004008:	2310      	movs	r3, #16
 800400a:	77fb      	strb	r3, [r7, #31]
 800400c:	e0e6      	b.n	80041dc <UART_SetConfig+0x348>
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	4a56      	ldr	r2, [pc, #344]	; (800416c <UART_SetConfig+0x2d8>)
 8004014:	4293      	cmp	r3, r2
 8004016:	d120      	bne.n	800405a <UART_SetConfig+0x1c6>
 8004018:	4b51      	ldr	r3, [pc, #324]	; (8004160 <UART_SetConfig+0x2cc>)
 800401a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800401e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004022:	2bc0      	cmp	r3, #192	; 0xc0
 8004024:	d013      	beq.n	800404e <UART_SetConfig+0x1ba>
 8004026:	2bc0      	cmp	r3, #192	; 0xc0
 8004028:	d814      	bhi.n	8004054 <UART_SetConfig+0x1c0>
 800402a:	2b80      	cmp	r3, #128	; 0x80
 800402c:	d009      	beq.n	8004042 <UART_SetConfig+0x1ae>
 800402e:	2b80      	cmp	r3, #128	; 0x80
 8004030:	d810      	bhi.n	8004054 <UART_SetConfig+0x1c0>
 8004032:	2b00      	cmp	r3, #0
 8004034:	d002      	beq.n	800403c <UART_SetConfig+0x1a8>
 8004036:	2b40      	cmp	r3, #64	; 0x40
 8004038:	d006      	beq.n	8004048 <UART_SetConfig+0x1b4>
 800403a:	e00b      	b.n	8004054 <UART_SetConfig+0x1c0>
 800403c:	2300      	movs	r3, #0
 800403e:	77fb      	strb	r3, [r7, #31]
 8004040:	e0cc      	b.n	80041dc <UART_SetConfig+0x348>
 8004042:	2302      	movs	r3, #2
 8004044:	77fb      	strb	r3, [r7, #31]
 8004046:	e0c9      	b.n	80041dc <UART_SetConfig+0x348>
 8004048:	2304      	movs	r3, #4
 800404a:	77fb      	strb	r3, [r7, #31]
 800404c:	e0c6      	b.n	80041dc <UART_SetConfig+0x348>
 800404e:	2308      	movs	r3, #8
 8004050:	77fb      	strb	r3, [r7, #31]
 8004052:	e0c3      	b.n	80041dc <UART_SetConfig+0x348>
 8004054:	2310      	movs	r3, #16
 8004056:	77fb      	strb	r3, [r7, #31]
 8004058:	e0c0      	b.n	80041dc <UART_SetConfig+0x348>
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	4a44      	ldr	r2, [pc, #272]	; (8004170 <UART_SetConfig+0x2dc>)
 8004060:	4293      	cmp	r3, r2
 8004062:	d125      	bne.n	80040b0 <UART_SetConfig+0x21c>
 8004064:	4b3e      	ldr	r3, [pc, #248]	; (8004160 <UART_SetConfig+0x2cc>)
 8004066:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800406a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800406e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004072:	d017      	beq.n	80040a4 <UART_SetConfig+0x210>
 8004074:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004078:	d817      	bhi.n	80040aa <UART_SetConfig+0x216>
 800407a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800407e:	d00b      	beq.n	8004098 <UART_SetConfig+0x204>
 8004080:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004084:	d811      	bhi.n	80040aa <UART_SetConfig+0x216>
 8004086:	2b00      	cmp	r3, #0
 8004088:	d003      	beq.n	8004092 <UART_SetConfig+0x1fe>
 800408a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800408e:	d006      	beq.n	800409e <UART_SetConfig+0x20a>
 8004090:	e00b      	b.n	80040aa <UART_SetConfig+0x216>
 8004092:	2300      	movs	r3, #0
 8004094:	77fb      	strb	r3, [r7, #31]
 8004096:	e0a1      	b.n	80041dc <UART_SetConfig+0x348>
 8004098:	2302      	movs	r3, #2
 800409a:	77fb      	strb	r3, [r7, #31]
 800409c:	e09e      	b.n	80041dc <UART_SetConfig+0x348>
 800409e:	2304      	movs	r3, #4
 80040a0:	77fb      	strb	r3, [r7, #31]
 80040a2:	e09b      	b.n	80041dc <UART_SetConfig+0x348>
 80040a4:	2308      	movs	r3, #8
 80040a6:	77fb      	strb	r3, [r7, #31]
 80040a8:	e098      	b.n	80041dc <UART_SetConfig+0x348>
 80040aa:	2310      	movs	r3, #16
 80040ac:	77fb      	strb	r3, [r7, #31]
 80040ae:	e095      	b.n	80041dc <UART_SetConfig+0x348>
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	4a2f      	ldr	r2, [pc, #188]	; (8004174 <UART_SetConfig+0x2e0>)
 80040b6:	4293      	cmp	r3, r2
 80040b8:	d125      	bne.n	8004106 <UART_SetConfig+0x272>
 80040ba:	4b29      	ldr	r3, [pc, #164]	; (8004160 <UART_SetConfig+0x2cc>)
 80040bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040c0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80040c4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80040c8:	d017      	beq.n	80040fa <UART_SetConfig+0x266>
 80040ca:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80040ce:	d817      	bhi.n	8004100 <UART_SetConfig+0x26c>
 80040d0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80040d4:	d00b      	beq.n	80040ee <UART_SetConfig+0x25a>
 80040d6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80040da:	d811      	bhi.n	8004100 <UART_SetConfig+0x26c>
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d003      	beq.n	80040e8 <UART_SetConfig+0x254>
 80040e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80040e4:	d006      	beq.n	80040f4 <UART_SetConfig+0x260>
 80040e6:	e00b      	b.n	8004100 <UART_SetConfig+0x26c>
 80040e8:	2301      	movs	r3, #1
 80040ea:	77fb      	strb	r3, [r7, #31]
 80040ec:	e076      	b.n	80041dc <UART_SetConfig+0x348>
 80040ee:	2302      	movs	r3, #2
 80040f0:	77fb      	strb	r3, [r7, #31]
 80040f2:	e073      	b.n	80041dc <UART_SetConfig+0x348>
 80040f4:	2304      	movs	r3, #4
 80040f6:	77fb      	strb	r3, [r7, #31]
 80040f8:	e070      	b.n	80041dc <UART_SetConfig+0x348>
 80040fa:	2308      	movs	r3, #8
 80040fc:	77fb      	strb	r3, [r7, #31]
 80040fe:	e06d      	b.n	80041dc <UART_SetConfig+0x348>
 8004100:	2310      	movs	r3, #16
 8004102:	77fb      	strb	r3, [r7, #31]
 8004104:	e06a      	b.n	80041dc <UART_SetConfig+0x348>
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	4a1b      	ldr	r2, [pc, #108]	; (8004178 <UART_SetConfig+0x2e4>)
 800410c:	4293      	cmp	r3, r2
 800410e:	d138      	bne.n	8004182 <UART_SetConfig+0x2ee>
 8004110:	4b13      	ldr	r3, [pc, #76]	; (8004160 <UART_SetConfig+0x2cc>)
 8004112:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004116:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800411a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800411e:	d017      	beq.n	8004150 <UART_SetConfig+0x2bc>
 8004120:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004124:	d82a      	bhi.n	800417c <UART_SetConfig+0x2e8>
 8004126:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800412a:	d00b      	beq.n	8004144 <UART_SetConfig+0x2b0>
 800412c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004130:	d824      	bhi.n	800417c <UART_SetConfig+0x2e8>
 8004132:	2b00      	cmp	r3, #0
 8004134:	d003      	beq.n	800413e <UART_SetConfig+0x2aa>
 8004136:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800413a:	d006      	beq.n	800414a <UART_SetConfig+0x2b6>
 800413c:	e01e      	b.n	800417c <UART_SetConfig+0x2e8>
 800413e:	2300      	movs	r3, #0
 8004140:	77fb      	strb	r3, [r7, #31]
 8004142:	e04b      	b.n	80041dc <UART_SetConfig+0x348>
 8004144:	2302      	movs	r3, #2
 8004146:	77fb      	strb	r3, [r7, #31]
 8004148:	e048      	b.n	80041dc <UART_SetConfig+0x348>
 800414a:	2304      	movs	r3, #4
 800414c:	77fb      	strb	r3, [r7, #31]
 800414e:	e045      	b.n	80041dc <UART_SetConfig+0x348>
 8004150:	2308      	movs	r3, #8
 8004152:	77fb      	strb	r3, [r7, #31]
 8004154:	e042      	b.n	80041dc <UART_SetConfig+0x348>
 8004156:	bf00      	nop
 8004158:	efff69f3 	.word	0xefff69f3
 800415c:	40011000 	.word	0x40011000
 8004160:	40023800 	.word	0x40023800
 8004164:	40004400 	.word	0x40004400
 8004168:	40004800 	.word	0x40004800
 800416c:	40004c00 	.word	0x40004c00
 8004170:	40005000 	.word	0x40005000
 8004174:	40011400 	.word	0x40011400
 8004178:	40007800 	.word	0x40007800
 800417c:	2310      	movs	r3, #16
 800417e:	77fb      	strb	r3, [r7, #31]
 8004180:	e02c      	b.n	80041dc <UART_SetConfig+0x348>
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	4a72      	ldr	r2, [pc, #456]	; (8004350 <UART_SetConfig+0x4bc>)
 8004188:	4293      	cmp	r3, r2
 800418a:	d125      	bne.n	80041d8 <UART_SetConfig+0x344>
 800418c:	4b71      	ldr	r3, [pc, #452]	; (8004354 <UART_SetConfig+0x4c0>)
 800418e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004192:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004196:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800419a:	d017      	beq.n	80041cc <UART_SetConfig+0x338>
 800419c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80041a0:	d817      	bhi.n	80041d2 <UART_SetConfig+0x33e>
 80041a2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80041a6:	d00b      	beq.n	80041c0 <UART_SetConfig+0x32c>
 80041a8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80041ac:	d811      	bhi.n	80041d2 <UART_SetConfig+0x33e>
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d003      	beq.n	80041ba <UART_SetConfig+0x326>
 80041b2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80041b6:	d006      	beq.n	80041c6 <UART_SetConfig+0x332>
 80041b8:	e00b      	b.n	80041d2 <UART_SetConfig+0x33e>
 80041ba:	2300      	movs	r3, #0
 80041bc:	77fb      	strb	r3, [r7, #31]
 80041be:	e00d      	b.n	80041dc <UART_SetConfig+0x348>
 80041c0:	2302      	movs	r3, #2
 80041c2:	77fb      	strb	r3, [r7, #31]
 80041c4:	e00a      	b.n	80041dc <UART_SetConfig+0x348>
 80041c6:	2304      	movs	r3, #4
 80041c8:	77fb      	strb	r3, [r7, #31]
 80041ca:	e007      	b.n	80041dc <UART_SetConfig+0x348>
 80041cc:	2308      	movs	r3, #8
 80041ce:	77fb      	strb	r3, [r7, #31]
 80041d0:	e004      	b.n	80041dc <UART_SetConfig+0x348>
 80041d2:	2310      	movs	r3, #16
 80041d4:	77fb      	strb	r3, [r7, #31]
 80041d6:	e001      	b.n	80041dc <UART_SetConfig+0x348>
 80041d8:	2310      	movs	r3, #16
 80041da:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	69db      	ldr	r3, [r3, #28]
 80041e0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80041e4:	d15b      	bne.n	800429e <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 80041e6:	7ffb      	ldrb	r3, [r7, #31]
 80041e8:	2b08      	cmp	r3, #8
 80041ea:	d828      	bhi.n	800423e <UART_SetConfig+0x3aa>
 80041ec:	a201      	add	r2, pc, #4	; (adr r2, 80041f4 <UART_SetConfig+0x360>)
 80041ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041f2:	bf00      	nop
 80041f4:	08004219 	.word	0x08004219
 80041f8:	08004221 	.word	0x08004221
 80041fc:	08004229 	.word	0x08004229
 8004200:	0800423f 	.word	0x0800423f
 8004204:	0800422f 	.word	0x0800422f
 8004208:	0800423f 	.word	0x0800423f
 800420c:	0800423f 	.word	0x0800423f
 8004210:	0800423f 	.word	0x0800423f
 8004214:	08004237 	.word	0x08004237
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004218:	f7fe fc48 	bl	8002aac <HAL_RCC_GetPCLK1Freq>
 800421c:	61b8      	str	r0, [r7, #24]
        break;
 800421e:	e013      	b.n	8004248 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004220:	f7fe fc58 	bl	8002ad4 <HAL_RCC_GetPCLK2Freq>
 8004224:	61b8      	str	r0, [r7, #24]
        break;
 8004226:	e00f      	b.n	8004248 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004228:	4b4b      	ldr	r3, [pc, #300]	; (8004358 <UART_SetConfig+0x4c4>)
 800422a:	61bb      	str	r3, [r7, #24]
        break;
 800422c:	e00c      	b.n	8004248 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800422e:	f7fe fb2b 	bl	8002888 <HAL_RCC_GetSysClockFreq>
 8004232:	61b8      	str	r0, [r7, #24]
        break;
 8004234:	e008      	b.n	8004248 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004236:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800423a:	61bb      	str	r3, [r7, #24]
        break;
 800423c:	e004      	b.n	8004248 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800423e:	2300      	movs	r3, #0
 8004240:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004242:	2301      	movs	r3, #1
 8004244:	77bb      	strb	r3, [r7, #30]
        break;
 8004246:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004248:	69bb      	ldr	r3, [r7, #24]
 800424a:	2b00      	cmp	r3, #0
 800424c:	d074      	beq.n	8004338 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800424e:	69bb      	ldr	r3, [r7, #24]
 8004250:	005a      	lsls	r2, r3, #1
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	685b      	ldr	r3, [r3, #4]
 8004256:	085b      	lsrs	r3, r3, #1
 8004258:	441a      	add	r2, r3
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	685b      	ldr	r3, [r3, #4]
 800425e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004262:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004264:	693b      	ldr	r3, [r7, #16]
 8004266:	2b0f      	cmp	r3, #15
 8004268:	d916      	bls.n	8004298 <UART_SetConfig+0x404>
 800426a:	693b      	ldr	r3, [r7, #16]
 800426c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004270:	d212      	bcs.n	8004298 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004272:	693b      	ldr	r3, [r7, #16]
 8004274:	b29b      	uxth	r3, r3
 8004276:	f023 030f 	bic.w	r3, r3, #15
 800427a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800427c:	693b      	ldr	r3, [r7, #16]
 800427e:	085b      	lsrs	r3, r3, #1
 8004280:	b29b      	uxth	r3, r3
 8004282:	f003 0307 	and.w	r3, r3, #7
 8004286:	b29a      	uxth	r2, r3
 8004288:	89fb      	ldrh	r3, [r7, #14]
 800428a:	4313      	orrs	r3, r2
 800428c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	89fa      	ldrh	r2, [r7, #14]
 8004294:	60da      	str	r2, [r3, #12]
 8004296:	e04f      	b.n	8004338 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004298:	2301      	movs	r3, #1
 800429a:	77bb      	strb	r3, [r7, #30]
 800429c:	e04c      	b.n	8004338 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800429e:	7ffb      	ldrb	r3, [r7, #31]
 80042a0:	2b08      	cmp	r3, #8
 80042a2:	d828      	bhi.n	80042f6 <UART_SetConfig+0x462>
 80042a4:	a201      	add	r2, pc, #4	; (adr r2, 80042ac <UART_SetConfig+0x418>)
 80042a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042aa:	bf00      	nop
 80042ac:	080042d1 	.word	0x080042d1
 80042b0:	080042d9 	.word	0x080042d9
 80042b4:	080042e1 	.word	0x080042e1
 80042b8:	080042f7 	.word	0x080042f7
 80042bc:	080042e7 	.word	0x080042e7
 80042c0:	080042f7 	.word	0x080042f7
 80042c4:	080042f7 	.word	0x080042f7
 80042c8:	080042f7 	.word	0x080042f7
 80042cc:	080042ef 	.word	0x080042ef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80042d0:	f7fe fbec 	bl	8002aac <HAL_RCC_GetPCLK1Freq>
 80042d4:	61b8      	str	r0, [r7, #24]
        break;
 80042d6:	e013      	b.n	8004300 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80042d8:	f7fe fbfc 	bl	8002ad4 <HAL_RCC_GetPCLK2Freq>
 80042dc:	61b8      	str	r0, [r7, #24]
        break;
 80042de:	e00f      	b.n	8004300 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80042e0:	4b1d      	ldr	r3, [pc, #116]	; (8004358 <UART_SetConfig+0x4c4>)
 80042e2:	61bb      	str	r3, [r7, #24]
        break;
 80042e4:	e00c      	b.n	8004300 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80042e6:	f7fe facf 	bl	8002888 <HAL_RCC_GetSysClockFreq>
 80042ea:	61b8      	str	r0, [r7, #24]
        break;
 80042ec:	e008      	b.n	8004300 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80042ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80042f2:	61bb      	str	r3, [r7, #24]
        break;
 80042f4:	e004      	b.n	8004300 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 80042f6:	2300      	movs	r3, #0
 80042f8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80042fa:	2301      	movs	r3, #1
 80042fc:	77bb      	strb	r3, [r7, #30]
        break;
 80042fe:	bf00      	nop
    }

    if (pclk != 0U)
 8004300:	69bb      	ldr	r3, [r7, #24]
 8004302:	2b00      	cmp	r3, #0
 8004304:	d018      	beq.n	8004338 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	685b      	ldr	r3, [r3, #4]
 800430a:	085a      	lsrs	r2, r3, #1
 800430c:	69bb      	ldr	r3, [r7, #24]
 800430e:	441a      	add	r2, r3
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	685b      	ldr	r3, [r3, #4]
 8004314:	fbb2 f3f3 	udiv	r3, r2, r3
 8004318:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800431a:	693b      	ldr	r3, [r7, #16]
 800431c:	2b0f      	cmp	r3, #15
 800431e:	d909      	bls.n	8004334 <UART_SetConfig+0x4a0>
 8004320:	693b      	ldr	r3, [r7, #16]
 8004322:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004326:	d205      	bcs.n	8004334 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004328:	693b      	ldr	r3, [r7, #16]
 800432a:	b29a      	uxth	r2, r3
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	60da      	str	r2, [r3, #12]
 8004332:	e001      	b.n	8004338 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004334:	2301      	movs	r3, #1
 8004336:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	2200      	movs	r2, #0
 800433c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	2200      	movs	r2, #0
 8004342:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8004344:	7fbb      	ldrb	r3, [r7, #30]
}
 8004346:	4618      	mov	r0, r3
 8004348:	3720      	adds	r7, #32
 800434a:	46bd      	mov	sp, r7
 800434c:	bd80      	pop	{r7, pc}
 800434e:	bf00      	nop
 8004350:	40007c00 	.word	0x40007c00
 8004354:	40023800 	.word	0x40023800
 8004358:	00f42400 	.word	0x00f42400

0800435c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800435c:	b480      	push	{r7}
 800435e:	b083      	sub	sp, #12
 8004360:	af00      	add	r7, sp, #0
 8004362:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004368:	f003 0301 	and.w	r3, r3, #1
 800436c:	2b00      	cmp	r3, #0
 800436e:	d00a      	beq.n	8004386 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	685b      	ldr	r3, [r3, #4]
 8004376:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	430a      	orrs	r2, r1
 8004384:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800438a:	f003 0302 	and.w	r3, r3, #2
 800438e:	2b00      	cmp	r3, #0
 8004390:	d00a      	beq.n	80043a8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	685b      	ldr	r3, [r3, #4]
 8004398:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	430a      	orrs	r2, r1
 80043a6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043ac:	f003 0304 	and.w	r3, r3, #4
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d00a      	beq.n	80043ca <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	685b      	ldr	r3, [r3, #4]
 80043ba:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	430a      	orrs	r2, r1
 80043c8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043ce:	f003 0308 	and.w	r3, r3, #8
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d00a      	beq.n	80043ec <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	685b      	ldr	r3, [r3, #4]
 80043dc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	430a      	orrs	r2, r1
 80043ea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043f0:	f003 0310 	and.w	r3, r3, #16
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d00a      	beq.n	800440e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	689b      	ldr	r3, [r3, #8]
 80043fe:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	430a      	orrs	r2, r1
 800440c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004412:	f003 0320 	and.w	r3, r3, #32
 8004416:	2b00      	cmp	r3, #0
 8004418:	d00a      	beq.n	8004430 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	689b      	ldr	r3, [r3, #8]
 8004420:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	430a      	orrs	r2, r1
 800442e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004434:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004438:	2b00      	cmp	r3, #0
 800443a:	d01a      	beq.n	8004472 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	685b      	ldr	r3, [r3, #4]
 8004442:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	430a      	orrs	r2, r1
 8004450:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004456:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800445a:	d10a      	bne.n	8004472 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	685b      	ldr	r3, [r3, #4]
 8004462:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	430a      	orrs	r2, r1
 8004470:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004476:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800447a:	2b00      	cmp	r3, #0
 800447c:	d00a      	beq.n	8004494 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	685b      	ldr	r3, [r3, #4]
 8004484:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	430a      	orrs	r2, r1
 8004492:	605a      	str	r2, [r3, #4]
  }
}
 8004494:	bf00      	nop
 8004496:	370c      	adds	r7, #12
 8004498:	46bd      	mov	sp, r7
 800449a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800449e:	4770      	bx	lr

080044a0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80044a0:	b580      	push	{r7, lr}
 80044a2:	b086      	sub	sp, #24
 80044a4:	af02      	add	r7, sp, #8
 80044a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	2200      	movs	r2, #0
 80044ac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80044b0:	f7fc fe7a 	bl	80011a8 <HAL_GetTick>
 80044b4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f003 0308 	and.w	r3, r3, #8
 80044c0:	2b08      	cmp	r3, #8
 80044c2:	d10e      	bne.n	80044e2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80044c4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80044c8:	9300      	str	r3, [sp, #0]
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	2200      	movs	r2, #0
 80044ce:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80044d2:	6878      	ldr	r0, [r7, #4]
 80044d4:	f000 f831 	bl	800453a <UART_WaitOnFlagUntilTimeout>
 80044d8:	4603      	mov	r3, r0
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d001      	beq.n	80044e2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80044de:	2303      	movs	r3, #3
 80044e0:	e027      	b.n	8004532 <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f003 0304 	and.w	r3, r3, #4
 80044ec:	2b04      	cmp	r3, #4
 80044ee:	d10e      	bne.n	800450e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80044f0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80044f4:	9300      	str	r3, [sp, #0]
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	2200      	movs	r2, #0
 80044fa:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80044fe:	6878      	ldr	r0, [r7, #4]
 8004500:	f000 f81b 	bl	800453a <UART_WaitOnFlagUntilTimeout>
 8004504:	4603      	mov	r3, r0
 8004506:	2b00      	cmp	r3, #0
 8004508:	d001      	beq.n	800450e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800450a:	2303      	movs	r3, #3
 800450c:	e011      	b.n	8004532 <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	2220      	movs	r2, #32
 8004512:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	2220      	movs	r2, #32
 8004518:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	2200      	movs	r2, #0
 8004520:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	2200      	movs	r2, #0
 8004526:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	2200      	movs	r2, #0
 800452c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8004530:	2300      	movs	r3, #0
}
 8004532:	4618      	mov	r0, r3
 8004534:	3710      	adds	r7, #16
 8004536:	46bd      	mov	sp, r7
 8004538:	bd80      	pop	{r7, pc}

0800453a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800453a:	b580      	push	{r7, lr}
 800453c:	b09c      	sub	sp, #112	; 0x70
 800453e:	af00      	add	r7, sp, #0
 8004540:	60f8      	str	r0, [r7, #12]
 8004542:	60b9      	str	r1, [r7, #8]
 8004544:	603b      	str	r3, [r7, #0]
 8004546:	4613      	mov	r3, r2
 8004548:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800454a:	e0a7      	b.n	800469c <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800454c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800454e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004552:	f000 80a3 	beq.w	800469c <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004556:	f7fc fe27 	bl	80011a8 <HAL_GetTick>
 800455a:	4602      	mov	r2, r0
 800455c:	683b      	ldr	r3, [r7, #0]
 800455e:	1ad3      	subs	r3, r2, r3
 8004560:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004562:	429a      	cmp	r2, r3
 8004564:	d302      	bcc.n	800456c <UART_WaitOnFlagUntilTimeout+0x32>
 8004566:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004568:	2b00      	cmp	r3, #0
 800456a:	d13f      	bne.n	80045ec <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004572:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004574:	e853 3f00 	ldrex	r3, [r3]
 8004578:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800457a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800457c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004580:	667b      	str	r3, [r7, #100]	; 0x64
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	461a      	mov	r2, r3
 8004588:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800458a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800458c:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800458e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004590:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004592:	e841 2300 	strex	r3, r2, [r1]
 8004596:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004598:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800459a:	2b00      	cmp	r3, #0
 800459c:	d1e6      	bne.n	800456c <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	3308      	adds	r3, #8
 80045a4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80045a8:	e853 3f00 	ldrex	r3, [r3]
 80045ac:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80045ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045b0:	f023 0301 	bic.w	r3, r3, #1
 80045b4:	663b      	str	r3, [r7, #96]	; 0x60
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	3308      	adds	r3, #8
 80045bc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80045be:	64ba      	str	r2, [r7, #72]	; 0x48
 80045c0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045c2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80045c4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80045c6:	e841 2300 	strex	r3, r2, [r1]
 80045ca:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80045cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d1e5      	bne.n	800459e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	2220      	movs	r2, #32
 80045d6:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	2220      	movs	r2, #32
 80045dc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	2200      	movs	r2, #0
 80045e4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 80045e8:	2303      	movs	r3, #3
 80045ea:	e068      	b.n	80046be <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	f003 0304 	and.w	r3, r3, #4
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d050      	beq.n	800469c <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	69db      	ldr	r3, [r3, #28]
 8004600:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004604:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004608:	d148      	bne.n	800469c <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004612:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800461a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800461c:	e853 3f00 	ldrex	r3, [r3]
 8004620:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004624:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004628:	66fb      	str	r3, [r7, #108]	; 0x6c
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	461a      	mov	r2, r3
 8004630:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004632:	637b      	str	r3, [r7, #52]	; 0x34
 8004634:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004636:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004638:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800463a:	e841 2300 	strex	r3, r2, [r1]
 800463e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004640:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004642:	2b00      	cmp	r3, #0
 8004644:	d1e6      	bne.n	8004614 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	3308      	adds	r3, #8
 800464c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800464e:	697b      	ldr	r3, [r7, #20]
 8004650:	e853 3f00 	ldrex	r3, [r3]
 8004654:	613b      	str	r3, [r7, #16]
   return(result);
 8004656:	693b      	ldr	r3, [r7, #16]
 8004658:	f023 0301 	bic.w	r3, r3, #1
 800465c:	66bb      	str	r3, [r7, #104]	; 0x68
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	3308      	adds	r3, #8
 8004664:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004666:	623a      	str	r2, [r7, #32]
 8004668:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800466a:	69f9      	ldr	r1, [r7, #28]
 800466c:	6a3a      	ldr	r2, [r7, #32]
 800466e:	e841 2300 	strex	r3, r2, [r1]
 8004672:	61bb      	str	r3, [r7, #24]
   return(result);
 8004674:	69bb      	ldr	r3, [r7, #24]
 8004676:	2b00      	cmp	r3, #0
 8004678:	d1e5      	bne.n	8004646 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	2220      	movs	r2, #32
 800467e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	2220      	movs	r2, #32
 8004684:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	2220      	movs	r2, #32
 800468c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	2200      	movs	r2, #0
 8004694:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8004698:	2303      	movs	r3, #3
 800469a:	e010      	b.n	80046be <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	69da      	ldr	r2, [r3, #28]
 80046a2:	68bb      	ldr	r3, [r7, #8]
 80046a4:	4013      	ands	r3, r2
 80046a6:	68ba      	ldr	r2, [r7, #8]
 80046a8:	429a      	cmp	r2, r3
 80046aa:	bf0c      	ite	eq
 80046ac:	2301      	moveq	r3, #1
 80046ae:	2300      	movne	r3, #0
 80046b0:	b2db      	uxtb	r3, r3
 80046b2:	461a      	mov	r2, r3
 80046b4:	79fb      	ldrb	r3, [r7, #7]
 80046b6:	429a      	cmp	r2, r3
 80046b8:	f43f af48 	beq.w	800454c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80046bc:	2300      	movs	r3, #0
}
 80046be:	4618      	mov	r0, r3
 80046c0:	3770      	adds	r7, #112	; 0x70
 80046c2:	46bd      	mov	sp, r7
 80046c4:	bd80      	pop	{r7, pc}
	...

080046c8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80046c8:	b084      	sub	sp, #16
 80046ca:	b580      	push	{r7, lr}
 80046cc:	b084      	sub	sp, #16
 80046ce:	af00      	add	r7, sp, #0
 80046d0:	6078      	str	r0, [r7, #4]
 80046d2:	f107 001c 	add.w	r0, r7, #28
 80046d6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80046da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046dc:	2b01      	cmp	r3, #1
 80046de:	d120      	bne.n	8004722 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046e4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	68da      	ldr	r2, [r3, #12]
 80046f0:	4b20      	ldr	r3, [pc, #128]	; (8004774 <USB_CoreInit+0xac>)
 80046f2:	4013      	ands	r3, r2
 80046f4:	687a      	ldr	r2, [r7, #4]
 80046f6:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	68db      	ldr	r3, [r3, #12]
 80046fc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004704:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004706:	2b01      	cmp	r3, #1
 8004708:	d105      	bne.n	8004716 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	68db      	ldr	r3, [r3, #12]
 800470e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004716:	6878      	ldr	r0, [r7, #4]
 8004718:	f000 fa96 	bl	8004c48 <USB_CoreReset>
 800471c:	4603      	mov	r3, r0
 800471e:	73fb      	strb	r3, [r7, #15]
 8004720:	e010      	b.n	8004744 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	68db      	ldr	r3, [r3, #12]
 8004726:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800472e:	6878      	ldr	r0, [r7, #4]
 8004730:	f000 fa8a 	bl	8004c48 <USB_CoreReset>
 8004734:	4603      	mov	r3, r0
 8004736:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800473c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8004744:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004746:	2b01      	cmp	r3, #1
 8004748:	d10b      	bne.n	8004762 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	689b      	ldr	r3, [r3, #8]
 800474e:	f043 0206 	orr.w	r2, r3, #6
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	689b      	ldr	r3, [r3, #8]
 800475a:	f043 0220 	orr.w	r2, r3, #32
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004762:	7bfb      	ldrb	r3, [r7, #15]
}
 8004764:	4618      	mov	r0, r3
 8004766:	3710      	adds	r7, #16
 8004768:	46bd      	mov	sp, r7
 800476a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800476e:	b004      	add	sp, #16
 8004770:	4770      	bx	lr
 8004772:	bf00      	nop
 8004774:	ffbdffbf 	.word	0xffbdffbf

08004778 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004778:	b480      	push	{r7}
 800477a:	b083      	sub	sp, #12
 800477c:	af00      	add	r7, sp, #0
 800477e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	689b      	ldr	r3, [r3, #8]
 8004784:	f023 0201 	bic.w	r2, r3, #1
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800478c:	2300      	movs	r3, #0
}
 800478e:	4618      	mov	r0, r3
 8004790:	370c      	adds	r7, #12
 8004792:	46bd      	mov	sp, r7
 8004794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004798:	4770      	bx	lr

0800479a <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800479a:	b580      	push	{r7, lr}
 800479c:	b084      	sub	sp, #16
 800479e:	af00      	add	r7, sp, #0
 80047a0:	6078      	str	r0, [r7, #4]
 80047a2:	460b      	mov	r3, r1
 80047a4:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80047a6:	2300      	movs	r3, #0
 80047a8:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	68db      	ldr	r3, [r3, #12]
 80047ae:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80047b6:	78fb      	ldrb	r3, [r7, #3]
 80047b8:	2b01      	cmp	r3, #1
 80047ba:	d115      	bne.n	80047e8 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	68db      	ldr	r3, [r3, #12]
 80047c0:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80047c8:	2001      	movs	r0, #1
 80047ca:	f7fc fcf9 	bl	80011c0 <HAL_Delay>
      ms++;
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	3301      	adds	r3, #1
 80047d2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80047d4:	6878      	ldr	r0, [r7, #4]
 80047d6:	f000 fa29 	bl	8004c2c <USB_GetMode>
 80047da:	4603      	mov	r3, r0
 80047dc:	2b01      	cmp	r3, #1
 80047de:	d01e      	beq.n	800481e <USB_SetCurrentMode+0x84>
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	2b31      	cmp	r3, #49	; 0x31
 80047e4:	d9f0      	bls.n	80047c8 <USB_SetCurrentMode+0x2e>
 80047e6:	e01a      	b.n	800481e <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80047e8:	78fb      	ldrb	r3, [r7, #3]
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d115      	bne.n	800481a <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	68db      	ldr	r3, [r3, #12]
 80047f2:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80047fa:	2001      	movs	r0, #1
 80047fc:	f7fc fce0 	bl	80011c0 <HAL_Delay>
      ms++;
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	3301      	adds	r3, #1
 8004804:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8004806:	6878      	ldr	r0, [r7, #4]
 8004808:	f000 fa10 	bl	8004c2c <USB_GetMode>
 800480c:	4603      	mov	r3, r0
 800480e:	2b00      	cmp	r3, #0
 8004810:	d005      	beq.n	800481e <USB_SetCurrentMode+0x84>
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	2b31      	cmp	r3, #49	; 0x31
 8004816:	d9f0      	bls.n	80047fa <USB_SetCurrentMode+0x60>
 8004818:	e001      	b.n	800481e <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800481a:	2301      	movs	r3, #1
 800481c:	e005      	b.n	800482a <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	2b32      	cmp	r3, #50	; 0x32
 8004822:	d101      	bne.n	8004828 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004824:	2301      	movs	r3, #1
 8004826:	e000      	b.n	800482a <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004828:	2300      	movs	r3, #0
}
 800482a:	4618      	mov	r0, r3
 800482c:	3710      	adds	r7, #16
 800482e:	46bd      	mov	sp, r7
 8004830:	bd80      	pop	{r7, pc}
	...

08004834 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004834:	b084      	sub	sp, #16
 8004836:	b580      	push	{r7, lr}
 8004838:	b086      	sub	sp, #24
 800483a:	af00      	add	r7, sp, #0
 800483c:	6078      	str	r0, [r7, #4]
 800483e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004842:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004846:	2300      	movs	r3, #0
 8004848:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800484e:	2300      	movs	r3, #0
 8004850:	613b      	str	r3, [r7, #16]
 8004852:	e009      	b.n	8004868 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004854:	687a      	ldr	r2, [r7, #4]
 8004856:	693b      	ldr	r3, [r7, #16]
 8004858:	3340      	adds	r3, #64	; 0x40
 800485a:	009b      	lsls	r3, r3, #2
 800485c:	4413      	add	r3, r2
 800485e:	2200      	movs	r2, #0
 8004860:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004862:	693b      	ldr	r3, [r7, #16]
 8004864:	3301      	adds	r3, #1
 8004866:	613b      	str	r3, [r7, #16]
 8004868:	693b      	ldr	r3, [r7, #16]
 800486a:	2b0e      	cmp	r3, #14
 800486c:	d9f2      	bls.n	8004854 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800486e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004870:	2b00      	cmp	r3, #0
 8004872:	d11c      	bne.n	80048ae <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800487a:	685b      	ldr	r3, [r3, #4]
 800487c:	68fa      	ldr	r2, [r7, #12]
 800487e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004882:	f043 0302 	orr.w	r3, r3, #2
 8004886:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800488c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	601a      	str	r2, [r3, #0]
 80048ac:	e005      	b.n	80048ba <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048b2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80048c0:	461a      	mov	r2, r3
 80048c2:	2300      	movs	r3, #0
 80048c4:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048cc:	4619      	mov	r1, r3
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048d4:	461a      	mov	r2, r3
 80048d6:	680b      	ldr	r3, [r1, #0]
 80048d8:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80048da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048dc:	2b01      	cmp	r3, #1
 80048de:	d10c      	bne.n	80048fa <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80048e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d104      	bne.n	80048f0 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80048e6:	2100      	movs	r1, #0
 80048e8:	6878      	ldr	r0, [r7, #4]
 80048ea:	f000 f965 	bl	8004bb8 <USB_SetDevSpeed>
 80048ee:	e008      	b.n	8004902 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80048f0:	2101      	movs	r1, #1
 80048f2:	6878      	ldr	r0, [r7, #4]
 80048f4:	f000 f960 	bl	8004bb8 <USB_SetDevSpeed>
 80048f8:	e003      	b.n	8004902 <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80048fa:	2103      	movs	r1, #3
 80048fc:	6878      	ldr	r0, [r7, #4]
 80048fe:	f000 f95b 	bl	8004bb8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004902:	2110      	movs	r1, #16
 8004904:	6878      	ldr	r0, [r7, #4]
 8004906:	f000 f8f3 	bl	8004af0 <USB_FlushTxFifo>
 800490a:	4603      	mov	r3, r0
 800490c:	2b00      	cmp	r3, #0
 800490e:	d001      	beq.n	8004914 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8004910:	2301      	movs	r3, #1
 8004912:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004914:	6878      	ldr	r0, [r7, #4]
 8004916:	f000 f91f 	bl	8004b58 <USB_FlushRxFifo>
 800491a:	4603      	mov	r3, r0
 800491c:	2b00      	cmp	r3, #0
 800491e:	d001      	beq.n	8004924 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8004920:	2301      	movs	r3, #1
 8004922:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800492a:	461a      	mov	r2, r3
 800492c:	2300      	movs	r3, #0
 800492e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004936:	461a      	mov	r2, r3
 8004938:	2300      	movs	r3, #0
 800493a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004942:	461a      	mov	r2, r3
 8004944:	2300      	movs	r3, #0
 8004946:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004948:	2300      	movs	r3, #0
 800494a:	613b      	str	r3, [r7, #16]
 800494c:	e043      	b.n	80049d6 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800494e:	693b      	ldr	r3, [r7, #16]
 8004950:	015a      	lsls	r2, r3, #5
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	4413      	add	r3, r2
 8004956:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004960:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004964:	d118      	bne.n	8004998 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8004966:	693b      	ldr	r3, [r7, #16]
 8004968:	2b00      	cmp	r3, #0
 800496a:	d10a      	bne.n	8004982 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800496c:	693b      	ldr	r3, [r7, #16]
 800496e:	015a      	lsls	r2, r3, #5
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	4413      	add	r3, r2
 8004974:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004978:	461a      	mov	r2, r3
 800497a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800497e:	6013      	str	r3, [r2, #0]
 8004980:	e013      	b.n	80049aa <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004982:	693b      	ldr	r3, [r7, #16]
 8004984:	015a      	lsls	r2, r3, #5
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	4413      	add	r3, r2
 800498a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800498e:	461a      	mov	r2, r3
 8004990:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004994:	6013      	str	r3, [r2, #0]
 8004996:	e008      	b.n	80049aa <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004998:	693b      	ldr	r3, [r7, #16]
 800499a:	015a      	lsls	r2, r3, #5
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	4413      	add	r3, r2
 80049a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049a4:	461a      	mov	r2, r3
 80049a6:	2300      	movs	r3, #0
 80049a8:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80049aa:	693b      	ldr	r3, [r7, #16]
 80049ac:	015a      	lsls	r2, r3, #5
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	4413      	add	r3, r2
 80049b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049b6:	461a      	mov	r2, r3
 80049b8:	2300      	movs	r3, #0
 80049ba:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80049bc:	693b      	ldr	r3, [r7, #16]
 80049be:	015a      	lsls	r2, r3, #5
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	4413      	add	r3, r2
 80049c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049c8:	461a      	mov	r2, r3
 80049ca:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80049ce:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80049d0:	693b      	ldr	r3, [r7, #16]
 80049d2:	3301      	adds	r3, #1
 80049d4:	613b      	str	r3, [r7, #16]
 80049d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049d8:	693a      	ldr	r2, [r7, #16]
 80049da:	429a      	cmp	r2, r3
 80049dc:	d3b7      	bcc.n	800494e <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80049de:	2300      	movs	r3, #0
 80049e0:	613b      	str	r3, [r7, #16]
 80049e2:	e043      	b.n	8004a6c <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80049e4:	693b      	ldr	r3, [r7, #16]
 80049e6:	015a      	lsls	r2, r3, #5
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	4413      	add	r3, r2
 80049ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80049f6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80049fa:	d118      	bne.n	8004a2e <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 80049fc:	693b      	ldr	r3, [r7, #16]
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d10a      	bne.n	8004a18 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004a02:	693b      	ldr	r3, [r7, #16]
 8004a04:	015a      	lsls	r2, r3, #5
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	4413      	add	r3, r2
 8004a0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a0e:	461a      	mov	r2, r3
 8004a10:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004a14:	6013      	str	r3, [r2, #0]
 8004a16:	e013      	b.n	8004a40 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004a18:	693b      	ldr	r3, [r7, #16]
 8004a1a:	015a      	lsls	r2, r3, #5
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	4413      	add	r3, r2
 8004a20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a24:	461a      	mov	r2, r3
 8004a26:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004a2a:	6013      	str	r3, [r2, #0]
 8004a2c:	e008      	b.n	8004a40 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004a2e:	693b      	ldr	r3, [r7, #16]
 8004a30:	015a      	lsls	r2, r3, #5
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	4413      	add	r3, r2
 8004a36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a3a:	461a      	mov	r2, r3
 8004a3c:	2300      	movs	r3, #0
 8004a3e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004a40:	693b      	ldr	r3, [r7, #16]
 8004a42:	015a      	lsls	r2, r3, #5
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	4413      	add	r3, r2
 8004a48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a4c:	461a      	mov	r2, r3
 8004a4e:	2300      	movs	r3, #0
 8004a50:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004a52:	693b      	ldr	r3, [r7, #16]
 8004a54:	015a      	lsls	r2, r3, #5
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	4413      	add	r3, r2
 8004a5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a5e:	461a      	mov	r2, r3
 8004a60:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004a64:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004a66:	693b      	ldr	r3, [r7, #16]
 8004a68:	3301      	adds	r3, #1
 8004a6a:	613b      	str	r3, [r7, #16]
 8004a6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a6e:	693a      	ldr	r2, [r7, #16]
 8004a70:	429a      	cmp	r2, r3
 8004a72:	d3b7      	bcc.n	80049e4 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a7a:	691b      	ldr	r3, [r3, #16]
 8004a7c:	68fa      	ldr	r2, [r7, #12]
 8004a7e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004a82:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004a86:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	2200      	movs	r2, #0
 8004a8c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004a94:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004a96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d105      	bne.n	8004aa8 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	699b      	ldr	r3, [r3, #24]
 8004aa0:	f043 0210 	orr.w	r2, r3, #16
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	699a      	ldr	r2, [r3, #24]
 8004aac:	4b0e      	ldr	r3, [pc, #56]	; (8004ae8 <USB_DevInit+0x2b4>)
 8004aae:	4313      	orrs	r3, r2
 8004ab0:	687a      	ldr	r2, [r7, #4]
 8004ab2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004ab4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d005      	beq.n	8004ac6 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	699b      	ldr	r3, [r3, #24]
 8004abe:	f043 0208 	orr.w	r2, r3, #8
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004ac6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ac8:	2b01      	cmp	r3, #1
 8004aca:	d105      	bne.n	8004ad8 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	699a      	ldr	r2, [r3, #24]
 8004ad0:	4b06      	ldr	r3, [pc, #24]	; (8004aec <USB_DevInit+0x2b8>)
 8004ad2:	4313      	orrs	r3, r2
 8004ad4:	687a      	ldr	r2, [r7, #4]
 8004ad6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004ad8:	7dfb      	ldrb	r3, [r7, #23]
}
 8004ada:	4618      	mov	r0, r3
 8004adc:	3718      	adds	r7, #24
 8004ade:	46bd      	mov	sp, r7
 8004ae0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004ae4:	b004      	add	sp, #16
 8004ae6:	4770      	bx	lr
 8004ae8:	803c3800 	.word	0x803c3800
 8004aec:	40000004 	.word	0x40000004

08004af0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004af0:	b480      	push	{r7}
 8004af2:	b085      	sub	sp, #20
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	6078      	str	r0, [r7, #4]
 8004af8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004afa:	2300      	movs	r3, #0
 8004afc:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	3301      	adds	r3, #1
 8004b02:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	4a13      	ldr	r2, [pc, #76]	; (8004b54 <USB_FlushTxFifo+0x64>)
 8004b08:	4293      	cmp	r3, r2
 8004b0a:	d901      	bls.n	8004b10 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004b0c:	2303      	movs	r3, #3
 8004b0e:	e01b      	b.n	8004b48 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	691b      	ldr	r3, [r3, #16]
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	daf2      	bge.n	8004afe <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004b18:	2300      	movs	r3, #0
 8004b1a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004b1c:	683b      	ldr	r3, [r7, #0]
 8004b1e:	019b      	lsls	r3, r3, #6
 8004b20:	f043 0220 	orr.w	r2, r3, #32
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	3301      	adds	r3, #1
 8004b2c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	4a08      	ldr	r2, [pc, #32]	; (8004b54 <USB_FlushTxFifo+0x64>)
 8004b32:	4293      	cmp	r3, r2
 8004b34:	d901      	bls.n	8004b3a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004b36:	2303      	movs	r3, #3
 8004b38:	e006      	b.n	8004b48 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	691b      	ldr	r3, [r3, #16]
 8004b3e:	f003 0320 	and.w	r3, r3, #32
 8004b42:	2b20      	cmp	r3, #32
 8004b44:	d0f0      	beq.n	8004b28 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004b46:	2300      	movs	r3, #0
}
 8004b48:	4618      	mov	r0, r3
 8004b4a:	3714      	adds	r7, #20
 8004b4c:	46bd      	mov	sp, r7
 8004b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b52:	4770      	bx	lr
 8004b54:	00030d40 	.word	0x00030d40

08004b58 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004b58:	b480      	push	{r7}
 8004b5a:	b085      	sub	sp, #20
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004b60:	2300      	movs	r3, #0
 8004b62:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	3301      	adds	r3, #1
 8004b68:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	4a11      	ldr	r2, [pc, #68]	; (8004bb4 <USB_FlushRxFifo+0x5c>)
 8004b6e:	4293      	cmp	r3, r2
 8004b70:	d901      	bls.n	8004b76 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004b72:	2303      	movs	r3, #3
 8004b74:	e018      	b.n	8004ba8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	691b      	ldr	r3, [r3, #16]
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	daf2      	bge.n	8004b64 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004b7e:	2300      	movs	r3, #0
 8004b80:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	2210      	movs	r2, #16
 8004b86:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	3301      	adds	r3, #1
 8004b8c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	4a08      	ldr	r2, [pc, #32]	; (8004bb4 <USB_FlushRxFifo+0x5c>)
 8004b92:	4293      	cmp	r3, r2
 8004b94:	d901      	bls.n	8004b9a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004b96:	2303      	movs	r3, #3
 8004b98:	e006      	b.n	8004ba8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	691b      	ldr	r3, [r3, #16]
 8004b9e:	f003 0310 	and.w	r3, r3, #16
 8004ba2:	2b10      	cmp	r3, #16
 8004ba4:	d0f0      	beq.n	8004b88 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004ba6:	2300      	movs	r3, #0
}
 8004ba8:	4618      	mov	r0, r3
 8004baa:	3714      	adds	r7, #20
 8004bac:	46bd      	mov	sp, r7
 8004bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb2:	4770      	bx	lr
 8004bb4:	00030d40 	.word	0x00030d40

08004bb8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004bb8:	b480      	push	{r7}
 8004bba:	b085      	sub	sp, #20
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	6078      	str	r0, [r7, #4]
 8004bc0:	460b      	mov	r3, r1
 8004bc2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004bce:	681a      	ldr	r2, [r3, #0]
 8004bd0:	78fb      	ldrb	r3, [r7, #3]
 8004bd2:	68f9      	ldr	r1, [r7, #12]
 8004bd4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004bd8:	4313      	orrs	r3, r2
 8004bda:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004bdc:	2300      	movs	r3, #0
}
 8004bde:	4618      	mov	r0, r3
 8004be0:	3714      	adds	r7, #20
 8004be2:	46bd      	mov	sp, r7
 8004be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be8:	4770      	bx	lr

08004bea <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004bea:	b480      	push	{r7}
 8004bec:	b085      	sub	sp, #20
 8004bee:	af00      	add	r7, sp, #0
 8004bf0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	68fa      	ldr	r2, [r7, #12]
 8004c00:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004c04:	f023 0303 	bic.w	r3, r3, #3
 8004c08:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c10:	685b      	ldr	r3, [r3, #4]
 8004c12:	68fa      	ldr	r2, [r7, #12]
 8004c14:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004c18:	f043 0302 	orr.w	r3, r3, #2
 8004c1c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004c1e:	2300      	movs	r3, #0
}
 8004c20:	4618      	mov	r0, r3
 8004c22:	3714      	adds	r7, #20
 8004c24:	46bd      	mov	sp, r7
 8004c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c2a:	4770      	bx	lr

08004c2c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004c2c:	b480      	push	{r7}
 8004c2e:	b083      	sub	sp, #12
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	695b      	ldr	r3, [r3, #20]
 8004c38:	f003 0301 	and.w	r3, r3, #1
}
 8004c3c:	4618      	mov	r0, r3
 8004c3e:	370c      	adds	r7, #12
 8004c40:	46bd      	mov	sp, r7
 8004c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c46:	4770      	bx	lr

08004c48 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004c48:	b480      	push	{r7}
 8004c4a:	b085      	sub	sp, #20
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004c50:	2300      	movs	r3, #0
 8004c52:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	3301      	adds	r3, #1
 8004c58:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	4a13      	ldr	r2, [pc, #76]	; (8004cac <USB_CoreReset+0x64>)
 8004c5e:	4293      	cmp	r3, r2
 8004c60:	d901      	bls.n	8004c66 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004c62:	2303      	movs	r3, #3
 8004c64:	e01b      	b.n	8004c9e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	691b      	ldr	r3, [r3, #16]
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	daf2      	bge.n	8004c54 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004c6e:	2300      	movs	r3, #0
 8004c70:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	691b      	ldr	r3, [r3, #16]
 8004c76:	f043 0201 	orr.w	r2, r3, #1
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	3301      	adds	r3, #1
 8004c82:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	4a09      	ldr	r2, [pc, #36]	; (8004cac <USB_CoreReset+0x64>)
 8004c88:	4293      	cmp	r3, r2
 8004c8a:	d901      	bls.n	8004c90 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004c8c:	2303      	movs	r3, #3
 8004c8e:	e006      	b.n	8004c9e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	691b      	ldr	r3, [r3, #16]
 8004c94:	f003 0301 	and.w	r3, r3, #1
 8004c98:	2b01      	cmp	r3, #1
 8004c9a:	d0f0      	beq.n	8004c7e <USB_CoreReset+0x36>

  return HAL_OK;
 8004c9c:	2300      	movs	r3, #0
}
 8004c9e:	4618      	mov	r0, r3
 8004ca0:	3714      	adds	r7, #20
 8004ca2:	46bd      	mov	sp, r7
 8004ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca8:	4770      	bx	lr
 8004caa:	bf00      	nop
 8004cac:	00030d40 	.word	0x00030d40

08004cb0 <siprintf>:
 8004cb0:	b40e      	push	{r1, r2, r3}
 8004cb2:	b500      	push	{lr}
 8004cb4:	b09c      	sub	sp, #112	; 0x70
 8004cb6:	ab1d      	add	r3, sp, #116	; 0x74
 8004cb8:	9002      	str	r0, [sp, #8]
 8004cba:	9006      	str	r0, [sp, #24]
 8004cbc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004cc0:	4809      	ldr	r0, [pc, #36]	; (8004ce8 <siprintf+0x38>)
 8004cc2:	9107      	str	r1, [sp, #28]
 8004cc4:	9104      	str	r1, [sp, #16]
 8004cc6:	4909      	ldr	r1, [pc, #36]	; (8004cec <siprintf+0x3c>)
 8004cc8:	f853 2b04 	ldr.w	r2, [r3], #4
 8004ccc:	9105      	str	r1, [sp, #20]
 8004cce:	6800      	ldr	r0, [r0, #0]
 8004cd0:	9301      	str	r3, [sp, #4]
 8004cd2:	a902      	add	r1, sp, #8
 8004cd4:	f000 f992 	bl	8004ffc <_svfiprintf_r>
 8004cd8:	9b02      	ldr	r3, [sp, #8]
 8004cda:	2200      	movs	r2, #0
 8004cdc:	701a      	strb	r2, [r3, #0]
 8004cde:	b01c      	add	sp, #112	; 0x70
 8004ce0:	f85d eb04 	ldr.w	lr, [sp], #4
 8004ce4:	b003      	add	sp, #12
 8004ce6:	4770      	bx	lr
 8004ce8:	20000058 	.word	0x20000058
 8004cec:	ffff0208 	.word	0xffff0208

08004cf0 <memset>:
 8004cf0:	4402      	add	r2, r0
 8004cf2:	4603      	mov	r3, r0
 8004cf4:	4293      	cmp	r3, r2
 8004cf6:	d100      	bne.n	8004cfa <memset+0xa>
 8004cf8:	4770      	bx	lr
 8004cfa:	f803 1b01 	strb.w	r1, [r3], #1
 8004cfe:	e7f9      	b.n	8004cf4 <memset+0x4>

08004d00 <__errno>:
 8004d00:	4b01      	ldr	r3, [pc, #4]	; (8004d08 <__errno+0x8>)
 8004d02:	6818      	ldr	r0, [r3, #0]
 8004d04:	4770      	bx	lr
 8004d06:	bf00      	nop
 8004d08:	20000058 	.word	0x20000058

08004d0c <__libc_init_array>:
 8004d0c:	b570      	push	{r4, r5, r6, lr}
 8004d0e:	4d0d      	ldr	r5, [pc, #52]	; (8004d44 <__libc_init_array+0x38>)
 8004d10:	4c0d      	ldr	r4, [pc, #52]	; (8004d48 <__libc_init_array+0x3c>)
 8004d12:	1b64      	subs	r4, r4, r5
 8004d14:	10a4      	asrs	r4, r4, #2
 8004d16:	2600      	movs	r6, #0
 8004d18:	42a6      	cmp	r6, r4
 8004d1a:	d109      	bne.n	8004d30 <__libc_init_array+0x24>
 8004d1c:	4d0b      	ldr	r5, [pc, #44]	; (8004d4c <__libc_init_array+0x40>)
 8004d1e:	4c0c      	ldr	r4, [pc, #48]	; (8004d50 <__libc_init_array+0x44>)
 8004d20:	f000 fc6a 	bl	80055f8 <_init>
 8004d24:	1b64      	subs	r4, r4, r5
 8004d26:	10a4      	asrs	r4, r4, #2
 8004d28:	2600      	movs	r6, #0
 8004d2a:	42a6      	cmp	r6, r4
 8004d2c:	d105      	bne.n	8004d3a <__libc_init_array+0x2e>
 8004d2e:	bd70      	pop	{r4, r5, r6, pc}
 8004d30:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d34:	4798      	blx	r3
 8004d36:	3601      	adds	r6, #1
 8004d38:	e7ee      	b.n	8004d18 <__libc_init_array+0xc>
 8004d3a:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d3e:	4798      	blx	r3
 8004d40:	3601      	adds	r6, #1
 8004d42:	e7f2      	b.n	8004d2a <__libc_init_array+0x1e>
 8004d44:	08005674 	.word	0x08005674
 8004d48:	08005674 	.word	0x08005674
 8004d4c:	08005674 	.word	0x08005674
 8004d50:	08005678 	.word	0x08005678

08004d54 <__retarget_lock_acquire_recursive>:
 8004d54:	4770      	bx	lr

08004d56 <__retarget_lock_release_recursive>:
 8004d56:	4770      	bx	lr

08004d58 <_free_r>:
 8004d58:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004d5a:	2900      	cmp	r1, #0
 8004d5c:	d044      	beq.n	8004de8 <_free_r+0x90>
 8004d5e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004d62:	9001      	str	r0, [sp, #4]
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	f1a1 0404 	sub.w	r4, r1, #4
 8004d6a:	bfb8      	it	lt
 8004d6c:	18e4      	addlt	r4, r4, r3
 8004d6e:	f000 f8df 	bl	8004f30 <__malloc_lock>
 8004d72:	4a1e      	ldr	r2, [pc, #120]	; (8004dec <_free_r+0x94>)
 8004d74:	9801      	ldr	r0, [sp, #4]
 8004d76:	6813      	ldr	r3, [r2, #0]
 8004d78:	b933      	cbnz	r3, 8004d88 <_free_r+0x30>
 8004d7a:	6063      	str	r3, [r4, #4]
 8004d7c:	6014      	str	r4, [r2, #0]
 8004d7e:	b003      	add	sp, #12
 8004d80:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004d84:	f000 b8da 	b.w	8004f3c <__malloc_unlock>
 8004d88:	42a3      	cmp	r3, r4
 8004d8a:	d908      	bls.n	8004d9e <_free_r+0x46>
 8004d8c:	6825      	ldr	r5, [r4, #0]
 8004d8e:	1961      	adds	r1, r4, r5
 8004d90:	428b      	cmp	r3, r1
 8004d92:	bf01      	itttt	eq
 8004d94:	6819      	ldreq	r1, [r3, #0]
 8004d96:	685b      	ldreq	r3, [r3, #4]
 8004d98:	1949      	addeq	r1, r1, r5
 8004d9a:	6021      	streq	r1, [r4, #0]
 8004d9c:	e7ed      	b.n	8004d7a <_free_r+0x22>
 8004d9e:	461a      	mov	r2, r3
 8004da0:	685b      	ldr	r3, [r3, #4]
 8004da2:	b10b      	cbz	r3, 8004da8 <_free_r+0x50>
 8004da4:	42a3      	cmp	r3, r4
 8004da6:	d9fa      	bls.n	8004d9e <_free_r+0x46>
 8004da8:	6811      	ldr	r1, [r2, #0]
 8004daa:	1855      	adds	r5, r2, r1
 8004dac:	42a5      	cmp	r5, r4
 8004dae:	d10b      	bne.n	8004dc8 <_free_r+0x70>
 8004db0:	6824      	ldr	r4, [r4, #0]
 8004db2:	4421      	add	r1, r4
 8004db4:	1854      	adds	r4, r2, r1
 8004db6:	42a3      	cmp	r3, r4
 8004db8:	6011      	str	r1, [r2, #0]
 8004dba:	d1e0      	bne.n	8004d7e <_free_r+0x26>
 8004dbc:	681c      	ldr	r4, [r3, #0]
 8004dbe:	685b      	ldr	r3, [r3, #4]
 8004dc0:	6053      	str	r3, [r2, #4]
 8004dc2:	440c      	add	r4, r1
 8004dc4:	6014      	str	r4, [r2, #0]
 8004dc6:	e7da      	b.n	8004d7e <_free_r+0x26>
 8004dc8:	d902      	bls.n	8004dd0 <_free_r+0x78>
 8004dca:	230c      	movs	r3, #12
 8004dcc:	6003      	str	r3, [r0, #0]
 8004dce:	e7d6      	b.n	8004d7e <_free_r+0x26>
 8004dd0:	6825      	ldr	r5, [r4, #0]
 8004dd2:	1961      	adds	r1, r4, r5
 8004dd4:	428b      	cmp	r3, r1
 8004dd6:	bf04      	itt	eq
 8004dd8:	6819      	ldreq	r1, [r3, #0]
 8004dda:	685b      	ldreq	r3, [r3, #4]
 8004ddc:	6063      	str	r3, [r4, #4]
 8004dde:	bf04      	itt	eq
 8004de0:	1949      	addeq	r1, r1, r5
 8004de2:	6021      	streq	r1, [r4, #0]
 8004de4:	6054      	str	r4, [r2, #4]
 8004de6:	e7ca      	b.n	8004d7e <_free_r+0x26>
 8004de8:	b003      	add	sp, #12
 8004dea:	bd30      	pop	{r4, r5, pc}
 8004dec:	20000a34 	.word	0x20000a34

08004df0 <sbrk_aligned>:
 8004df0:	b570      	push	{r4, r5, r6, lr}
 8004df2:	4e0e      	ldr	r6, [pc, #56]	; (8004e2c <sbrk_aligned+0x3c>)
 8004df4:	460c      	mov	r4, r1
 8004df6:	6831      	ldr	r1, [r6, #0]
 8004df8:	4605      	mov	r5, r0
 8004dfa:	b911      	cbnz	r1, 8004e02 <sbrk_aligned+0x12>
 8004dfc:	f000 fba6 	bl	800554c <_sbrk_r>
 8004e00:	6030      	str	r0, [r6, #0]
 8004e02:	4621      	mov	r1, r4
 8004e04:	4628      	mov	r0, r5
 8004e06:	f000 fba1 	bl	800554c <_sbrk_r>
 8004e0a:	1c43      	adds	r3, r0, #1
 8004e0c:	d00a      	beq.n	8004e24 <sbrk_aligned+0x34>
 8004e0e:	1cc4      	adds	r4, r0, #3
 8004e10:	f024 0403 	bic.w	r4, r4, #3
 8004e14:	42a0      	cmp	r0, r4
 8004e16:	d007      	beq.n	8004e28 <sbrk_aligned+0x38>
 8004e18:	1a21      	subs	r1, r4, r0
 8004e1a:	4628      	mov	r0, r5
 8004e1c:	f000 fb96 	bl	800554c <_sbrk_r>
 8004e20:	3001      	adds	r0, #1
 8004e22:	d101      	bne.n	8004e28 <sbrk_aligned+0x38>
 8004e24:	f04f 34ff 	mov.w	r4, #4294967295
 8004e28:	4620      	mov	r0, r4
 8004e2a:	bd70      	pop	{r4, r5, r6, pc}
 8004e2c:	20000a38 	.word	0x20000a38

08004e30 <_malloc_r>:
 8004e30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004e34:	1ccd      	adds	r5, r1, #3
 8004e36:	f025 0503 	bic.w	r5, r5, #3
 8004e3a:	3508      	adds	r5, #8
 8004e3c:	2d0c      	cmp	r5, #12
 8004e3e:	bf38      	it	cc
 8004e40:	250c      	movcc	r5, #12
 8004e42:	2d00      	cmp	r5, #0
 8004e44:	4607      	mov	r7, r0
 8004e46:	db01      	blt.n	8004e4c <_malloc_r+0x1c>
 8004e48:	42a9      	cmp	r1, r5
 8004e4a:	d905      	bls.n	8004e58 <_malloc_r+0x28>
 8004e4c:	230c      	movs	r3, #12
 8004e4e:	603b      	str	r3, [r7, #0]
 8004e50:	2600      	movs	r6, #0
 8004e52:	4630      	mov	r0, r6
 8004e54:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004e58:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8004f2c <_malloc_r+0xfc>
 8004e5c:	f000 f868 	bl	8004f30 <__malloc_lock>
 8004e60:	f8d8 3000 	ldr.w	r3, [r8]
 8004e64:	461c      	mov	r4, r3
 8004e66:	bb5c      	cbnz	r4, 8004ec0 <_malloc_r+0x90>
 8004e68:	4629      	mov	r1, r5
 8004e6a:	4638      	mov	r0, r7
 8004e6c:	f7ff ffc0 	bl	8004df0 <sbrk_aligned>
 8004e70:	1c43      	adds	r3, r0, #1
 8004e72:	4604      	mov	r4, r0
 8004e74:	d155      	bne.n	8004f22 <_malloc_r+0xf2>
 8004e76:	f8d8 4000 	ldr.w	r4, [r8]
 8004e7a:	4626      	mov	r6, r4
 8004e7c:	2e00      	cmp	r6, #0
 8004e7e:	d145      	bne.n	8004f0c <_malloc_r+0xdc>
 8004e80:	2c00      	cmp	r4, #0
 8004e82:	d048      	beq.n	8004f16 <_malloc_r+0xe6>
 8004e84:	6823      	ldr	r3, [r4, #0]
 8004e86:	4631      	mov	r1, r6
 8004e88:	4638      	mov	r0, r7
 8004e8a:	eb04 0903 	add.w	r9, r4, r3
 8004e8e:	f000 fb5d 	bl	800554c <_sbrk_r>
 8004e92:	4581      	cmp	r9, r0
 8004e94:	d13f      	bne.n	8004f16 <_malloc_r+0xe6>
 8004e96:	6821      	ldr	r1, [r4, #0]
 8004e98:	1a6d      	subs	r5, r5, r1
 8004e9a:	4629      	mov	r1, r5
 8004e9c:	4638      	mov	r0, r7
 8004e9e:	f7ff ffa7 	bl	8004df0 <sbrk_aligned>
 8004ea2:	3001      	adds	r0, #1
 8004ea4:	d037      	beq.n	8004f16 <_malloc_r+0xe6>
 8004ea6:	6823      	ldr	r3, [r4, #0]
 8004ea8:	442b      	add	r3, r5
 8004eaa:	6023      	str	r3, [r4, #0]
 8004eac:	f8d8 3000 	ldr.w	r3, [r8]
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d038      	beq.n	8004f26 <_malloc_r+0xf6>
 8004eb4:	685a      	ldr	r2, [r3, #4]
 8004eb6:	42a2      	cmp	r2, r4
 8004eb8:	d12b      	bne.n	8004f12 <_malloc_r+0xe2>
 8004eba:	2200      	movs	r2, #0
 8004ebc:	605a      	str	r2, [r3, #4]
 8004ebe:	e00f      	b.n	8004ee0 <_malloc_r+0xb0>
 8004ec0:	6822      	ldr	r2, [r4, #0]
 8004ec2:	1b52      	subs	r2, r2, r5
 8004ec4:	d41f      	bmi.n	8004f06 <_malloc_r+0xd6>
 8004ec6:	2a0b      	cmp	r2, #11
 8004ec8:	d917      	bls.n	8004efa <_malloc_r+0xca>
 8004eca:	1961      	adds	r1, r4, r5
 8004ecc:	42a3      	cmp	r3, r4
 8004ece:	6025      	str	r5, [r4, #0]
 8004ed0:	bf18      	it	ne
 8004ed2:	6059      	strne	r1, [r3, #4]
 8004ed4:	6863      	ldr	r3, [r4, #4]
 8004ed6:	bf08      	it	eq
 8004ed8:	f8c8 1000 	streq.w	r1, [r8]
 8004edc:	5162      	str	r2, [r4, r5]
 8004ede:	604b      	str	r3, [r1, #4]
 8004ee0:	4638      	mov	r0, r7
 8004ee2:	f104 060b 	add.w	r6, r4, #11
 8004ee6:	f000 f829 	bl	8004f3c <__malloc_unlock>
 8004eea:	f026 0607 	bic.w	r6, r6, #7
 8004eee:	1d23      	adds	r3, r4, #4
 8004ef0:	1af2      	subs	r2, r6, r3
 8004ef2:	d0ae      	beq.n	8004e52 <_malloc_r+0x22>
 8004ef4:	1b9b      	subs	r3, r3, r6
 8004ef6:	50a3      	str	r3, [r4, r2]
 8004ef8:	e7ab      	b.n	8004e52 <_malloc_r+0x22>
 8004efa:	42a3      	cmp	r3, r4
 8004efc:	6862      	ldr	r2, [r4, #4]
 8004efe:	d1dd      	bne.n	8004ebc <_malloc_r+0x8c>
 8004f00:	f8c8 2000 	str.w	r2, [r8]
 8004f04:	e7ec      	b.n	8004ee0 <_malloc_r+0xb0>
 8004f06:	4623      	mov	r3, r4
 8004f08:	6864      	ldr	r4, [r4, #4]
 8004f0a:	e7ac      	b.n	8004e66 <_malloc_r+0x36>
 8004f0c:	4634      	mov	r4, r6
 8004f0e:	6876      	ldr	r6, [r6, #4]
 8004f10:	e7b4      	b.n	8004e7c <_malloc_r+0x4c>
 8004f12:	4613      	mov	r3, r2
 8004f14:	e7cc      	b.n	8004eb0 <_malloc_r+0x80>
 8004f16:	230c      	movs	r3, #12
 8004f18:	603b      	str	r3, [r7, #0]
 8004f1a:	4638      	mov	r0, r7
 8004f1c:	f000 f80e 	bl	8004f3c <__malloc_unlock>
 8004f20:	e797      	b.n	8004e52 <_malloc_r+0x22>
 8004f22:	6025      	str	r5, [r4, #0]
 8004f24:	e7dc      	b.n	8004ee0 <_malloc_r+0xb0>
 8004f26:	605b      	str	r3, [r3, #4]
 8004f28:	deff      	udf	#255	; 0xff
 8004f2a:	bf00      	nop
 8004f2c:	20000a34 	.word	0x20000a34

08004f30 <__malloc_lock>:
 8004f30:	4801      	ldr	r0, [pc, #4]	; (8004f38 <__malloc_lock+0x8>)
 8004f32:	f7ff bf0f 	b.w	8004d54 <__retarget_lock_acquire_recursive>
 8004f36:	bf00      	nop
 8004f38:	20000a30 	.word	0x20000a30

08004f3c <__malloc_unlock>:
 8004f3c:	4801      	ldr	r0, [pc, #4]	; (8004f44 <__malloc_unlock+0x8>)
 8004f3e:	f7ff bf0a 	b.w	8004d56 <__retarget_lock_release_recursive>
 8004f42:	bf00      	nop
 8004f44:	20000a30 	.word	0x20000a30

08004f48 <__ssputs_r>:
 8004f48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004f4c:	688e      	ldr	r6, [r1, #8]
 8004f4e:	461f      	mov	r7, r3
 8004f50:	42be      	cmp	r6, r7
 8004f52:	680b      	ldr	r3, [r1, #0]
 8004f54:	4682      	mov	sl, r0
 8004f56:	460c      	mov	r4, r1
 8004f58:	4690      	mov	r8, r2
 8004f5a:	d82c      	bhi.n	8004fb6 <__ssputs_r+0x6e>
 8004f5c:	898a      	ldrh	r2, [r1, #12]
 8004f5e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004f62:	d026      	beq.n	8004fb2 <__ssputs_r+0x6a>
 8004f64:	6965      	ldr	r5, [r4, #20]
 8004f66:	6909      	ldr	r1, [r1, #16]
 8004f68:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004f6c:	eba3 0901 	sub.w	r9, r3, r1
 8004f70:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004f74:	1c7b      	adds	r3, r7, #1
 8004f76:	444b      	add	r3, r9
 8004f78:	106d      	asrs	r5, r5, #1
 8004f7a:	429d      	cmp	r5, r3
 8004f7c:	bf38      	it	cc
 8004f7e:	461d      	movcc	r5, r3
 8004f80:	0553      	lsls	r3, r2, #21
 8004f82:	d527      	bpl.n	8004fd4 <__ssputs_r+0x8c>
 8004f84:	4629      	mov	r1, r5
 8004f86:	f7ff ff53 	bl	8004e30 <_malloc_r>
 8004f8a:	4606      	mov	r6, r0
 8004f8c:	b360      	cbz	r0, 8004fe8 <__ssputs_r+0xa0>
 8004f8e:	6921      	ldr	r1, [r4, #16]
 8004f90:	464a      	mov	r2, r9
 8004f92:	f000 faeb 	bl	800556c <memcpy>
 8004f96:	89a3      	ldrh	r3, [r4, #12]
 8004f98:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004f9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004fa0:	81a3      	strh	r3, [r4, #12]
 8004fa2:	6126      	str	r6, [r4, #16]
 8004fa4:	6165      	str	r5, [r4, #20]
 8004fa6:	444e      	add	r6, r9
 8004fa8:	eba5 0509 	sub.w	r5, r5, r9
 8004fac:	6026      	str	r6, [r4, #0]
 8004fae:	60a5      	str	r5, [r4, #8]
 8004fb0:	463e      	mov	r6, r7
 8004fb2:	42be      	cmp	r6, r7
 8004fb4:	d900      	bls.n	8004fb8 <__ssputs_r+0x70>
 8004fb6:	463e      	mov	r6, r7
 8004fb8:	6820      	ldr	r0, [r4, #0]
 8004fba:	4632      	mov	r2, r6
 8004fbc:	4641      	mov	r1, r8
 8004fbe:	f000 faab 	bl	8005518 <memmove>
 8004fc2:	68a3      	ldr	r3, [r4, #8]
 8004fc4:	1b9b      	subs	r3, r3, r6
 8004fc6:	60a3      	str	r3, [r4, #8]
 8004fc8:	6823      	ldr	r3, [r4, #0]
 8004fca:	4433      	add	r3, r6
 8004fcc:	6023      	str	r3, [r4, #0]
 8004fce:	2000      	movs	r0, #0
 8004fd0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004fd4:	462a      	mov	r2, r5
 8004fd6:	f000 fad7 	bl	8005588 <_realloc_r>
 8004fda:	4606      	mov	r6, r0
 8004fdc:	2800      	cmp	r0, #0
 8004fde:	d1e0      	bne.n	8004fa2 <__ssputs_r+0x5a>
 8004fe0:	6921      	ldr	r1, [r4, #16]
 8004fe2:	4650      	mov	r0, sl
 8004fe4:	f7ff feb8 	bl	8004d58 <_free_r>
 8004fe8:	230c      	movs	r3, #12
 8004fea:	f8ca 3000 	str.w	r3, [sl]
 8004fee:	89a3      	ldrh	r3, [r4, #12]
 8004ff0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004ff4:	81a3      	strh	r3, [r4, #12]
 8004ff6:	f04f 30ff 	mov.w	r0, #4294967295
 8004ffa:	e7e9      	b.n	8004fd0 <__ssputs_r+0x88>

08004ffc <_svfiprintf_r>:
 8004ffc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005000:	4698      	mov	r8, r3
 8005002:	898b      	ldrh	r3, [r1, #12]
 8005004:	061b      	lsls	r3, r3, #24
 8005006:	b09d      	sub	sp, #116	; 0x74
 8005008:	4607      	mov	r7, r0
 800500a:	460d      	mov	r5, r1
 800500c:	4614      	mov	r4, r2
 800500e:	d50e      	bpl.n	800502e <_svfiprintf_r+0x32>
 8005010:	690b      	ldr	r3, [r1, #16]
 8005012:	b963      	cbnz	r3, 800502e <_svfiprintf_r+0x32>
 8005014:	2140      	movs	r1, #64	; 0x40
 8005016:	f7ff ff0b 	bl	8004e30 <_malloc_r>
 800501a:	6028      	str	r0, [r5, #0]
 800501c:	6128      	str	r0, [r5, #16]
 800501e:	b920      	cbnz	r0, 800502a <_svfiprintf_r+0x2e>
 8005020:	230c      	movs	r3, #12
 8005022:	603b      	str	r3, [r7, #0]
 8005024:	f04f 30ff 	mov.w	r0, #4294967295
 8005028:	e0d0      	b.n	80051cc <_svfiprintf_r+0x1d0>
 800502a:	2340      	movs	r3, #64	; 0x40
 800502c:	616b      	str	r3, [r5, #20]
 800502e:	2300      	movs	r3, #0
 8005030:	9309      	str	r3, [sp, #36]	; 0x24
 8005032:	2320      	movs	r3, #32
 8005034:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005038:	f8cd 800c 	str.w	r8, [sp, #12]
 800503c:	2330      	movs	r3, #48	; 0x30
 800503e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80051e4 <_svfiprintf_r+0x1e8>
 8005042:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005046:	f04f 0901 	mov.w	r9, #1
 800504a:	4623      	mov	r3, r4
 800504c:	469a      	mov	sl, r3
 800504e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005052:	b10a      	cbz	r2, 8005058 <_svfiprintf_r+0x5c>
 8005054:	2a25      	cmp	r2, #37	; 0x25
 8005056:	d1f9      	bne.n	800504c <_svfiprintf_r+0x50>
 8005058:	ebba 0b04 	subs.w	fp, sl, r4
 800505c:	d00b      	beq.n	8005076 <_svfiprintf_r+0x7a>
 800505e:	465b      	mov	r3, fp
 8005060:	4622      	mov	r2, r4
 8005062:	4629      	mov	r1, r5
 8005064:	4638      	mov	r0, r7
 8005066:	f7ff ff6f 	bl	8004f48 <__ssputs_r>
 800506a:	3001      	adds	r0, #1
 800506c:	f000 80a9 	beq.w	80051c2 <_svfiprintf_r+0x1c6>
 8005070:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005072:	445a      	add	r2, fp
 8005074:	9209      	str	r2, [sp, #36]	; 0x24
 8005076:	f89a 3000 	ldrb.w	r3, [sl]
 800507a:	2b00      	cmp	r3, #0
 800507c:	f000 80a1 	beq.w	80051c2 <_svfiprintf_r+0x1c6>
 8005080:	2300      	movs	r3, #0
 8005082:	f04f 32ff 	mov.w	r2, #4294967295
 8005086:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800508a:	f10a 0a01 	add.w	sl, sl, #1
 800508e:	9304      	str	r3, [sp, #16]
 8005090:	9307      	str	r3, [sp, #28]
 8005092:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005096:	931a      	str	r3, [sp, #104]	; 0x68
 8005098:	4654      	mov	r4, sl
 800509a:	2205      	movs	r2, #5
 800509c:	f814 1b01 	ldrb.w	r1, [r4], #1
 80050a0:	4850      	ldr	r0, [pc, #320]	; (80051e4 <_svfiprintf_r+0x1e8>)
 80050a2:	f7fb f8d5 	bl	8000250 <memchr>
 80050a6:	9a04      	ldr	r2, [sp, #16]
 80050a8:	b9d8      	cbnz	r0, 80050e2 <_svfiprintf_r+0xe6>
 80050aa:	06d0      	lsls	r0, r2, #27
 80050ac:	bf44      	itt	mi
 80050ae:	2320      	movmi	r3, #32
 80050b0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80050b4:	0711      	lsls	r1, r2, #28
 80050b6:	bf44      	itt	mi
 80050b8:	232b      	movmi	r3, #43	; 0x2b
 80050ba:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80050be:	f89a 3000 	ldrb.w	r3, [sl]
 80050c2:	2b2a      	cmp	r3, #42	; 0x2a
 80050c4:	d015      	beq.n	80050f2 <_svfiprintf_r+0xf6>
 80050c6:	9a07      	ldr	r2, [sp, #28]
 80050c8:	4654      	mov	r4, sl
 80050ca:	2000      	movs	r0, #0
 80050cc:	f04f 0c0a 	mov.w	ip, #10
 80050d0:	4621      	mov	r1, r4
 80050d2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80050d6:	3b30      	subs	r3, #48	; 0x30
 80050d8:	2b09      	cmp	r3, #9
 80050da:	d94d      	bls.n	8005178 <_svfiprintf_r+0x17c>
 80050dc:	b1b0      	cbz	r0, 800510c <_svfiprintf_r+0x110>
 80050de:	9207      	str	r2, [sp, #28]
 80050e0:	e014      	b.n	800510c <_svfiprintf_r+0x110>
 80050e2:	eba0 0308 	sub.w	r3, r0, r8
 80050e6:	fa09 f303 	lsl.w	r3, r9, r3
 80050ea:	4313      	orrs	r3, r2
 80050ec:	9304      	str	r3, [sp, #16]
 80050ee:	46a2      	mov	sl, r4
 80050f0:	e7d2      	b.n	8005098 <_svfiprintf_r+0x9c>
 80050f2:	9b03      	ldr	r3, [sp, #12]
 80050f4:	1d19      	adds	r1, r3, #4
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	9103      	str	r1, [sp, #12]
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	bfbb      	ittet	lt
 80050fe:	425b      	neglt	r3, r3
 8005100:	f042 0202 	orrlt.w	r2, r2, #2
 8005104:	9307      	strge	r3, [sp, #28]
 8005106:	9307      	strlt	r3, [sp, #28]
 8005108:	bfb8      	it	lt
 800510a:	9204      	strlt	r2, [sp, #16]
 800510c:	7823      	ldrb	r3, [r4, #0]
 800510e:	2b2e      	cmp	r3, #46	; 0x2e
 8005110:	d10c      	bne.n	800512c <_svfiprintf_r+0x130>
 8005112:	7863      	ldrb	r3, [r4, #1]
 8005114:	2b2a      	cmp	r3, #42	; 0x2a
 8005116:	d134      	bne.n	8005182 <_svfiprintf_r+0x186>
 8005118:	9b03      	ldr	r3, [sp, #12]
 800511a:	1d1a      	adds	r2, r3, #4
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	9203      	str	r2, [sp, #12]
 8005120:	2b00      	cmp	r3, #0
 8005122:	bfb8      	it	lt
 8005124:	f04f 33ff 	movlt.w	r3, #4294967295
 8005128:	3402      	adds	r4, #2
 800512a:	9305      	str	r3, [sp, #20]
 800512c:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80051f4 <_svfiprintf_r+0x1f8>
 8005130:	7821      	ldrb	r1, [r4, #0]
 8005132:	2203      	movs	r2, #3
 8005134:	4650      	mov	r0, sl
 8005136:	f7fb f88b 	bl	8000250 <memchr>
 800513a:	b138      	cbz	r0, 800514c <_svfiprintf_r+0x150>
 800513c:	9b04      	ldr	r3, [sp, #16]
 800513e:	eba0 000a 	sub.w	r0, r0, sl
 8005142:	2240      	movs	r2, #64	; 0x40
 8005144:	4082      	lsls	r2, r0
 8005146:	4313      	orrs	r3, r2
 8005148:	3401      	adds	r4, #1
 800514a:	9304      	str	r3, [sp, #16]
 800514c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005150:	4825      	ldr	r0, [pc, #148]	; (80051e8 <_svfiprintf_r+0x1ec>)
 8005152:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005156:	2206      	movs	r2, #6
 8005158:	f7fb f87a 	bl	8000250 <memchr>
 800515c:	2800      	cmp	r0, #0
 800515e:	d038      	beq.n	80051d2 <_svfiprintf_r+0x1d6>
 8005160:	4b22      	ldr	r3, [pc, #136]	; (80051ec <_svfiprintf_r+0x1f0>)
 8005162:	bb1b      	cbnz	r3, 80051ac <_svfiprintf_r+0x1b0>
 8005164:	9b03      	ldr	r3, [sp, #12]
 8005166:	3307      	adds	r3, #7
 8005168:	f023 0307 	bic.w	r3, r3, #7
 800516c:	3308      	adds	r3, #8
 800516e:	9303      	str	r3, [sp, #12]
 8005170:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005172:	4433      	add	r3, r6
 8005174:	9309      	str	r3, [sp, #36]	; 0x24
 8005176:	e768      	b.n	800504a <_svfiprintf_r+0x4e>
 8005178:	fb0c 3202 	mla	r2, ip, r2, r3
 800517c:	460c      	mov	r4, r1
 800517e:	2001      	movs	r0, #1
 8005180:	e7a6      	b.n	80050d0 <_svfiprintf_r+0xd4>
 8005182:	2300      	movs	r3, #0
 8005184:	3401      	adds	r4, #1
 8005186:	9305      	str	r3, [sp, #20]
 8005188:	4619      	mov	r1, r3
 800518a:	f04f 0c0a 	mov.w	ip, #10
 800518e:	4620      	mov	r0, r4
 8005190:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005194:	3a30      	subs	r2, #48	; 0x30
 8005196:	2a09      	cmp	r2, #9
 8005198:	d903      	bls.n	80051a2 <_svfiprintf_r+0x1a6>
 800519a:	2b00      	cmp	r3, #0
 800519c:	d0c6      	beq.n	800512c <_svfiprintf_r+0x130>
 800519e:	9105      	str	r1, [sp, #20]
 80051a0:	e7c4      	b.n	800512c <_svfiprintf_r+0x130>
 80051a2:	fb0c 2101 	mla	r1, ip, r1, r2
 80051a6:	4604      	mov	r4, r0
 80051a8:	2301      	movs	r3, #1
 80051aa:	e7f0      	b.n	800518e <_svfiprintf_r+0x192>
 80051ac:	ab03      	add	r3, sp, #12
 80051ae:	9300      	str	r3, [sp, #0]
 80051b0:	462a      	mov	r2, r5
 80051b2:	4b0f      	ldr	r3, [pc, #60]	; (80051f0 <_svfiprintf_r+0x1f4>)
 80051b4:	a904      	add	r1, sp, #16
 80051b6:	4638      	mov	r0, r7
 80051b8:	f3af 8000 	nop.w
 80051bc:	1c42      	adds	r2, r0, #1
 80051be:	4606      	mov	r6, r0
 80051c0:	d1d6      	bne.n	8005170 <_svfiprintf_r+0x174>
 80051c2:	89ab      	ldrh	r3, [r5, #12]
 80051c4:	065b      	lsls	r3, r3, #25
 80051c6:	f53f af2d 	bmi.w	8005024 <_svfiprintf_r+0x28>
 80051ca:	9809      	ldr	r0, [sp, #36]	; 0x24
 80051cc:	b01d      	add	sp, #116	; 0x74
 80051ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80051d2:	ab03      	add	r3, sp, #12
 80051d4:	9300      	str	r3, [sp, #0]
 80051d6:	462a      	mov	r2, r5
 80051d8:	4b05      	ldr	r3, [pc, #20]	; (80051f0 <_svfiprintf_r+0x1f4>)
 80051da:	a904      	add	r1, sp, #16
 80051dc:	4638      	mov	r0, r7
 80051de:	f000 f879 	bl	80052d4 <_printf_i>
 80051e2:	e7eb      	b.n	80051bc <_svfiprintf_r+0x1c0>
 80051e4:	08005638 	.word	0x08005638
 80051e8:	08005642 	.word	0x08005642
 80051ec:	00000000 	.word	0x00000000
 80051f0:	08004f49 	.word	0x08004f49
 80051f4:	0800563e 	.word	0x0800563e

080051f8 <_printf_common>:
 80051f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80051fc:	4616      	mov	r6, r2
 80051fe:	4699      	mov	r9, r3
 8005200:	688a      	ldr	r2, [r1, #8]
 8005202:	690b      	ldr	r3, [r1, #16]
 8005204:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005208:	4293      	cmp	r3, r2
 800520a:	bfb8      	it	lt
 800520c:	4613      	movlt	r3, r2
 800520e:	6033      	str	r3, [r6, #0]
 8005210:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005214:	4607      	mov	r7, r0
 8005216:	460c      	mov	r4, r1
 8005218:	b10a      	cbz	r2, 800521e <_printf_common+0x26>
 800521a:	3301      	adds	r3, #1
 800521c:	6033      	str	r3, [r6, #0]
 800521e:	6823      	ldr	r3, [r4, #0]
 8005220:	0699      	lsls	r1, r3, #26
 8005222:	bf42      	ittt	mi
 8005224:	6833      	ldrmi	r3, [r6, #0]
 8005226:	3302      	addmi	r3, #2
 8005228:	6033      	strmi	r3, [r6, #0]
 800522a:	6825      	ldr	r5, [r4, #0]
 800522c:	f015 0506 	ands.w	r5, r5, #6
 8005230:	d106      	bne.n	8005240 <_printf_common+0x48>
 8005232:	f104 0a19 	add.w	sl, r4, #25
 8005236:	68e3      	ldr	r3, [r4, #12]
 8005238:	6832      	ldr	r2, [r6, #0]
 800523a:	1a9b      	subs	r3, r3, r2
 800523c:	42ab      	cmp	r3, r5
 800523e:	dc26      	bgt.n	800528e <_printf_common+0x96>
 8005240:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005244:	1e13      	subs	r3, r2, #0
 8005246:	6822      	ldr	r2, [r4, #0]
 8005248:	bf18      	it	ne
 800524a:	2301      	movne	r3, #1
 800524c:	0692      	lsls	r2, r2, #26
 800524e:	d42b      	bmi.n	80052a8 <_printf_common+0xb0>
 8005250:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005254:	4649      	mov	r1, r9
 8005256:	4638      	mov	r0, r7
 8005258:	47c0      	blx	r8
 800525a:	3001      	adds	r0, #1
 800525c:	d01e      	beq.n	800529c <_printf_common+0xa4>
 800525e:	6823      	ldr	r3, [r4, #0]
 8005260:	6922      	ldr	r2, [r4, #16]
 8005262:	f003 0306 	and.w	r3, r3, #6
 8005266:	2b04      	cmp	r3, #4
 8005268:	bf02      	ittt	eq
 800526a:	68e5      	ldreq	r5, [r4, #12]
 800526c:	6833      	ldreq	r3, [r6, #0]
 800526e:	1aed      	subeq	r5, r5, r3
 8005270:	68a3      	ldr	r3, [r4, #8]
 8005272:	bf0c      	ite	eq
 8005274:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005278:	2500      	movne	r5, #0
 800527a:	4293      	cmp	r3, r2
 800527c:	bfc4      	itt	gt
 800527e:	1a9b      	subgt	r3, r3, r2
 8005280:	18ed      	addgt	r5, r5, r3
 8005282:	2600      	movs	r6, #0
 8005284:	341a      	adds	r4, #26
 8005286:	42b5      	cmp	r5, r6
 8005288:	d11a      	bne.n	80052c0 <_printf_common+0xc8>
 800528a:	2000      	movs	r0, #0
 800528c:	e008      	b.n	80052a0 <_printf_common+0xa8>
 800528e:	2301      	movs	r3, #1
 8005290:	4652      	mov	r2, sl
 8005292:	4649      	mov	r1, r9
 8005294:	4638      	mov	r0, r7
 8005296:	47c0      	blx	r8
 8005298:	3001      	adds	r0, #1
 800529a:	d103      	bne.n	80052a4 <_printf_common+0xac>
 800529c:	f04f 30ff 	mov.w	r0, #4294967295
 80052a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80052a4:	3501      	adds	r5, #1
 80052a6:	e7c6      	b.n	8005236 <_printf_common+0x3e>
 80052a8:	18e1      	adds	r1, r4, r3
 80052aa:	1c5a      	adds	r2, r3, #1
 80052ac:	2030      	movs	r0, #48	; 0x30
 80052ae:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80052b2:	4422      	add	r2, r4
 80052b4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80052b8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80052bc:	3302      	adds	r3, #2
 80052be:	e7c7      	b.n	8005250 <_printf_common+0x58>
 80052c0:	2301      	movs	r3, #1
 80052c2:	4622      	mov	r2, r4
 80052c4:	4649      	mov	r1, r9
 80052c6:	4638      	mov	r0, r7
 80052c8:	47c0      	blx	r8
 80052ca:	3001      	adds	r0, #1
 80052cc:	d0e6      	beq.n	800529c <_printf_common+0xa4>
 80052ce:	3601      	adds	r6, #1
 80052d0:	e7d9      	b.n	8005286 <_printf_common+0x8e>
	...

080052d4 <_printf_i>:
 80052d4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80052d8:	7e0f      	ldrb	r7, [r1, #24]
 80052da:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80052dc:	2f78      	cmp	r7, #120	; 0x78
 80052de:	4691      	mov	r9, r2
 80052e0:	4680      	mov	r8, r0
 80052e2:	460c      	mov	r4, r1
 80052e4:	469a      	mov	sl, r3
 80052e6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80052ea:	d807      	bhi.n	80052fc <_printf_i+0x28>
 80052ec:	2f62      	cmp	r7, #98	; 0x62
 80052ee:	d80a      	bhi.n	8005306 <_printf_i+0x32>
 80052f0:	2f00      	cmp	r7, #0
 80052f2:	f000 80d4 	beq.w	800549e <_printf_i+0x1ca>
 80052f6:	2f58      	cmp	r7, #88	; 0x58
 80052f8:	f000 80c0 	beq.w	800547c <_printf_i+0x1a8>
 80052fc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005300:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005304:	e03a      	b.n	800537c <_printf_i+0xa8>
 8005306:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800530a:	2b15      	cmp	r3, #21
 800530c:	d8f6      	bhi.n	80052fc <_printf_i+0x28>
 800530e:	a101      	add	r1, pc, #4	; (adr r1, 8005314 <_printf_i+0x40>)
 8005310:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005314:	0800536d 	.word	0x0800536d
 8005318:	08005381 	.word	0x08005381
 800531c:	080052fd 	.word	0x080052fd
 8005320:	080052fd 	.word	0x080052fd
 8005324:	080052fd 	.word	0x080052fd
 8005328:	080052fd 	.word	0x080052fd
 800532c:	08005381 	.word	0x08005381
 8005330:	080052fd 	.word	0x080052fd
 8005334:	080052fd 	.word	0x080052fd
 8005338:	080052fd 	.word	0x080052fd
 800533c:	080052fd 	.word	0x080052fd
 8005340:	08005485 	.word	0x08005485
 8005344:	080053ad 	.word	0x080053ad
 8005348:	0800543f 	.word	0x0800543f
 800534c:	080052fd 	.word	0x080052fd
 8005350:	080052fd 	.word	0x080052fd
 8005354:	080054a7 	.word	0x080054a7
 8005358:	080052fd 	.word	0x080052fd
 800535c:	080053ad 	.word	0x080053ad
 8005360:	080052fd 	.word	0x080052fd
 8005364:	080052fd 	.word	0x080052fd
 8005368:	08005447 	.word	0x08005447
 800536c:	682b      	ldr	r3, [r5, #0]
 800536e:	1d1a      	adds	r2, r3, #4
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	602a      	str	r2, [r5, #0]
 8005374:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005378:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800537c:	2301      	movs	r3, #1
 800537e:	e09f      	b.n	80054c0 <_printf_i+0x1ec>
 8005380:	6820      	ldr	r0, [r4, #0]
 8005382:	682b      	ldr	r3, [r5, #0]
 8005384:	0607      	lsls	r7, r0, #24
 8005386:	f103 0104 	add.w	r1, r3, #4
 800538a:	6029      	str	r1, [r5, #0]
 800538c:	d501      	bpl.n	8005392 <_printf_i+0xbe>
 800538e:	681e      	ldr	r6, [r3, #0]
 8005390:	e003      	b.n	800539a <_printf_i+0xc6>
 8005392:	0646      	lsls	r6, r0, #25
 8005394:	d5fb      	bpl.n	800538e <_printf_i+0xba>
 8005396:	f9b3 6000 	ldrsh.w	r6, [r3]
 800539a:	2e00      	cmp	r6, #0
 800539c:	da03      	bge.n	80053a6 <_printf_i+0xd2>
 800539e:	232d      	movs	r3, #45	; 0x2d
 80053a0:	4276      	negs	r6, r6
 80053a2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80053a6:	485a      	ldr	r0, [pc, #360]	; (8005510 <_printf_i+0x23c>)
 80053a8:	230a      	movs	r3, #10
 80053aa:	e012      	b.n	80053d2 <_printf_i+0xfe>
 80053ac:	682b      	ldr	r3, [r5, #0]
 80053ae:	6820      	ldr	r0, [r4, #0]
 80053b0:	1d19      	adds	r1, r3, #4
 80053b2:	6029      	str	r1, [r5, #0]
 80053b4:	0605      	lsls	r5, r0, #24
 80053b6:	d501      	bpl.n	80053bc <_printf_i+0xe8>
 80053b8:	681e      	ldr	r6, [r3, #0]
 80053ba:	e002      	b.n	80053c2 <_printf_i+0xee>
 80053bc:	0641      	lsls	r1, r0, #25
 80053be:	d5fb      	bpl.n	80053b8 <_printf_i+0xe4>
 80053c0:	881e      	ldrh	r6, [r3, #0]
 80053c2:	4853      	ldr	r0, [pc, #332]	; (8005510 <_printf_i+0x23c>)
 80053c4:	2f6f      	cmp	r7, #111	; 0x6f
 80053c6:	bf0c      	ite	eq
 80053c8:	2308      	moveq	r3, #8
 80053ca:	230a      	movne	r3, #10
 80053cc:	2100      	movs	r1, #0
 80053ce:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80053d2:	6865      	ldr	r5, [r4, #4]
 80053d4:	60a5      	str	r5, [r4, #8]
 80053d6:	2d00      	cmp	r5, #0
 80053d8:	bfa2      	ittt	ge
 80053da:	6821      	ldrge	r1, [r4, #0]
 80053dc:	f021 0104 	bicge.w	r1, r1, #4
 80053e0:	6021      	strge	r1, [r4, #0]
 80053e2:	b90e      	cbnz	r6, 80053e8 <_printf_i+0x114>
 80053e4:	2d00      	cmp	r5, #0
 80053e6:	d04b      	beq.n	8005480 <_printf_i+0x1ac>
 80053e8:	4615      	mov	r5, r2
 80053ea:	fbb6 f1f3 	udiv	r1, r6, r3
 80053ee:	fb03 6711 	mls	r7, r3, r1, r6
 80053f2:	5dc7      	ldrb	r7, [r0, r7]
 80053f4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80053f8:	4637      	mov	r7, r6
 80053fa:	42bb      	cmp	r3, r7
 80053fc:	460e      	mov	r6, r1
 80053fe:	d9f4      	bls.n	80053ea <_printf_i+0x116>
 8005400:	2b08      	cmp	r3, #8
 8005402:	d10b      	bne.n	800541c <_printf_i+0x148>
 8005404:	6823      	ldr	r3, [r4, #0]
 8005406:	07de      	lsls	r6, r3, #31
 8005408:	d508      	bpl.n	800541c <_printf_i+0x148>
 800540a:	6923      	ldr	r3, [r4, #16]
 800540c:	6861      	ldr	r1, [r4, #4]
 800540e:	4299      	cmp	r1, r3
 8005410:	bfde      	ittt	le
 8005412:	2330      	movle	r3, #48	; 0x30
 8005414:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005418:	f105 35ff 	addle.w	r5, r5, #4294967295
 800541c:	1b52      	subs	r2, r2, r5
 800541e:	6122      	str	r2, [r4, #16]
 8005420:	f8cd a000 	str.w	sl, [sp]
 8005424:	464b      	mov	r3, r9
 8005426:	aa03      	add	r2, sp, #12
 8005428:	4621      	mov	r1, r4
 800542a:	4640      	mov	r0, r8
 800542c:	f7ff fee4 	bl	80051f8 <_printf_common>
 8005430:	3001      	adds	r0, #1
 8005432:	d14a      	bne.n	80054ca <_printf_i+0x1f6>
 8005434:	f04f 30ff 	mov.w	r0, #4294967295
 8005438:	b004      	add	sp, #16
 800543a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800543e:	6823      	ldr	r3, [r4, #0]
 8005440:	f043 0320 	orr.w	r3, r3, #32
 8005444:	6023      	str	r3, [r4, #0]
 8005446:	4833      	ldr	r0, [pc, #204]	; (8005514 <_printf_i+0x240>)
 8005448:	2778      	movs	r7, #120	; 0x78
 800544a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800544e:	6823      	ldr	r3, [r4, #0]
 8005450:	6829      	ldr	r1, [r5, #0]
 8005452:	061f      	lsls	r7, r3, #24
 8005454:	f851 6b04 	ldr.w	r6, [r1], #4
 8005458:	d402      	bmi.n	8005460 <_printf_i+0x18c>
 800545a:	065f      	lsls	r7, r3, #25
 800545c:	bf48      	it	mi
 800545e:	b2b6      	uxthmi	r6, r6
 8005460:	07df      	lsls	r7, r3, #31
 8005462:	bf48      	it	mi
 8005464:	f043 0320 	orrmi.w	r3, r3, #32
 8005468:	6029      	str	r1, [r5, #0]
 800546a:	bf48      	it	mi
 800546c:	6023      	strmi	r3, [r4, #0]
 800546e:	b91e      	cbnz	r6, 8005478 <_printf_i+0x1a4>
 8005470:	6823      	ldr	r3, [r4, #0]
 8005472:	f023 0320 	bic.w	r3, r3, #32
 8005476:	6023      	str	r3, [r4, #0]
 8005478:	2310      	movs	r3, #16
 800547a:	e7a7      	b.n	80053cc <_printf_i+0xf8>
 800547c:	4824      	ldr	r0, [pc, #144]	; (8005510 <_printf_i+0x23c>)
 800547e:	e7e4      	b.n	800544a <_printf_i+0x176>
 8005480:	4615      	mov	r5, r2
 8005482:	e7bd      	b.n	8005400 <_printf_i+0x12c>
 8005484:	682b      	ldr	r3, [r5, #0]
 8005486:	6826      	ldr	r6, [r4, #0]
 8005488:	6961      	ldr	r1, [r4, #20]
 800548a:	1d18      	adds	r0, r3, #4
 800548c:	6028      	str	r0, [r5, #0]
 800548e:	0635      	lsls	r5, r6, #24
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	d501      	bpl.n	8005498 <_printf_i+0x1c4>
 8005494:	6019      	str	r1, [r3, #0]
 8005496:	e002      	b.n	800549e <_printf_i+0x1ca>
 8005498:	0670      	lsls	r0, r6, #25
 800549a:	d5fb      	bpl.n	8005494 <_printf_i+0x1c0>
 800549c:	8019      	strh	r1, [r3, #0]
 800549e:	2300      	movs	r3, #0
 80054a0:	6123      	str	r3, [r4, #16]
 80054a2:	4615      	mov	r5, r2
 80054a4:	e7bc      	b.n	8005420 <_printf_i+0x14c>
 80054a6:	682b      	ldr	r3, [r5, #0]
 80054a8:	1d1a      	adds	r2, r3, #4
 80054aa:	602a      	str	r2, [r5, #0]
 80054ac:	681d      	ldr	r5, [r3, #0]
 80054ae:	6862      	ldr	r2, [r4, #4]
 80054b0:	2100      	movs	r1, #0
 80054b2:	4628      	mov	r0, r5
 80054b4:	f7fa fecc 	bl	8000250 <memchr>
 80054b8:	b108      	cbz	r0, 80054be <_printf_i+0x1ea>
 80054ba:	1b40      	subs	r0, r0, r5
 80054bc:	6060      	str	r0, [r4, #4]
 80054be:	6863      	ldr	r3, [r4, #4]
 80054c0:	6123      	str	r3, [r4, #16]
 80054c2:	2300      	movs	r3, #0
 80054c4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80054c8:	e7aa      	b.n	8005420 <_printf_i+0x14c>
 80054ca:	6923      	ldr	r3, [r4, #16]
 80054cc:	462a      	mov	r2, r5
 80054ce:	4649      	mov	r1, r9
 80054d0:	4640      	mov	r0, r8
 80054d2:	47d0      	blx	sl
 80054d4:	3001      	adds	r0, #1
 80054d6:	d0ad      	beq.n	8005434 <_printf_i+0x160>
 80054d8:	6823      	ldr	r3, [r4, #0]
 80054da:	079b      	lsls	r3, r3, #30
 80054dc:	d413      	bmi.n	8005506 <_printf_i+0x232>
 80054de:	68e0      	ldr	r0, [r4, #12]
 80054e0:	9b03      	ldr	r3, [sp, #12]
 80054e2:	4298      	cmp	r0, r3
 80054e4:	bfb8      	it	lt
 80054e6:	4618      	movlt	r0, r3
 80054e8:	e7a6      	b.n	8005438 <_printf_i+0x164>
 80054ea:	2301      	movs	r3, #1
 80054ec:	4632      	mov	r2, r6
 80054ee:	4649      	mov	r1, r9
 80054f0:	4640      	mov	r0, r8
 80054f2:	47d0      	blx	sl
 80054f4:	3001      	adds	r0, #1
 80054f6:	d09d      	beq.n	8005434 <_printf_i+0x160>
 80054f8:	3501      	adds	r5, #1
 80054fa:	68e3      	ldr	r3, [r4, #12]
 80054fc:	9903      	ldr	r1, [sp, #12]
 80054fe:	1a5b      	subs	r3, r3, r1
 8005500:	42ab      	cmp	r3, r5
 8005502:	dcf2      	bgt.n	80054ea <_printf_i+0x216>
 8005504:	e7eb      	b.n	80054de <_printf_i+0x20a>
 8005506:	2500      	movs	r5, #0
 8005508:	f104 0619 	add.w	r6, r4, #25
 800550c:	e7f5      	b.n	80054fa <_printf_i+0x226>
 800550e:	bf00      	nop
 8005510:	08005649 	.word	0x08005649
 8005514:	0800565a 	.word	0x0800565a

08005518 <memmove>:
 8005518:	4288      	cmp	r0, r1
 800551a:	b510      	push	{r4, lr}
 800551c:	eb01 0402 	add.w	r4, r1, r2
 8005520:	d902      	bls.n	8005528 <memmove+0x10>
 8005522:	4284      	cmp	r4, r0
 8005524:	4623      	mov	r3, r4
 8005526:	d807      	bhi.n	8005538 <memmove+0x20>
 8005528:	1e43      	subs	r3, r0, #1
 800552a:	42a1      	cmp	r1, r4
 800552c:	d008      	beq.n	8005540 <memmove+0x28>
 800552e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005532:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005536:	e7f8      	b.n	800552a <memmove+0x12>
 8005538:	4402      	add	r2, r0
 800553a:	4601      	mov	r1, r0
 800553c:	428a      	cmp	r2, r1
 800553e:	d100      	bne.n	8005542 <memmove+0x2a>
 8005540:	bd10      	pop	{r4, pc}
 8005542:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005546:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800554a:	e7f7      	b.n	800553c <memmove+0x24>

0800554c <_sbrk_r>:
 800554c:	b538      	push	{r3, r4, r5, lr}
 800554e:	4d06      	ldr	r5, [pc, #24]	; (8005568 <_sbrk_r+0x1c>)
 8005550:	2300      	movs	r3, #0
 8005552:	4604      	mov	r4, r0
 8005554:	4608      	mov	r0, r1
 8005556:	602b      	str	r3, [r5, #0]
 8005558:	f7fb fb4a 	bl	8000bf0 <_sbrk>
 800555c:	1c43      	adds	r3, r0, #1
 800555e:	d102      	bne.n	8005566 <_sbrk_r+0x1a>
 8005560:	682b      	ldr	r3, [r5, #0]
 8005562:	b103      	cbz	r3, 8005566 <_sbrk_r+0x1a>
 8005564:	6023      	str	r3, [r4, #0]
 8005566:	bd38      	pop	{r3, r4, r5, pc}
 8005568:	20000a2c 	.word	0x20000a2c

0800556c <memcpy>:
 800556c:	440a      	add	r2, r1
 800556e:	4291      	cmp	r1, r2
 8005570:	f100 33ff 	add.w	r3, r0, #4294967295
 8005574:	d100      	bne.n	8005578 <memcpy+0xc>
 8005576:	4770      	bx	lr
 8005578:	b510      	push	{r4, lr}
 800557a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800557e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005582:	4291      	cmp	r1, r2
 8005584:	d1f9      	bne.n	800557a <memcpy+0xe>
 8005586:	bd10      	pop	{r4, pc}

08005588 <_realloc_r>:
 8005588:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800558c:	4680      	mov	r8, r0
 800558e:	4614      	mov	r4, r2
 8005590:	460e      	mov	r6, r1
 8005592:	b921      	cbnz	r1, 800559e <_realloc_r+0x16>
 8005594:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005598:	4611      	mov	r1, r2
 800559a:	f7ff bc49 	b.w	8004e30 <_malloc_r>
 800559e:	b92a      	cbnz	r2, 80055ac <_realloc_r+0x24>
 80055a0:	f7ff fbda 	bl	8004d58 <_free_r>
 80055a4:	4625      	mov	r5, r4
 80055a6:	4628      	mov	r0, r5
 80055a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80055ac:	f000 f81b 	bl	80055e6 <_malloc_usable_size_r>
 80055b0:	4284      	cmp	r4, r0
 80055b2:	4607      	mov	r7, r0
 80055b4:	d802      	bhi.n	80055bc <_realloc_r+0x34>
 80055b6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80055ba:	d812      	bhi.n	80055e2 <_realloc_r+0x5a>
 80055bc:	4621      	mov	r1, r4
 80055be:	4640      	mov	r0, r8
 80055c0:	f7ff fc36 	bl	8004e30 <_malloc_r>
 80055c4:	4605      	mov	r5, r0
 80055c6:	2800      	cmp	r0, #0
 80055c8:	d0ed      	beq.n	80055a6 <_realloc_r+0x1e>
 80055ca:	42bc      	cmp	r4, r7
 80055cc:	4622      	mov	r2, r4
 80055ce:	4631      	mov	r1, r6
 80055d0:	bf28      	it	cs
 80055d2:	463a      	movcs	r2, r7
 80055d4:	f7ff ffca 	bl	800556c <memcpy>
 80055d8:	4631      	mov	r1, r6
 80055da:	4640      	mov	r0, r8
 80055dc:	f7ff fbbc 	bl	8004d58 <_free_r>
 80055e0:	e7e1      	b.n	80055a6 <_realloc_r+0x1e>
 80055e2:	4635      	mov	r5, r6
 80055e4:	e7df      	b.n	80055a6 <_realloc_r+0x1e>

080055e6 <_malloc_usable_size_r>:
 80055e6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80055ea:	1f18      	subs	r0, r3, #4
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	bfbc      	itt	lt
 80055f0:	580b      	ldrlt	r3, [r1, r0]
 80055f2:	18c0      	addlt	r0, r0, r3
 80055f4:	4770      	bx	lr
	...

080055f8 <_init>:
 80055f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80055fa:	bf00      	nop
 80055fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80055fe:	bc08      	pop	{r3}
 8005600:	469e      	mov	lr, r3
 8005602:	4770      	bx	lr

08005604 <_fini>:
 8005604:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005606:	bf00      	nop
 8005608:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800560a:	bc08      	pop	{r3}
 800560c:	469e      	mov	lr, r3
 800560e:	4770      	bx	lr
