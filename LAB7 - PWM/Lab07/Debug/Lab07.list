
Lab07.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005388  080001f8  080001f8  000101f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  08005580  08005580  00015580  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800559c  0800559c  0002014c  2**0
                  CONTENTS
  4 .ARM          00000008  0800559c  0800559c  0001559c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080055a4  080055a4  0002014c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080055a4  080055a4  000155a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080055a8  080055a8  000155a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080055ac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  2000000c  080055b8  0002000c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  200000ac  08005658  000200ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00000700  2000014c  080056f8  0002014c  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  2000084c  080056f8  0002084c  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  0002014c  2**0
                  CONTENTS, READONLY
 14 .debug_info   00017da3  00000000  00000000  0002017a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00002f52  00000000  00000000  00037f1d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001308  00000000  00000000  0003ae70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 000011c0  00000000  00000000  0003c178  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002a029  00000000  00000000  0003d338  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00018ead  00000000  00000000  00067361  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00103ab6  00000000  00000000  0008020e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000050  00000000  00000000  00183cc4  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00005000  00000000  00000000  00183d14  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	2000014c 	.word	0x2000014c
 8000214:	00000000 	.word	0x00000000
 8000218:	08005568 	.word	0x08005568

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000150 	.word	0x20000150
 8000234:	08005568 	.word	0x08005568

08000238 <__aeabi_uldivmod>:
 8000238:	b953      	cbnz	r3, 8000250 <__aeabi_uldivmod+0x18>
 800023a:	b94a      	cbnz	r2, 8000250 <__aeabi_uldivmod+0x18>
 800023c:	2900      	cmp	r1, #0
 800023e:	bf08      	it	eq
 8000240:	2800      	cmpeq	r0, #0
 8000242:	bf1c      	itt	ne
 8000244:	f04f 31ff 	movne.w	r1, #4294967295
 8000248:	f04f 30ff 	movne.w	r0, #4294967295
 800024c:	f000 b974 	b.w	8000538 <__aeabi_idiv0>
 8000250:	f1ad 0c08 	sub.w	ip, sp, #8
 8000254:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000258:	f000 f806 	bl	8000268 <__udivmoddi4>
 800025c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000260:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000264:	b004      	add	sp, #16
 8000266:	4770      	bx	lr

08000268 <__udivmoddi4>:
 8000268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800026c:	9d08      	ldr	r5, [sp, #32]
 800026e:	4604      	mov	r4, r0
 8000270:	468e      	mov	lr, r1
 8000272:	2b00      	cmp	r3, #0
 8000274:	d14d      	bne.n	8000312 <__udivmoddi4+0xaa>
 8000276:	428a      	cmp	r2, r1
 8000278:	4694      	mov	ip, r2
 800027a:	d969      	bls.n	8000350 <__udivmoddi4+0xe8>
 800027c:	fab2 f282 	clz	r2, r2
 8000280:	b152      	cbz	r2, 8000298 <__udivmoddi4+0x30>
 8000282:	fa01 f302 	lsl.w	r3, r1, r2
 8000286:	f1c2 0120 	rsb	r1, r2, #32
 800028a:	fa20 f101 	lsr.w	r1, r0, r1
 800028e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000292:	ea41 0e03 	orr.w	lr, r1, r3
 8000296:	4094      	lsls	r4, r2
 8000298:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800029c:	0c21      	lsrs	r1, r4, #16
 800029e:	fbbe f6f8 	udiv	r6, lr, r8
 80002a2:	fa1f f78c 	uxth.w	r7, ip
 80002a6:	fb08 e316 	mls	r3, r8, r6, lr
 80002aa:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002ae:	fb06 f107 	mul.w	r1, r6, r7
 80002b2:	4299      	cmp	r1, r3
 80002b4:	d90a      	bls.n	80002cc <__udivmoddi4+0x64>
 80002b6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ba:	f106 30ff 	add.w	r0, r6, #4294967295
 80002be:	f080 811f 	bcs.w	8000500 <__udivmoddi4+0x298>
 80002c2:	4299      	cmp	r1, r3
 80002c4:	f240 811c 	bls.w	8000500 <__udivmoddi4+0x298>
 80002c8:	3e02      	subs	r6, #2
 80002ca:	4463      	add	r3, ip
 80002cc:	1a5b      	subs	r3, r3, r1
 80002ce:	b2a4      	uxth	r4, r4
 80002d0:	fbb3 f0f8 	udiv	r0, r3, r8
 80002d4:	fb08 3310 	mls	r3, r8, r0, r3
 80002d8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002dc:	fb00 f707 	mul.w	r7, r0, r7
 80002e0:	42a7      	cmp	r7, r4
 80002e2:	d90a      	bls.n	80002fa <__udivmoddi4+0x92>
 80002e4:	eb1c 0404 	adds.w	r4, ip, r4
 80002e8:	f100 33ff 	add.w	r3, r0, #4294967295
 80002ec:	f080 810a 	bcs.w	8000504 <__udivmoddi4+0x29c>
 80002f0:	42a7      	cmp	r7, r4
 80002f2:	f240 8107 	bls.w	8000504 <__udivmoddi4+0x29c>
 80002f6:	4464      	add	r4, ip
 80002f8:	3802      	subs	r0, #2
 80002fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002fe:	1be4      	subs	r4, r4, r7
 8000300:	2600      	movs	r6, #0
 8000302:	b11d      	cbz	r5, 800030c <__udivmoddi4+0xa4>
 8000304:	40d4      	lsrs	r4, r2
 8000306:	2300      	movs	r3, #0
 8000308:	e9c5 4300 	strd	r4, r3, [r5]
 800030c:	4631      	mov	r1, r6
 800030e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000312:	428b      	cmp	r3, r1
 8000314:	d909      	bls.n	800032a <__udivmoddi4+0xc2>
 8000316:	2d00      	cmp	r5, #0
 8000318:	f000 80ef 	beq.w	80004fa <__udivmoddi4+0x292>
 800031c:	2600      	movs	r6, #0
 800031e:	e9c5 0100 	strd	r0, r1, [r5]
 8000322:	4630      	mov	r0, r6
 8000324:	4631      	mov	r1, r6
 8000326:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800032a:	fab3 f683 	clz	r6, r3
 800032e:	2e00      	cmp	r6, #0
 8000330:	d14a      	bne.n	80003c8 <__udivmoddi4+0x160>
 8000332:	428b      	cmp	r3, r1
 8000334:	d302      	bcc.n	800033c <__udivmoddi4+0xd4>
 8000336:	4282      	cmp	r2, r0
 8000338:	f200 80f9 	bhi.w	800052e <__udivmoddi4+0x2c6>
 800033c:	1a84      	subs	r4, r0, r2
 800033e:	eb61 0303 	sbc.w	r3, r1, r3
 8000342:	2001      	movs	r0, #1
 8000344:	469e      	mov	lr, r3
 8000346:	2d00      	cmp	r5, #0
 8000348:	d0e0      	beq.n	800030c <__udivmoddi4+0xa4>
 800034a:	e9c5 4e00 	strd	r4, lr, [r5]
 800034e:	e7dd      	b.n	800030c <__udivmoddi4+0xa4>
 8000350:	b902      	cbnz	r2, 8000354 <__udivmoddi4+0xec>
 8000352:	deff      	udf	#255	; 0xff
 8000354:	fab2 f282 	clz	r2, r2
 8000358:	2a00      	cmp	r2, #0
 800035a:	f040 8092 	bne.w	8000482 <__udivmoddi4+0x21a>
 800035e:	eba1 010c 	sub.w	r1, r1, ip
 8000362:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000366:	fa1f fe8c 	uxth.w	lr, ip
 800036a:	2601      	movs	r6, #1
 800036c:	0c20      	lsrs	r0, r4, #16
 800036e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000372:	fb07 1113 	mls	r1, r7, r3, r1
 8000376:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800037a:	fb0e f003 	mul.w	r0, lr, r3
 800037e:	4288      	cmp	r0, r1
 8000380:	d908      	bls.n	8000394 <__udivmoddi4+0x12c>
 8000382:	eb1c 0101 	adds.w	r1, ip, r1
 8000386:	f103 38ff 	add.w	r8, r3, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0x12a>
 800038c:	4288      	cmp	r0, r1
 800038e:	f200 80cb 	bhi.w	8000528 <__udivmoddi4+0x2c0>
 8000392:	4643      	mov	r3, r8
 8000394:	1a09      	subs	r1, r1, r0
 8000396:	b2a4      	uxth	r4, r4
 8000398:	fbb1 f0f7 	udiv	r0, r1, r7
 800039c:	fb07 1110 	mls	r1, r7, r0, r1
 80003a0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003a4:	fb0e fe00 	mul.w	lr, lr, r0
 80003a8:	45a6      	cmp	lr, r4
 80003aa:	d908      	bls.n	80003be <__udivmoddi4+0x156>
 80003ac:	eb1c 0404 	adds.w	r4, ip, r4
 80003b0:	f100 31ff 	add.w	r1, r0, #4294967295
 80003b4:	d202      	bcs.n	80003bc <__udivmoddi4+0x154>
 80003b6:	45a6      	cmp	lr, r4
 80003b8:	f200 80bb 	bhi.w	8000532 <__udivmoddi4+0x2ca>
 80003bc:	4608      	mov	r0, r1
 80003be:	eba4 040e 	sub.w	r4, r4, lr
 80003c2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003c6:	e79c      	b.n	8000302 <__udivmoddi4+0x9a>
 80003c8:	f1c6 0720 	rsb	r7, r6, #32
 80003cc:	40b3      	lsls	r3, r6
 80003ce:	fa22 fc07 	lsr.w	ip, r2, r7
 80003d2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003d6:	fa20 f407 	lsr.w	r4, r0, r7
 80003da:	fa01 f306 	lsl.w	r3, r1, r6
 80003de:	431c      	orrs	r4, r3
 80003e0:	40f9      	lsrs	r1, r7
 80003e2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003e6:	fa00 f306 	lsl.w	r3, r0, r6
 80003ea:	fbb1 f8f9 	udiv	r8, r1, r9
 80003ee:	0c20      	lsrs	r0, r4, #16
 80003f0:	fa1f fe8c 	uxth.w	lr, ip
 80003f4:	fb09 1118 	mls	r1, r9, r8, r1
 80003f8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003fc:	fb08 f00e 	mul.w	r0, r8, lr
 8000400:	4288      	cmp	r0, r1
 8000402:	fa02 f206 	lsl.w	r2, r2, r6
 8000406:	d90b      	bls.n	8000420 <__udivmoddi4+0x1b8>
 8000408:	eb1c 0101 	adds.w	r1, ip, r1
 800040c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000410:	f080 8088 	bcs.w	8000524 <__udivmoddi4+0x2bc>
 8000414:	4288      	cmp	r0, r1
 8000416:	f240 8085 	bls.w	8000524 <__udivmoddi4+0x2bc>
 800041a:	f1a8 0802 	sub.w	r8, r8, #2
 800041e:	4461      	add	r1, ip
 8000420:	1a09      	subs	r1, r1, r0
 8000422:	b2a4      	uxth	r4, r4
 8000424:	fbb1 f0f9 	udiv	r0, r1, r9
 8000428:	fb09 1110 	mls	r1, r9, r0, r1
 800042c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000430:	fb00 fe0e 	mul.w	lr, r0, lr
 8000434:	458e      	cmp	lr, r1
 8000436:	d908      	bls.n	800044a <__udivmoddi4+0x1e2>
 8000438:	eb1c 0101 	adds.w	r1, ip, r1
 800043c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000440:	d26c      	bcs.n	800051c <__udivmoddi4+0x2b4>
 8000442:	458e      	cmp	lr, r1
 8000444:	d96a      	bls.n	800051c <__udivmoddi4+0x2b4>
 8000446:	3802      	subs	r0, #2
 8000448:	4461      	add	r1, ip
 800044a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800044e:	fba0 9402 	umull	r9, r4, r0, r2
 8000452:	eba1 010e 	sub.w	r1, r1, lr
 8000456:	42a1      	cmp	r1, r4
 8000458:	46c8      	mov	r8, r9
 800045a:	46a6      	mov	lr, r4
 800045c:	d356      	bcc.n	800050c <__udivmoddi4+0x2a4>
 800045e:	d053      	beq.n	8000508 <__udivmoddi4+0x2a0>
 8000460:	b15d      	cbz	r5, 800047a <__udivmoddi4+0x212>
 8000462:	ebb3 0208 	subs.w	r2, r3, r8
 8000466:	eb61 010e 	sbc.w	r1, r1, lr
 800046a:	fa01 f707 	lsl.w	r7, r1, r7
 800046e:	fa22 f306 	lsr.w	r3, r2, r6
 8000472:	40f1      	lsrs	r1, r6
 8000474:	431f      	orrs	r7, r3
 8000476:	e9c5 7100 	strd	r7, r1, [r5]
 800047a:	2600      	movs	r6, #0
 800047c:	4631      	mov	r1, r6
 800047e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000482:	f1c2 0320 	rsb	r3, r2, #32
 8000486:	40d8      	lsrs	r0, r3
 8000488:	fa0c fc02 	lsl.w	ip, ip, r2
 800048c:	fa21 f303 	lsr.w	r3, r1, r3
 8000490:	4091      	lsls	r1, r2
 8000492:	4301      	orrs	r1, r0
 8000494:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000498:	fa1f fe8c 	uxth.w	lr, ip
 800049c:	fbb3 f0f7 	udiv	r0, r3, r7
 80004a0:	fb07 3610 	mls	r6, r7, r0, r3
 80004a4:	0c0b      	lsrs	r3, r1, #16
 80004a6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004aa:	fb00 f60e 	mul.w	r6, r0, lr
 80004ae:	429e      	cmp	r6, r3
 80004b0:	fa04 f402 	lsl.w	r4, r4, r2
 80004b4:	d908      	bls.n	80004c8 <__udivmoddi4+0x260>
 80004b6:	eb1c 0303 	adds.w	r3, ip, r3
 80004ba:	f100 38ff 	add.w	r8, r0, #4294967295
 80004be:	d22f      	bcs.n	8000520 <__udivmoddi4+0x2b8>
 80004c0:	429e      	cmp	r6, r3
 80004c2:	d92d      	bls.n	8000520 <__udivmoddi4+0x2b8>
 80004c4:	3802      	subs	r0, #2
 80004c6:	4463      	add	r3, ip
 80004c8:	1b9b      	subs	r3, r3, r6
 80004ca:	b289      	uxth	r1, r1
 80004cc:	fbb3 f6f7 	udiv	r6, r3, r7
 80004d0:	fb07 3316 	mls	r3, r7, r6, r3
 80004d4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004d8:	fb06 f30e 	mul.w	r3, r6, lr
 80004dc:	428b      	cmp	r3, r1
 80004de:	d908      	bls.n	80004f2 <__udivmoddi4+0x28a>
 80004e0:	eb1c 0101 	adds.w	r1, ip, r1
 80004e4:	f106 38ff 	add.w	r8, r6, #4294967295
 80004e8:	d216      	bcs.n	8000518 <__udivmoddi4+0x2b0>
 80004ea:	428b      	cmp	r3, r1
 80004ec:	d914      	bls.n	8000518 <__udivmoddi4+0x2b0>
 80004ee:	3e02      	subs	r6, #2
 80004f0:	4461      	add	r1, ip
 80004f2:	1ac9      	subs	r1, r1, r3
 80004f4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004f8:	e738      	b.n	800036c <__udivmoddi4+0x104>
 80004fa:	462e      	mov	r6, r5
 80004fc:	4628      	mov	r0, r5
 80004fe:	e705      	b.n	800030c <__udivmoddi4+0xa4>
 8000500:	4606      	mov	r6, r0
 8000502:	e6e3      	b.n	80002cc <__udivmoddi4+0x64>
 8000504:	4618      	mov	r0, r3
 8000506:	e6f8      	b.n	80002fa <__udivmoddi4+0x92>
 8000508:	454b      	cmp	r3, r9
 800050a:	d2a9      	bcs.n	8000460 <__udivmoddi4+0x1f8>
 800050c:	ebb9 0802 	subs.w	r8, r9, r2
 8000510:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000514:	3801      	subs	r0, #1
 8000516:	e7a3      	b.n	8000460 <__udivmoddi4+0x1f8>
 8000518:	4646      	mov	r6, r8
 800051a:	e7ea      	b.n	80004f2 <__udivmoddi4+0x28a>
 800051c:	4620      	mov	r0, r4
 800051e:	e794      	b.n	800044a <__udivmoddi4+0x1e2>
 8000520:	4640      	mov	r0, r8
 8000522:	e7d1      	b.n	80004c8 <__udivmoddi4+0x260>
 8000524:	46d0      	mov	r8, sl
 8000526:	e77b      	b.n	8000420 <__udivmoddi4+0x1b8>
 8000528:	3b02      	subs	r3, #2
 800052a:	4461      	add	r1, ip
 800052c:	e732      	b.n	8000394 <__udivmoddi4+0x12c>
 800052e:	4630      	mov	r0, r6
 8000530:	e709      	b.n	8000346 <__udivmoddi4+0xde>
 8000532:	4464      	add	r4, ip
 8000534:	3802      	subs	r0, #2
 8000536:	e742      	b.n	80003be <__udivmoddi4+0x156>

08000538 <__aeabi_idiv0>:
 8000538:	4770      	bx	lr
 800053a:	bf00      	nop

0800053c <MX_ETH_Init>:

ETH_HandleTypeDef heth;

/* ETH init function */
void MX_ETH_Init(void)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000540:	4b1f      	ldr	r3, [pc, #124]	; (80005c0 <MX_ETH_Init+0x84>)
 8000542:	4a20      	ldr	r2, [pc, #128]	; (80005c4 <MX_ETH_Init+0x88>)
 8000544:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000546:	4b20      	ldr	r3, [pc, #128]	; (80005c8 <MX_ETH_Init+0x8c>)
 8000548:	2200      	movs	r2, #0
 800054a:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 800054c:	4b1e      	ldr	r3, [pc, #120]	; (80005c8 <MX_ETH_Init+0x8c>)
 800054e:	2280      	movs	r2, #128	; 0x80
 8000550:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000552:	4b1d      	ldr	r3, [pc, #116]	; (80005c8 <MX_ETH_Init+0x8c>)
 8000554:	22e1      	movs	r2, #225	; 0xe1
 8000556:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000558:	4b1b      	ldr	r3, [pc, #108]	; (80005c8 <MX_ETH_Init+0x8c>)
 800055a:	2200      	movs	r2, #0
 800055c:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 800055e:	4b1a      	ldr	r3, [pc, #104]	; (80005c8 <MX_ETH_Init+0x8c>)
 8000560:	2200      	movs	r2, #0
 8000562:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000564:	4b18      	ldr	r3, [pc, #96]	; (80005c8 <MX_ETH_Init+0x8c>)
 8000566:	2200      	movs	r2, #0
 8000568:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 800056a:	4b15      	ldr	r3, [pc, #84]	; (80005c0 <MX_ETH_Init+0x84>)
 800056c:	4a16      	ldr	r2, [pc, #88]	; (80005c8 <MX_ETH_Init+0x8c>)
 800056e:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000570:	4b13      	ldr	r3, [pc, #76]	; (80005c0 <MX_ETH_Init+0x84>)
 8000572:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000576:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000578:	4b11      	ldr	r3, [pc, #68]	; (80005c0 <MX_ETH_Init+0x84>)
 800057a:	4a14      	ldr	r2, [pc, #80]	; (80005cc <MX_ETH_Init+0x90>)
 800057c:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800057e:	4b10      	ldr	r3, [pc, #64]	; (80005c0 <MX_ETH_Init+0x84>)
 8000580:	4a13      	ldr	r2, [pc, #76]	; (80005d0 <MX_ETH_Init+0x94>)
 8000582:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000584:	4b0e      	ldr	r3, [pc, #56]	; (80005c0 <MX_ETH_Init+0x84>)
 8000586:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800058a:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 800058c:	480c      	ldr	r0, [pc, #48]	; (80005c0 <MX_ETH_Init+0x84>)
 800058e:	f000 ff2f 	bl	80013f0 <HAL_ETH_Init>
 8000592:	4603      	mov	r3, r0
 8000594:	2b00      	cmp	r3, #0
 8000596:	d001      	beq.n	800059c <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8000598:	f000 fafc 	bl	8000b94 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 800059c:	2238      	movs	r2, #56	; 0x38
 800059e:	2100      	movs	r1, #0
 80005a0:	480c      	ldr	r0, [pc, #48]	; (80005d4 <MX_ETH_Init+0x98>)
 80005a2:	f004 ffd9 	bl	8005558 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80005a6:	4b0b      	ldr	r3, [pc, #44]	; (80005d4 <MX_ETH_Init+0x98>)
 80005a8:	2221      	movs	r2, #33	; 0x21
 80005aa:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80005ac:	4b09      	ldr	r3, [pc, #36]	; (80005d4 <MX_ETH_Init+0x98>)
 80005ae:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 80005b2:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80005b4:	4b07      	ldr	r3, [pc, #28]	; (80005d4 <MX_ETH_Init+0x98>)
 80005b6:	2200      	movs	r2, #0
 80005b8:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 80005ba:	bf00      	nop
 80005bc:	bd80      	pop	{r7, pc}
 80005be:	bf00      	nop
 80005c0:	200001a0 	.word	0x200001a0
 80005c4:	40028000 	.word	0x40028000
 80005c8:	20000250 	.word	0x20000250
 80005cc:	200000ac 	.word	0x200000ac
 80005d0:	2000000c 	.word	0x2000000c
 80005d4:	20000168 	.word	0x20000168

080005d8 <HAL_ETH_MspInit>:

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b08e      	sub	sp, #56	; 0x38
 80005dc:	af00      	add	r7, sp, #0
 80005de:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80005e4:	2200      	movs	r2, #0
 80005e6:	601a      	str	r2, [r3, #0]
 80005e8:	605a      	str	r2, [r3, #4]
 80005ea:	609a      	str	r2, [r3, #8]
 80005ec:	60da      	str	r2, [r3, #12]
 80005ee:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	4a4e      	ldr	r2, [pc, #312]	; (8000730 <HAL_ETH_MspInit+0x158>)
 80005f6:	4293      	cmp	r3, r2
 80005f8:	f040 8096 	bne.w	8000728 <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* ETH clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 80005fc:	4b4d      	ldr	r3, [pc, #308]	; (8000734 <HAL_ETH_MspInit+0x15c>)
 80005fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000600:	4a4c      	ldr	r2, [pc, #304]	; (8000734 <HAL_ETH_MspInit+0x15c>)
 8000602:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000606:	6313      	str	r3, [r2, #48]	; 0x30
 8000608:	4b4a      	ldr	r3, [pc, #296]	; (8000734 <HAL_ETH_MspInit+0x15c>)
 800060a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800060c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000610:	623b      	str	r3, [r7, #32]
 8000612:	6a3b      	ldr	r3, [r7, #32]
 8000614:	4b47      	ldr	r3, [pc, #284]	; (8000734 <HAL_ETH_MspInit+0x15c>)
 8000616:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000618:	4a46      	ldr	r2, [pc, #280]	; (8000734 <HAL_ETH_MspInit+0x15c>)
 800061a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800061e:	6313      	str	r3, [r2, #48]	; 0x30
 8000620:	4b44      	ldr	r3, [pc, #272]	; (8000734 <HAL_ETH_MspInit+0x15c>)
 8000622:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000624:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000628:	61fb      	str	r3, [r7, #28]
 800062a:	69fb      	ldr	r3, [r7, #28]
 800062c:	4b41      	ldr	r3, [pc, #260]	; (8000734 <HAL_ETH_MspInit+0x15c>)
 800062e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000630:	4a40      	ldr	r2, [pc, #256]	; (8000734 <HAL_ETH_MspInit+0x15c>)
 8000632:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000636:	6313      	str	r3, [r2, #48]	; 0x30
 8000638:	4b3e      	ldr	r3, [pc, #248]	; (8000734 <HAL_ETH_MspInit+0x15c>)
 800063a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800063c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000640:	61bb      	str	r3, [r7, #24]
 8000642:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000644:	4b3b      	ldr	r3, [pc, #236]	; (8000734 <HAL_ETH_MspInit+0x15c>)
 8000646:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000648:	4a3a      	ldr	r2, [pc, #232]	; (8000734 <HAL_ETH_MspInit+0x15c>)
 800064a:	f043 0304 	orr.w	r3, r3, #4
 800064e:	6313      	str	r3, [r2, #48]	; 0x30
 8000650:	4b38      	ldr	r3, [pc, #224]	; (8000734 <HAL_ETH_MspInit+0x15c>)
 8000652:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000654:	f003 0304 	and.w	r3, r3, #4
 8000658:	617b      	str	r3, [r7, #20]
 800065a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800065c:	4b35      	ldr	r3, [pc, #212]	; (8000734 <HAL_ETH_MspInit+0x15c>)
 800065e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000660:	4a34      	ldr	r2, [pc, #208]	; (8000734 <HAL_ETH_MspInit+0x15c>)
 8000662:	f043 0301 	orr.w	r3, r3, #1
 8000666:	6313      	str	r3, [r2, #48]	; 0x30
 8000668:	4b32      	ldr	r3, [pc, #200]	; (8000734 <HAL_ETH_MspInit+0x15c>)
 800066a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800066c:	f003 0301 	and.w	r3, r3, #1
 8000670:	613b      	str	r3, [r7, #16]
 8000672:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000674:	4b2f      	ldr	r3, [pc, #188]	; (8000734 <HAL_ETH_MspInit+0x15c>)
 8000676:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000678:	4a2e      	ldr	r2, [pc, #184]	; (8000734 <HAL_ETH_MspInit+0x15c>)
 800067a:	f043 0302 	orr.w	r3, r3, #2
 800067e:	6313      	str	r3, [r2, #48]	; 0x30
 8000680:	4b2c      	ldr	r3, [pc, #176]	; (8000734 <HAL_ETH_MspInit+0x15c>)
 8000682:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000684:	f003 0302 	and.w	r3, r3, #2
 8000688:	60fb      	str	r3, [r7, #12]
 800068a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800068c:	4b29      	ldr	r3, [pc, #164]	; (8000734 <HAL_ETH_MspInit+0x15c>)
 800068e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000690:	4a28      	ldr	r2, [pc, #160]	; (8000734 <HAL_ETH_MspInit+0x15c>)
 8000692:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000696:	6313      	str	r3, [r2, #48]	; 0x30
 8000698:	4b26      	ldr	r3, [pc, #152]	; (8000734 <HAL_ETH_MspInit+0x15c>)
 800069a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800069c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80006a0:	60bb      	str	r3, [r7, #8]
 80006a2:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80006a4:	2332      	movs	r3, #50	; 0x32
 80006a6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006a8:	2302      	movs	r3, #2
 80006aa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ac:	2300      	movs	r3, #0
 80006ae:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006b0:	2303      	movs	r3, #3
 80006b2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80006b4:	230b      	movs	r3, #11
 80006b6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80006b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006bc:	4619      	mov	r1, r3
 80006be:	481e      	ldr	r0, [pc, #120]	; (8000738 <HAL_ETH_MspInit+0x160>)
 80006c0:	f001 f9bc 	bl	8001a3c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80006c4:	2386      	movs	r3, #134	; 0x86
 80006c6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006c8:	2302      	movs	r3, #2
 80006ca:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006cc:	2300      	movs	r3, #0
 80006ce:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006d0:	2303      	movs	r3, #3
 80006d2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80006d4:	230b      	movs	r3, #11
 80006d6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006dc:	4619      	mov	r1, r3
 80006de:	4817      	ldr	r0, [pc, #92]	; (800073c <HAL_ETH_MspInit+0x164>)
 80006e0:	f001 f9ac 	bl	8001a3c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80006e4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80006e8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006ea:	2302      	movs	r3, #2
 80006ec:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ee:	2300      	movs	r3, #0
 80006f0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006f2:	2303      	movs	r3, #3
 80006f4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80006f6:	230b      	movs	r3, #11
 80006f8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80006fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006fe:	4619      	mov	r1, r3
 8000700:	480f      	ldr	r0, [pc, #60]	; (8000740 <HAL_ETH_MspInit+0x168>)
 8000702:	f001 f99b 	bl	8001a3c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000706:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800070a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800070c:	2302      	movs	r3, #2
 800070e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000710:	2300      	movs	r3, #0
 8000712:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000714:	2303      	movs	r3, #3
 8000716:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000718:	230b      	movs	r3, #11
 800071a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800071c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000720:	4619      	mov	r1, r3
 8000722:	4808      	ldr	r0, [pc, #32]	; (8000744 <HAL_ETH_MspInit+0x16c>)
 8000724:	f001 f98a 	bl	8001a3c <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8000728:	bf00      	nop
 800072a:	3738      	adds	r7, #56	; 0x38
 800072c:	46bd      	mov	sp, r7
 800072e:	bd80      	pop	{r7, pc}
 8000730:	40028000 	.word	0x40028000
 8000734:	40023800 	.word	0x40023800
 8000738:	40020800 	.word	0x40020800
 800073c:	40020000 	.word	0x40020000
 8000740:	40020400 	.word	0x40020400
 8000744:	40021800 	.word	0x40021800

08000748 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b08c      	sub	sp, #48	; 0x30
 800074c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800074e:	f107 031c 	add.w	r3, r7, #28
 8000752:	2200      	movs	r2, #0
 8000754:	601a      	str	r2, [r3, #0]
 8000756:	605a      	str	r2, [r3, #4]
 8000758:	609a      	str	r2, [r3, #8]
 800075a:	60da      	str	r2, [r3, #12]
 800075c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800075e:	4b47      	ldr	r3, [pc, #284]	; (800087c <MX_GPIO_Init+0x134>)
 8000760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000762:	4a46      	ldr	r2, [pc, #280]	; (800087c <MX_GPIO_Init+0x134>)
 8000764:	f043 0304 	orr.w	r3, r3, #4
 8000768:	6313      	str	r3, [r2, #48]	; 0x30
 800076a:	4b44      	ldr	r3, [pc, #272]	; (800087c <MX_GPIO_Init+0x134>)
 800076c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076e:	f003 0304 	and.w	r3, r3, #4
 8000772:	61bb      	str	r3, [r7, #24]
 8000774:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000776:	4b41      	ldr	r3, [pc, #260]	; (800087c <MX_GPIO_Init+0x134>)
 8000778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077a:	4a40      	ldr	r2, [pc, #256]	; (800087c <MX_GPIO_Init+0x134>)
 800077c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000780:	6313      	str	r3, [r2, #48]	; 0x30
 8000782:	4b3e      	ldr	r3, [pc, #248]	; (800087c <MX_GPIO_Init+0x134>)
 8000784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000786:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800078a:	617b      	str	r3, [r7, #20]
 800078c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800078e:	4b3b      	ldr	r3, [pc, #236]	; (800087c <MX_GPIO_Init+0x134>)
 8000790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000792:	4a3a      	ldr	r2, [pc, #232]	; (800087c <MX_GPIO_Init+0x134>)
 8000794:	f043 0301 	orr.w	r3, r3, #1
 8000798:	6313      	str	r3, [r2, #48]	; 0x30
 800079a:	4b38      	ldr	r3, [pc, #224]	; (800087c <MX_GPIO_Init+0x134>)
 800079c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079e:	f003 0301 	and.w	r3, r3, #1
 80007a2:	613b      	str	r3, [r7, #16]
 80007a4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007a6:	4b35      	ldr	r3, [pc, #212]	; (800087c <MX_GPIO_Init+0x134>)
 80007a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007aa:	4a34      	ldr	r2, [pc, #208]	; (800087c <MX_GPIO_Init+0x134>)
 80007ac:	f043 0302 	orr.w	r3, r3, #2
 80007b0:	6313      	str	r3, [r2, #48]	; 0x30
 80007b2:	4b32      	ldr	r3, [pc, #200]	; (800087c <MX_GPIO_Init+0x134>)
 80007b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b6:	f003 0302 	and.w	r3, r3, #2
 80007ba:	60fb      	str	r3, [r7, #12]
 80007bc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007be:	4b2f      	ldr	r3, [pc, #188]	; (800087c <MX_GPIO_Init+0x134>)
 80007c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c2:	4a2e      	ldr	r2, [pc, #184]	; (800087c <MX_GPIO_Init+0x134>)
 80007c4:	f043 0308 	orr.w	r3, r3, #8
 80007c8:	6313      	str	r3, [r2, #48]	; 0x30
 80007ca:	4b2c      	ldr	r3, [pc, #176]	; (800087c <MX_GPIO_Init+0x134>)
 80007cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ce:	f003 0308 	and.w	r3, r3, #8
 80007d2:	60bb      	str	r3, [r7, #8]
 80007d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80007d6:	4b29      	ldr	r3, [pc, #164]	; (800087c <MX_GPIO_Init+0x134>)
 80007d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007da:	4a28      	ldr	r2, [pc, #160]	; (800087c <MX_GPIO_Init+0x134>)
 80007dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80007e0:	6313      	str	r3, [r2, #48]	; 0x30
 80007e2:	4b26      	ldr	r3, [pc, #152]	; (800087c <MX_GPIO_Init+0x134>)
 80007e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80007ea:	607b      	str	r3, [r7, #4]
 80007ec:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80007ee:	2200      	movs	r2, #0
 80007f0:	f244 0181 	movw	r1, #16513	; 0x4081
 80007f4:	4822      	ldr	r0, [pc, #136]	; (8000880 <MX_GPIO_Init+0x138>)
 80007f6:	f001 facd 	bl	8001d94 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80007fa:	2200      	movs	r2, #0
 80007fc:	2140      	movs	r1, #64	; 0x40
 80007fe:	4821      	ldr	r0, [pc, #132]	; (8000884 <MX_GPIO_Init+0x13c>)
 8000800:	f001 fac8 	bl	8001d94 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000804:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000808:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800080a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800080e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000810:	2300      	movs	r3, #0
 8000812:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000814:	f107 031c 	add.w	r3, r7, #28
 8000818:	4619      	mov	r1, r3
 800081a:	481b      	ldr	r0, [pc, #108]	; (8000888 <MX_GPIO_Init+0x140>)
 800081c:	f001 f90e 	bl	8001a3c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000820:	f244 0381 	movw	r3, #16513	; 0x4081
 8000824:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000826:	2301      	movs	r3, #1
 8000828:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800082a:	2300      	movs	r3, #0
 800082c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800082e:	2300      	movs	r3, #0
 8000830:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000832:	f107 031c 	add.w	r3, r7, #28
 8000836:	4619      	mov	r1, r3
 8000838:	4811      	ldr	r0, [pc, #68]	; (8000880 <MX_GPIO_Init+0x138>)
 800083a:	f001 f8ff 	bl	8001a3c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 800083e:	2340      	movs	r3, #64	; 0x40
 8000840:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000842:	2301      	movs	r3, #1
 8000844:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000846:	2300      	movs	r3, #0
 8000848:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800084a:	2300      	movs	r3, #0
 800084c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800084e:	f107 031c 	add.w	r3, r7, #28
 8000852:	4619      	mov	r1, r3
 8000854:	480b      	ldr	r0, [pc, #44]	; (8000884 <MX_GPIO_Init+0x13c>)
 8000856:	f001 f8f1 	bl	8001a3c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800085a:	2380      	movs	r3, #128	; 0x80
 800085c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800085e:	2300      	movs	r3, #0
 8000860:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000862:	2300      	movs	r3, #0
 8000864:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000866:	f107 031c 	add.w	r3, r7, #28
 800086a:	4619      	mov	r1, r3
 800086c:	4805      	ldr	r0, [pc, #20]	; (8000884 <MX_GPIO_Init+0x13c>)
 800086e:	f001 f8e5 	bl	8001a3c <HAL_GPIO_Init>

}
 8000872:	bf00      	nop
 8000874:	3730      	adds	r7, #48	; 0x30
 8000876:	46bd      	mov	sp, r7
 8000878:	bd80      	pop	{r7, pc}
 800087a:	bf00      	nop
 800087c:	40023800 	.word	0x40023800
 8000880:	40020400 	.word	0x40020400
 8000884:	40021800 	.word	0x40021800
 8000888:	40020800 	.word	0x40020800
 800088c:	00000000 	.word	0x00000000

08000890 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000894:	f000 fc45 	bl	8001122 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000898:	f000 f90c 	bl	8000ab4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800089c:	f7ff ff54 	bl	8000748 <MX_GPIO_Init>
  MX_ETH_Init();
 80008a0:	f7ff fe4c 	bl	800053c <MX_ETH_Init>
  MX_USART3_UART_Init();
 80008a4:	f000 fadc 	bl	8000e60 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80008a8:	f000 fb6a 	bl	8000f80 <MX_USB_OTG_FS_PCD_Init>
  MX_TIM2_Init();
 80008ac:	f000 f9d8 	bl	8000c60 <MX_TIM2_Init>
//	  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
//	  HAL_Delay(100);
//	  HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_3);
//	  pwm = (GPIOB->IDR & GPIO_PIN_10) >>10;

	  while (__HAL_UART_GET_FLAG(&huart3, UART_FLAG_RXNE) == RESET) {
 80008b0:	e020      	b.n	80008f4 <main+0x64>
		  pwm_b = ((GPIOB->IDR & GPIO_PIN_10) >>10)+0;
 80008b2:	4b73      	ldr	r3, [pc, #460]	; (8000a80 <main+0x1f0>)
 80008b4:	691b      	ldr	r3, [r3, #16]
 80008b6:	0a9b      	lsrs	r3, r3, #10
 80008b8:	b2db      	uxtb	r3, r3
 80008ba:	f003 0301 	and.w	r3, r3, #1
 80008be:	b2da      	uxtb	r2, r3
 80008c0:	4b70      	ldr	r3, [pc, #448]	; (8000a84 <main+0x1f4>)
 80008c2:	701a      	strb	r2, [r3, #0]
		  pwm_g = ((GPIOA->IDR & GPIO_PIN_3) >>3)+2;
 80008c4:	4b70      	ldr	r3, [pc, #448]	; (8000a88 <main+0x1f8>)
 80008c6:	691b      	ldr	r3, [r3, #16]
 80008c8:	08db      	lsrs	r3, r3, #3
 80008ca:	b2db      	uxtb	r3, r3
 80008cc:	f003 0301 	and.w	r3, r3, #1
 80008d0:	b2db      	uxtb	r3, r3
 80008d2:	3302      	adds	r3, #2
 80008d4:	b2da      	uxtb	r2, r3
 80008d6:	4b6d      	ldr	r3, [pc, #436]	; (8000a8c <main+0x1fc>)
 80008d8:	701a      	strb	r2, [r3, #0]
		  pwm_r = ((GPIOA->IDR & GPIO_PIN_0) >>0)+4;
 80008da:	4b6b      	ldr	r3, [pc, #428]	; (8000a88 <main+0x1f8>)
 80008dc:	691b      	ldr	r3, [r3, #16]
 80008de:	b2db      	uxtb	r3, r3
 80008e0:	f003 0301 	and.w	r3, r3, #1
 80008e4:	b2db      	uxtb	r3, r3
 80008e6:	3304      	adds	r3, #4
 80008e8:	b2da      	uxtb	r2, r3
 80008ea:	4b69      	ldr	r3, [pc, #420]	; (8000a90 <main+0x200>)
 80008ec:	701a      	strb	r2, [r3, #0]
		  HAL_Delay(100);
 80008ee:	2064      	movs	r0, #100	; 0x64
 80008f0:	f000 fc74 	bl	80011dc <HAL_Delay>
	  while (__HAL_UART_GET_FLAG(&huart3, UART_FLAG_RXNE) == RESET) {
 80008f4:	4b67      	ldr	r3, [pc, #412]	; (8000a94 <main+0x204>)
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	69db      	ldr	r3, [r3, #28]
 80008fa:	f003 0320 	and.w	r3, r3, #32
 80008fe:	2b20      	cmp	r3, #32
 8000900:	d1d7      	bne.n	80008b2 <main+0x22>
	  }
	  HAL_UART_Receive(&huart3, (uint8_t*) &ch1, 1, 1000);
 8000902:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000906:	2201      	movs	r2, #1
 8000908:	4963      	ldr	r1, [pc, #396]	; (8000a98 <main+0x208>)
 800090a:	4862      	ldr	r0, [pc, #392]	; (8000a94 <main+0x204>)
 800090c:	f003 fe2d 	bl	800456a <HAL_UART_Receive>
	  HAL_UART_Transmit(&huart3, &ch1, 1, 1000);
 8000910:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000914:	2201      	movs	r2, #1
 8000916:	4960      	ldr	r1, [pc, #384]	; (8000a98 <main+0x208>)
 8000918:	485e      	ldr	r0, [pc, #376]	; (8000a94 <main+0x204>)
 800091a:	f003 fda3 	bl	8004464 <HAL_UART_Transmit>
	  HAL_UART_Transmit(&huart3, "\n\r", 2, 1000);
 800091e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000922:	2202      	movs	r2, #2
 8000924:	495d      	ldr	r1, [pc, #372]	; (8000a9c <main+0x20c>)
 8000926:	485b      	ldr	r0, [pc, #364]	; (8000a94 <main+0x204>)
 8000928:	f003 fd9c 	bl	8004464 <HAL_UART_Transmit>
	  if(ch1=='r'){
 800092c:	4b5a      	ldr	r3, [pc, #360]	; (8000a98 <main+0x208>)
 800092e:	781b      	ldrb	r3, [r3, #0]
 8000930:	2b72      	cmp	r3, #114	; 0x72
 8000932:	d131      	bne.n	8000998 <main+0x108>
		  dutyCycle_R += 0.2;
 8000934:	4b5a      	ldr	r3, [pc, #360]	; (8000aa0 <main+0x210>)
 8000936:	edd3 7a00 	vldr	s15, [r3]
 800093a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800093e:	ed9f 6b4e 	vldr	d6, [pc, #312]	; 8000a78 <main+0x1e8>
 8000942:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000946:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800094a:	4b55      	ldr	r3, [pc, #340]	; (8000aa0 <main+0x210>)
 800094c:	edc3 7a00 	vstr	s15, [r3]
		  if(dutyCycle_R > 1){
 8000950:	4b53      	ldr	r3, [pc, #332]	; (8000aa0 <main+0x210>)
 8000952:	edd3 7a00 	vldr	s15, [r3]
 8000956:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800095a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800095e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000962:	dd03      	ble.n	800096c <main+0xdc>
			  dutyCycle_R = 0;
 8000964:	4b4e      	ldr	r3, [pc, #312]	; (8000aa0 <main+0x210>)
 8000966:	f04f 0200 	mov.w	r2, #0
 800096a:	601a      	str	r2, [r3, #0]
		  }
		  HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_1);
 800096c:	2100      	movs	r1, #0
 800096e:	484d      	ldr	r0, [pc, #308]	; (8000aa4 <main+0x214>)
 8000970:	f002 fe80 	bl	8003674 <HAL_TIM_PWM_Stop>
		  htim2.Instance -> CCR1 = (10000-1) * dutyCycle_R;
 8000974:	4b4a      	ldr	r3, [pc, #296]	; (8000aa0 <main+0x210>)
 8000976:	edd3 7a00 	vldr	s15, [r3]
 800097a:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 8000aa8 <main+0x218>
 800097e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000982:	4b48      	ldr	r3, [pc, #288]	; (8000aa4 <main+0x214>)
 8000984:	681b      	ldr	r3, [r3, #0]
 8000986:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800098a:	ee17 2a90 	vmov	r2, s15
 800098e:	635a      	str	r2, [r3, #52]	; 0x34
		  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000990:	2100      	movs	r1, #0
 8000992:	4844      	ldr	r0, [pc, #272]	; (8000aa4 <main+0x214>)
 8000994:	f002 fd74 	bl	8003480 <HAL_TIM_PWM_Start>
	  }
	  if(ch1=='g'){
 8000998:	4b3f      	ldr	r3, [pc, #252]	; (8000a98 <main+0x208>)
 800099a:	781b      	ldrb	r3, [r3, #0]
 800099c:	2b67      	cmp	r3, #103	; 0x67
 800099e:	d131      	bne.n	8000a04 <main+0x174>
	  	  dutyCycle_G += 0.2;
 80009a0:	4b42      	ldr	r3, [pc, #264]	; (8000aac <main+0x21c>)
 80009a2:	edd3 7a00 	vldr	s15, [r3]
 80009a6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80009aa:	ed9f 6b33 	vldr	d6, [pc, #204]	; 8000a78 <main+0x1e8>
 80009ae:	ee37 7b06 	vadd.f64	d7, d7, d6
 80009b2:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80009b6:	4b3d      	ldr	r3, [pc, #244]	; (8000aac <main+0x21c>)
 80009b8:	edc3 7a00 	vstr	s15, [r3]
	  	  if(dutyCycle_G > 1){
 80009bc:	4b3b      	ldr	r3, [pc, #236]	; (8000aac <main+0x21c>)
 80009be:	edd3 7a00 	vldr	s15, [r3]
 80009c2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80009c6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80009ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80009ce:	dd03      	ble.n	80009d8 <main+0x148>
	  		  dutyCycle_G = 0;
 80009d0:	4b36      	ldr	r3, [pc, #216]	; (8000aac <main+0x21c>)
 80009d2:	f04f 0200 	mov.w	r2, #0
 80009d6:	601a      	str	r2, [r3, #0]
	  	  }
	  	  HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_4);
 80009d8:	210c      	movs	r1, #12
 80009da:	4832      	ldr	r0, [pc, #200]	; (8000aa4 <main+0x214>)
 80009dc:	f002 fe4a 	bl	8003674 <HAL_TIM_PWM_Stop>
	  	  htim2.Instance -> CCR4 = (10000-1) * dutyCycle_G;
 80009e0:	4b32      	ldr	r3, [pc, #200]	; (8000aac <main+0x21c>)
 80009e2:	edd3 7a00 	vldr	s15, [r3]
 80009e6:	ed9f 7a30 	vldr	s14, [pc, #192]	; 8000aa8 <main+0x218>
 80009ea:	ee67 7a87 	vmul.f32	s15, s15, s14
 80009ee:	4b2d      	ldr	r3, [pc, #180]	; (8000aa4 <main+0x214>)
 80009f0:	681b      	ldr	r3, [r3, #0]
 80009f2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80009f6:	ee17 2a90 	vmov	r2, s15
 80009fa:	641a      	str	r2, [r3, #64]	; 0x40
	  	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 80009fc:	210c      	movs	r1, #12
 80009fe:	4829      	ldr	r0, [pc, #164]	; (8000aa4 <main+0x214>)
 8000a00:	f002 fd3e 	bl	8003480 <HAL_TIM_PWM_Start>
	  }
	  if(ch1=='b'){
 8000a04:	4b24      	ldr	r3, [pc, #144]	; (8000a98 <main+0x208>)
 8000a06:	781b      	ldrb	r3, [r3, #0]
 8000a08:	2b62      	cmp	r3, #98	; 0x62
 8000a0a:	f47f af73 	bne.w	80008f4 <main+0x64>
		  dutyCycle_B += 0.2;
 8000a0e:	4b28      	ldr	r3, [pc, #160]	; (8000ab0 <main+0x220>)
 8000a10:	edd3 7a00 	vldr	s15, [r3]
 8000a14:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000a18:	ed9f 6b17 	vldr	d6, [pc, #92]	; 8000a78 <main+0x1e8>
 8000a1c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000a20:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000a24:	4b22      	ldr	r3, [pc, #136]	; (8000ab0 <main+0x220>)
 8000a26:	edc3 7a00 	vstr	s15, [r3]
		  if(dutyCycle_B > 1){
 8000a2a:	4b21      	ldr	r3, [pc, #132]	; (8000ab0 <main+0x220>)
 8000a2c:	edd3 7a00 	vldr	s15, [r3]
 8000a30:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000a34:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000a38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000a3c:	dd03      	ble.n	8000a46 <main+0x1b6>
			  dutyCycle_B = 0;
 8000a3e:	4b1c      	ldr	r3, [pc, #112]	; (8000ab0 <main+0x220>)
 8000a40:	f04f 0200 	mov.w	r2, #0
 8000a44:	601a      	str	r2, [r3, #0]
		  }
		  HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_3);
 8000a46:	2108      	movs	r1, #8
 8000a48:	4816      	ldr	r0, [pc, #88]	; (8000aa4 <main+0x214>)
 8000a4a:	f002 fe13 	bl	8003674 <HAL_TIM_PWM_Stop>
		  htim2.Instance -> CCR3 = (10000-1) * dutyCycle_B;
 8000a4e:	4b18      	ldr	r3, [pc, #96]	; (8000ab0 <main+0x220>)
 8000a50:	edd3 7a00 	vldr	s15, [r3]
 8000a54:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8000aa8 <main+0x218>
 8000a58:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000a5c:	4b11      	ldr	r3, [pc, #68]	; (8000aa4 <main+0x214>)
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000a64:	ee17 2a90 	vmov	r2, s15
 8000a68:	63da      	str	r2, [r3, #60]	; 0x3c
		  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8000a6a:	2108      	movs	r1, #8
 8000a6c:	480d      	ldr	r0, [pc, #52]	; (8000aa4 <main+0x214>)
 8000a6e:	f002 fd07 	bl	8003480 <HAL_TIM_PWM_Start>
	  while (__HAL_UART_GET_FLAG(&huart3, UART_FLAG_RXNE) == RESET) {
 8000a72:	e73f      	b.n	80008f4 <main+0x64>
 8000a74:	f3af 8000 	nop.w
 8000a78:	9999999a 	.word	0x9999999a
 8000a7c:	3fc99999 	.word	0x3fc99999
 8000a80:	40020400 	.word	0x40020400
 8000a84:	20000258 	.word	0x20000258
 8000a88:	40020000 	.word	0x40020000
 8000a8c:	20000257 	.word	0x20000257
 8000a90:	20000256 	.word	0x20000256
 8000a94:	200002b8 	.word	0x200002b8
 8000a98:	20000268 	.word	0x20000268
 8000a9c:	08005580 	.word	0x08005580
 8000aa0:	20000260 	.word	0x20000260
 8000aa4:	2000026c 	.word	0x2000026c
 8000aa8:	461c3c00 	.word	0x461c3c00
 8000aac:	20000264 	.word	0x20000264
 8000ab0:	2000025c 	.word	0x2000025c

08000ab4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b094      	sub	sp, #80	; 0x50
 8000ab8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000aba:	f107 031c 	add.w	r3, r7, #28
 8000abe:	2234      	movs	r2, #52	; 0x34
 8000ac0:	2100      	movs	r1, #0
 8000ac2:	4618      	mov	r0, r3
 8000ac4:	f004 fd48 	bl	8005558 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ac8:	f107 0308 	add.w	r3, r7, #8
 8000acc:	2200      	movs	r2, #0
 8000ace:	601a      	str	r2, [r3, #0]
 8000ad0:	605a      	str	r2, [r3, #4]
 8000ad2:	609a      	str	r2, [r3, #8]
 8000ad4:	60da      	str	r2, [r3, #12]
 8000ad6:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000ad8:	f001 fabe 	bl	8002058 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000adc:	4b2b      	ldr	r3, [pc, #172]	; (8000b8c <SystemClock_Config+0xd8>)
 8000ade:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ae0:	4a2a      	ldr	r2, [pc, #168]	; (8000b8c <SystemClock_Config+0xd8>)
 8000ae2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ae6:	6413      	str	r3, [r2, #64]	; 0x40
 8000ae8:	4b28      	ldr	r3, [pc, #160]	; (8000b8c <SystemClock_Config+0xd8>)
 8000aea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000af0:	607b      	str	r3, [r7, #4]
 8000af2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000af4:	4b26      	ldr	r3, [pc, #152]	; (8000b90 <SystemClock_Config+0xdc>)
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	4a25      	ldr	r2, [pc, #148]	; (8000b90 <SystemClock_Config+0xdc>)
 8000afa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000afe:	6013      	str	r3, [r2, #0]
 8000b00:	4b23      	ldr	r3, [pc, #140]	; (8000b90 <SystemClock_Config+0xdc>)
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000b08:	603b      	str	r3, [r7, #0]
 8000b0a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000b0c:	2301      	movs	r3, #1
 8000b0e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000b10:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000b14:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b16:	2302      	movs	r3, #2
 8000b18:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b1a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000b1e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000b20:	2304      	movs	r3, #4
 8000b22:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 216;
 8000b24:	23d8      	movs	r3, #216	; 0xd8
 8000b26:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000b28:	2302      	movs	r3, #2
 8000b2a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8000b2c:	2309      	movs	r3, #9
 8000b2e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000b30:	2302      	movs	r3, #2
 8000b32:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b34:	f107 031c 	add.w	r3, r7, #28
 8000b38:	4618      	mov	r0, r3
 8000b3a:	f001 faed 	bl	8002118 <HAL_RCC_OscConfig>
 8000b3e:	4603      	mov	r3, r0
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d001      	beq.n	8000b48 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000b44:	f000 f826 	bl	8000b94 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000b48:	f001 fa96 	bl	8002078 <HAL_PWREx_EnableOverDrive>
 8000b4c:	4603      	mov	r3, r0
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d001      	beq.n	8000b56 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8000b52:	f000 f81f 	bl	8000b94 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b56:	230f      	movs	r3, #15
 8000b58:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b5a:	2302      	movs	r3, #2
 8000b5c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000b62:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000b66:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000b68:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b6c:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000b6e:	f107 0308 	add.w	r3, r7, #8
 8000b72:	2107      	movs	r1, #7
 8000b74:	4618      	mov	r0, r3
 8000b76:	f001 fd7d 	bl	8002674 <HAL_RCC_ClockConfig>
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d001      	beq.n	8000b84 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8000b80:	f000 f808 	bl	8000b94 <Error_Handler>
  }
}
 8000b84:	bf00      	nop
 8000b86:	3750      	adds	r7, #80	; 0x50
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	bd80      	pop	{r7, pc}
 8000b8c:	40023800 	.word	0x40023800
 8000b90:	40007000 	.word	0x40007000

08000b94 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b94:	b480      	push	{r7}
 8000b96:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b98:	b672      	cpsid	i
}
 8000b9a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b9c:	e7fe      	b.n	8000b9c <Error_Handler+0x8>
	...

08000ba0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b082      	sub	sp, #8
 8000ba4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000ba6:	4b0f      	ldr	r3, [pc, #60]	; (8000be4 <HAL_MspInit+0x44>)
 8000ba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000baa:	4a0e      	ldr	r2, [pc, #56]	; (8000be4 <HAL_MspInit+0x44>)
 8000bac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bb0:	6413      	str	r3, [r2, #64]	; 0x40
 8000bb2:	4b0c      	ldr	r3, [pc, #48]	; (8000be4 <HAL_MspInit+0x44>)
 8000bb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bba:	607b      	str	r3, [r7, #4]
 8000bbc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bbe:	4b09      	ldr	r3, [pc, #36]	; (8000be4 <HAL_MspInit+0x44>)
 8000bc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bc2:	4a08      	ldr	r2, [pc, #32]	; (8000be4 <HAL_MspInit+0x44>)
 8000bc4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000bc8:	6453      	str	r3, [r2, #68]	; 0x44
 8000bca:	4b06      	ldr	r3, [pc, #24]	; (8000be4 <HAL_MspInit+0x44>)
 8000bcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000bd2:	603b      	str	r3, [r7, #0]
 8000bd4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_2);
 8000bd6:	2005      	movs	r0, #5
 8000bd8:	f000 fbd6 	bl	8001388 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bdc:	bf00      	nop
 8000bde:	3708      	adds	r7, #8
 8000be0:	46bd      	mov	sp, r7
 8000be2:	bd80      	pop	{r7, pc}
 8000be4:	40023800 	.word	0x40023800

08000be8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000be8:	b480      	push	{r7}
 8000bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000bec:	e7fe      	b.n	8000bec <NMI_Handler+0x4>

08000bee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bee:	b480      	push	{r7}
 8000bf0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bf2:	e7fe      	b.n	8000bf2 <HardFault_Handler+0x4>

08000bf4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bf8:	e7fe      	b.n	8000bf8 <MemManage_Handler+0x4>

08000bfa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bfa:	b480      	push	{r7}
 8000bfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bfe:	e7fe      	b.n	8000bfe <BusFault_Handler+0x4>

08000c00 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c00:	b480      	push	{r7}
 8000c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c04:	e7fe      	b.n	8000c04 <UsageFault_Handler+0x4>

08000c06 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c06:	b480      	push	{r7}
 8000c08:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c0a:	bf00      	nop
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c12:	4770      	bx	lr

08000c14 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c14:	b480      	push	{r7}
 8000c16:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c18:	bf00      	nop
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c20:	4770      	bx	lr

08000c22 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c22:	b480      	push	{r7}
 8000c24:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c26:	bf00      	nop
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2e:	4770      	bx	lr

08000c30 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c34:	f000 fab2 	bl	800119c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c38:	bf00      	nop
 8000c3a:	bd80      	pop	{r7, pc}

08000c3c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c40:	4b06      	ldr	r3, [pc, #24]	; (8000c5c <SystemInit+0x20>)
 8000c42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c46:	4a05      	ldr	r2, [pc, #20]	; (8000c5c <SystemInit+0x20>)
 8000c48:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c4c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c50:	bf00      	nop
 8000c52:	46bd      	mov	sp, r7
 8000c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c58:	4770      	bx	lr
 8000c5a:	bf00      	nop
 8000c5c:	e000ed00 	.word	0xe000ed00

08000c60 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b08e      	sub	sp, #56	; 0x38
 8000c64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c66:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	601a      	str	r2, [r3, #0]
 8000c6e:	605a      	str	r2, [r3, #4]
 8000c70:	609a      	str	r2, [r3, #8]
 8000c72:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c74:	f107 031c 	add.w	r3, r7, #28
 8000c78:	2200      	movs	r2, #0
 8000c7a:	601a      	str	r2, [r3, #0]
 8000c7c:	605a      	str	r2, [r3, #4]
 8000c7e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000c80:	463b      	mov	r3, r7
 8000c82:	2200      	movs	r2, #0
 8000c84:	601a      	str	r2, [r3, #0]
 8000c86:	605a      	str	r2, [r3, #4]
 8000c88:	609a      	str	r2, [r3, #8]
 8000c8a:	60da      	str	r2, [r3, #12]
 8000c8c:	611a      	str	r2, [r3, #16]
 8000c8e:	615a      	str	r2, [r3, #20]
 8000c90:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000c92:	4b39      	ldr	r3, [pc, #228]	; (8000d78 <MX_TIM2_Init+0x118>)
 8000c94:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c98:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 108-1;
 8000c9a:	4b37      	ldr	r3, [pc, #220]	; (8000d78 <MX_TIM2_Init+0x118>)
 8000c9c:	226b      	movs	r2, #107	; 0x6b
 8000c9e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ca0:	4b35      	ldr	r3, [pc, #212]	; (8000d78 <MX_TIM2_Init+0x118>)
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000-1;
 8000ca6:	4b34      	ldr	r3, [pc, #208]	; (8000d78 <MX_TIM2_Init+0x118>)
 8000ca8:	f242 720f 	movw	r2, #9999	; 0x270f
 8000cac:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000cae:	4b32      	ldr	r3, [pc, #200]	; (8000d78 <MX_TIM2_Init+0x118>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cb4:	4b30      	ldr	r3, [pc, #192]	; (8000d78 <MX_TIM2_Init+0x118>)
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000cba:	482f      	ldr	r0, [pc, #188]	; (8000d78 <MX_TIM2_Init+0x118>)
 8000cbc:	f002 fb28 	bl	8003310 <HAL_TIM_Base_Init>
 8000cc0:	4603      	mov	r3, r0
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d001      	beq.n	8000cca <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8000cc6:	f7ff ff65 	bl	8000b94 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000cca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000cce:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000cd0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000cd4:	4619      	mov	r1, r3
 8000cd6:	4828      	ldr	r0, [pc, #160]	; (8000d78 <MX_TIM2_Init+0x118>)
 8000cd8:	f002 fe60 	bl	800399c <HAL_TIM_ConfigClockSource>
 8000cdc:	4603      	mov	r3, r0
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d001      	beq.n	8000ce6 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8000ce2:	f7ff ff57 	bl	8000b94 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000ce6:	4824      	ldr	r0, [pc, #144]	; (8000d78 <MX_TIM2_Init+0x118>)
 8000ce8:	f002 fb69 	bl	80033be <HAL_TIM_PWM_Init>
 8000cec:	4603      	mov	r3, r0
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d001      	beq.n	8000cf6 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8000cf2:	f7ff ff4f 	bl	8000b94 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000cfe:	f107 031c 	add.w	r3, r7, #28
 8000d02:	4619      	mov	r1, r3
 8000d04:	481c      	ldr	r0, [pc, #112]	; (8000d78 <MX_TIM2_Init+0x118>)
 8000d06:	f003 fad1 	bl	80042ac <HAL_TIMEx_MasterConfigSynchronization>
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d001      	beq.n	8000d14 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8000d10:	f7ff ff40 	bl	8000b94 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000d14:	2360      	movs	r3, #96	; 0x60
 8000d16:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 10000/4-1;
 8000d18:	f640 13c3 	movw	r3, #2499	; 0x9c3
 8000d1c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d22:	2300      	movs	r3, #0
 8000d24:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000d26:	463b      	mov	r3, r7
 8000d28:	2200      	movs	r2, #0
 8000d2a:	4619      	mov	r1, r3
 8000d2c:	4812      	ldr	r0, [pc, #72]	; (8000d78 <MX_TIM2_Init+0x118>)
 8000d2e:	f002 fd21 	bl	8003774 <HAL_TIM_PWM_ConfigChannel>
 8000d32:	4603      	mov	r3, r0
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d001      	beq.n	8000d3c <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 8000d38:	f7ff ff2c 	bl	8000b94 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000d3c:	463b      	mov	r3, r7
 8000d3e:	2208      	movs	r2, #8
 8000d40:	4619      	mov	r1, r3
 8000d42:	480d      	ldr	r0, [pc, #52]	; (8000d78 <MX_TIM2_Init+0x118>)
 8000d44:	f002 fd16 	bl	8003774 <HAL_TIM_PWM_ConfigChannel>
 8000d48:	4603      	mov	r3, r0
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d001      	beq.n	8000d52 <MX_TIM2_Init+0xf2>
  {
    Error_Handler();
 8000d4e:	f7ff ff21 	bl	8000b94 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000d52:	463b      	mov	r3, r7
 8000d54:	220c      	movs	r2, #12
 8000d56:	4619      	mov	r1, r3
 8000d58:	4807      	ldr	r0, [pc, #28]	; (8000d78 <MX_TIM2_Init+0x118>)
 8000d5a:	f002 fd0b 	bl	8003774 <HAL_TIM_PWM_ConfigChannel>
 8000d5e:	4603      	mov	r3, r0
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d001      	beq.n	8000d68 <MX_TIM2_Init+0x108>
  {
    Error_Handler();
 8000d64:	f7ff ff16 	bl	8000b94 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000d68:	4803      	ldr	r0, [pc, #12]	; (8000d78 <MX_TIM2_Init+0x118>)
 8000d6a:	f000 f825 	bl	8000db8 <HAL_TIM_MspPostInit>

}
 8000d6e:	bf00      	nop
 8000d70:	3738      	adds	r7, #56	; 0x38
 8000d72:	46bd      	mov	sp, r7
 8000d74:	bd80      	pop	{r7, pc}
 8000d76:	bf00      	nop
 8000d78:	2000026c 	.word	0x2000026c

08000d7c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	b085      	sub	sp, #20
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000d8c:	d10b      	bne.n	8000da6 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000d8e:	4b09      	ldr	r3, [pc, #36]	; (8000db4 <HAL_TIM_Base_MspInit+0x38>)
 8000d90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d92:	4a08      	ldr	r2, [pc, #32]	; (8000db4 <HAL_TIM_Base_MspInit+0x38>)
 8000d94:	f043 0301 	orr.w	r3, r3, #1
 8000d98:	6413      	str	r3, [r2, #64]	; 0x40
 8000d9a:	4b06      	ldr	r3, [pc, #24]	; (8000db4 <HAL_TIM_Base_MspInit+0x38>)
 8000d9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d9e:	f003 0301 	and.w	r3, r3, #1
 8000da2:	60fb      	str	r3, [r7, #12]
 8000da4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8000da6:	bf00      	nop
 8000da8:	3714      	adds	r7, #20
 8000daa:	46bd      	mov	sp, r7
 8000dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db0:	4770      	bx	lr
 8000db2:	bf00      	nop
 8000db4:	40023800 	.word	0x40023800

08000db8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b08a      	sub	sp, #40	; 0x28
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dc0:	f107 0314 	add.w	r3, r7, #20
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	601a      	str	r2, [r3, #0]
 8000dc8:	605a      	str	r2, [r3, #4]
 8000dca:	609a      	str	r2, [r3, #8]
 8000dcc:	60da      	str	r2, [r3, #12]
 8000dce:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000dd8:	d138      	bne.n	8000e4c <HAL_TIM_MspPostInit+0x94>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dda:	4b1e      	ldr	r3, [pc, #120]	; (8000e54 <HAL_TIM_MspPostInit+0x9c>)
 8000ddc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dde:	4a1d      	ldr	r2, [pc, #116]	; (8000e54 <HAL_TIM_MspPostInit+0x9c>)
 8000de0:	f043 0301 	orr.w	r3, r3, #1
 8000de4:	6313      	str	r3, [r2, #48]	; 0x30
 8000de6:	4b1b      	ldr	r3, [pc, #108]	; (8000e54 <HAL_TIM_MspPostInit+0x9c>)
 8000de8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dea:	f003 0301 	and.w	r3, r3, #1
 8000dee:	613b      	str	r3, [r7, #16]
 8000df0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000df2:	4b18      	ldr	r3, [pc, #96]	; (8000e54 <HAL_TIM_MspPostInit+0x9c>)
 8000df4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000df6:	4a17      	ldr	r2, [pc, #92]	; (8000e54 <HAL_TIM_MspPostInit+0x9c>)
 8000df8:	f043 0302 	orr.w	r3, r3, #2
 8000dfc:	6313      	str	r3, [r2, #48]	; 0x30
 8000dfe:	4b15      	ldr	r3, [pc, #84]	; (8000e54 <HAL_TIM_MspPostInit+0x9c>)
 8000e00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e02:	f003 0302 	and.w	r3, r3, #2
 8000e06:	60fb      	str	r3, [r7, #12]
 8000e08:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0/WKUP     ------> TIM2_CH1
    PA3     ------> TIM2_CH4
    PB10     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3;
 8000e0a:	2309      	movs	r3, #9
 8000e0c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e0e:	2302      	movs	r3, #2
 8000e10:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e12:	2300      	movs	r3, #0
 8000e14:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e16:	2300      	movs	r3, #0
 8000e18:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000e1a:	2301      	movs	r3, #1
 8000e1c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e1e:	f107 0314 	add.w	r3, r7, #20
 8000e22:	4619      	mov	r1, r3
 8000e24:	480c      	ldr	r0, [pc, #48]	; (8000e58 <HAL_TIM_MspPostInit+0xa0>)
 8000e26:	f000 fe09 	bl	8001a3c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000e2a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e2e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e30:	2302      	movs	r3, #2
 8000e32:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e34:	2300      	movs	r3, #0
 8000e36:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e38:	2303      	movs	r3, #3
 8000e3a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000e3c:	2301      	movs	r3, #1
 8000e3e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e40:	f107 0314 	add.w	r3, r7, #20
 8000e44:	4619      	mov	r1, r3
 8000e46:	4805      	ldr	r0, [pc, #20]	; (8000e5c <HAL_TIM_MspPostInit+0xa4>)
 8000e48:	f000 fdf8 	bl	8001a3c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000e4c:	bf00      	nop
 8000e4e:	3728      	adds	r7, #40	; 0x28
 8000e50:	46bd      	mov	sp, r7
 8000e52:	bd80      	pop	{r7, pc}
 8000e54:	40023800 	.word	0x40023800
 8000e58:	40020000 	.word	0x40020000
 8000e5c:	40020400 	.word	0x40020400

08000e60 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000e64:	4b14      	ldr	r3, [pc, #80]	; (8000eb8 <MX_USART3_UART_Init+0x58>)
 8000e66:	4a15      	ldr	r2, [pc, #84]	; (8000ebc <MX_USART3_UART_Init+0x5c>)
 8000e68:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000e6a:	4b13      	ldr	r3, [pc, #76]	; (8000eb8 <MX_USART3_UART_Init+0x58>)
 8000e6c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000e70:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000e72:	4b11      	ldr	r3, [pc, #68]	; (8000eb8 <MX_USART3_UART_Init+0x58>)
 8000e74:	2200      	movs	r2, #0
 8000e76:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000e78:	4b0f      	ldr	r3, [pc, #60]	; (8000eb8 <MX_USART3_UART_Init+0x58>)
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000e7e:	4b0e      	ldr	r3, [pc, #56]	; (8000eb8 <MX_USART3_UART_Init+0x58>)
 8000e80:	2200      	movs	r2, #0
 8000e82:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000e84:	4b0c      	ldr	r3, [pc, #48]	; (8000eb8 <MX_USART3_UART_Init+0x58>)
 8000e86:	220c      	movs	r2, #12
 8000e88:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e8a:	4b0b      	ldr	r3, [pc, #44]	; (8000eb8 <MX_USART3_UART_Init+0x58>)
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e90:	4b09      	ldr	r3, [pc, #36]	; (8000eb8 <MX_USART3_UART_Init+0x58>)
 8000e92:	2200      	movs	r2, #0
 8000e94:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000e96:	4b08      	ldr	r3, [pc, #32]	; (8000eb8 <MX_USART3_UART_Init+0x58>)
 8000e98:	2200      	movs	r2, #0
 8000e9a:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000e9c:	4b06      	ldr	r3, [pc, #24]	; (8000eb8 <MX_USART3_UART_Init+0x58>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000ea2:	4805      	ldr	r0, [pc, #20]	; (8000eb8 <MX_USART3_UART_Init+0x58>)
 8000ea4:	f003 fa90 	bl	80043c8 <HAL_UART_Init>
 8000ea8:	4603      	mov	r3, r0
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d001      	beq.n	8000eb2 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000eae:	f7ff fe71 	bl	8000b94 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000eb2:	bf00      	nop
 8000eb4:	bd80      	pop	{r7, pc}
 8000eb6:	bf00      	nop
 8000eb8:	200002b8 	.word	0x200002b8
 8000ebc:	40004800 	.word	0x40004800

08000ec0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b0ae      	sub	sp, #184	; 0xb8
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ec8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000ecc:	2200      	movs	r2, #0
 8000ece:	601a      	str	r2, [r3, #0]
 8000ed0:	605a      	str	r2, [r3, #4]
 8000ed2:	609a      	str	r2, [r3, #8]
 8000ed4:	60da      	str	r2, [r3, #12]
 8000ed6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ed8:	f107 0314 	add.w	r3, r7, #20
 8000edc:	2290      	movs	r2, #144	; 0x90
 8000ede:	2100      	movs	r1, #0
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	f004 fb39 	bl	8005558 <memset>
  if(uartHandle->Instance==USART3)
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	4a22      	ldr	r2, [pc, #136]	; (8000f74 <HAL_UART_MspInit+0xb4>)
 8000eec:	4293      	cmp	r3, r2
 8000eee:	d13c      	bne.n	8000f6a <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000ef0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000ef4:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000efa:	f107 0314 	add.w	r3, r7, #20
 8000efe:	4618      	mov	r0, r3
 8000f00:	f001 fdde 	bl	8002ac0 <HAL_RCCEx_PeriphCLKConfig>
 8000f04:	4603      	mov	r3, r0
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d001      	beq.n	8000f0e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000f0a:	f7ff fe43 	bl	8000b94 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000f0e:	4b1a      	ldr	r3, [pc, #104]	; (8000f78 <HAL_UART_MspInit+0xb8>)
 8000f10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f12:	4a19      	ldr	r2, [pc, #100]	; (8000f78 <HAL_UART_MspInit+0xb8>)
 8000f14:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f18:	6413      	str	r3, [r2, #64]	; 0x40
 8000f1a:	4b17      	ldr	r3, [pc, #92]	; (8000f78 <HAL_UART_MspInit+0xb8>)
 8000f1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f1e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000f22:	613b      	str	r3, [r7, #16]
 8000f24:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f26:	4b14      	ldr	r3, [pc, #80]	; (8000f78 <HAL_UART_MspInit+0xb8>)
 8000f28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f2a:	4a13      	ldr	r2, [pc, #76]	; (8000f78 <HAL_UART_MspInit+0xb8>)
 8000f2c:	f043 0308 	orr.w	r3, r3, #8
 8000f30:	6313      	str	r3, [r2, #48]	; 0x30
 8000f32:	4b11      	ldr	r3, [pc, #68]	; (8000f78 <HAL_UART_MspInit+0xb8>)
 8000f34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f36:	f003 0308 	and.w	r3, r3, #8
 8000f3a:	60fb      	str	r3, [r7, #12]
 8000f3c:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000f3e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000f42:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f46:	2302      	movs	r3, #2
 8000f48:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f52:	2303      	movs	r3, #3
 8000f54:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000f58:	2307      	movs	r3, #7
 8000f5a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f5e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000f62:	4619      	mov	r1, r3
 8000f64:	4805      	ldr	r0, [pc, #20]	; (8000f7c <HAL_UART_MspInit+0xbc>)
 8000f66:	f000 fd69 	bl	8001a3c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8000f6a:	bf00      	nop
 8000f6c:	37b8      	adds	r7, #184	; 0xb8
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bd80      	pop	{r7, pc}
 8000f72:	bf00      	nop
 8000f74:	40004800 	.word	0x40004800
 8000f78:	40023800 	.word	0x40023800
 8000f7c:	40020c00 	.word	0x40020c00

08000f80 <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000f84:	4b14      	ldr	r3, [pc, #80]	; (8000fd8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000f86:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000f8a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000f8c:	4b12      	ldr	r3, [pc, #72]	; (8000fd8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000f8e:	2206      	movs	r2, #6
 8000f90:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000f92:	4b11      	ldr	r3, [pc, #68]	; (8000fd8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000f94:	2202      	movs	r2, #2
 8000f96:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000f98:	4b0f      	ldr	r3, [pc, #60]	; (8000fd8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000f9e:	4b0e      	ldr	r3, [pc, #56]	; (8000fd8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000fa0:	2202      	movs	r2, #2
 8000fa2:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000fa4:	4b0c      	ldr	r3, [pc, #48]	; (8000fd8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000fa6:	2201      	movs	r2, #1
 8000fa8:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000faa:	4b0b      	ldr	r3, [pc, #44]	; (8000fd8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000fac:	2200      	movs	r2, #0
 8000fae:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000fb0:	4b09      	ldr	r3, [pc, #36]	; (8000fd8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000fb6:	4b08      	ldr	r3, [pc, #32]	; (8000fd8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000fb8:	2201      	movs	r2, #1
 8000fba:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000fbc:	4b06      	ldr	r3, [pc, #24]	; (8000fd8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000fc2:	4805      	ldr	r0, [pc, #20]	; (8000fd8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000fc4:	f000 feff 	bl	8001dc6 <HAL_PCD_Init>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d001      	beq.n	8000fd2 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000fce:	f7ff fde1 	bl	8000b94 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000fd2:	bf00      	nop
 8000fd4:	bd80      	pop	{r7, pc}
 8000fd6:	bf00      	nop
 8000fd8:	20000340 	.word	0x20000340

08000fdc <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b0ae      	sub	sp, #184	; 0xb8
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fe4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000fe8:	2200      	movs	r2, #0
 8000fea:	601a      	str	r2, [r3, #0]
 8000fec:	605a      	str	r2, [r3, #4]
 8000fee:	609a      	str	r2, [r3, #8]
 8000ff0:	60da      	str	r2, [r3, #12]
 8000ff2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ff4:	f107 0314 	add.w	r3, r7, #20
 8000ff8:	2290      	movs	r2, #144	; 0x90
 8000ffa:	2100      	movs	r1, #0
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	f004 faab 	bl	8005558 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800100a:	d159      	bne.n	80010c0 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 800100c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001010:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8001012:	2300      	movs	r3, #0
 8001014:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001018:	f107 0314 	add.w	r3, r7, #20
 800101c:	4618      	mov	r0, r3
 800101e:	f001 fd4f 	bl	8002ac0 <HAL_RCCEx_PeriphCLKConfig>
 8001022:	4603      	mov	r3, r0
 8001024:	2b00      	cmp	r3, #0
 8001026:	d001      	beq.n	800102c <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8001028:	f7ff fdb4 	bl	8000b94 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800102c:	4b26      	ldr	r3, [pc, #152]	; (80010c8 <HAL_PCD_MspInit+0xec>)
 800102e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001030:	4a25      	ldr	r2, [pc, #148]	; (80010c8 <HAL_PCD_MspInit+0xec>)
 8001032:	f043 0301 	orr.w	r3, r3, #1
 8001036:	6313      	str	r3, [r2, #48]	; 0x30
 8001038:	4b23      	ldr	r3, [pc, #140]	; (80010c8 <HAL_PCD_MspInit+0xec>)
 800103a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800103c:	f003 0301 	and.w	r3, r3, #1
 8001040:	613b      	str	r3, [r7, #16]
 8001042:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001044:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8001048:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800104c:	2302      	movs	r3, #2
 800104e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001052:	2300      	movs	r3, #0
 8001054:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001058:	2303      	movs	r3, #3
 800105a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800105e:	230a      	movs	r3, #10
 8001060:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001064:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001068:	4619      	mov	r1, r3
 800106a:	4818      	ldr	r0, [pc, #96]	; (80010cc <HAL_PCD_MspInit+0xf0>)
 800106c:	f000 fce6 	bl	8001a3c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001070:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001074:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001078:	2300      	movs	r3, #0
 800107a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800107e:	2300      	movs	r3, #0
 8001080:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001084:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001088:	4619      	mov	r1, r3
 800108a:	4810      	ldr	r0, [pc, #64]	; (80010cc <HAL_PCD_MspInit+0xf0>)
 800108c:	f000 fcd6 	bl	8001a3c <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001090:	4b0d      	ldr	r3, [pc, #52]	; (80010c8 <HAL_PCD_MspInit+0xec>)
 8001092:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001094:	4a0c      	ldr	r2, [pc, #48]	; (80010c8 <HAL_PCD_MspInit+0xec>)
 8001096:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800109a:	6353      	str	r3, [r2, #52]	; 0x34
 800109c:	4b0a      	ldr	r3, [pc, #40]	; (80010c8 <HAL_PCD_MspInit+0xec>)
 800109e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80010a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80010a4:	60fb      	str	r3, [r7, #12]
 80010a6:	68fb      	ldr	r3, [r7, #12]
 80010a8:	4b07      	ldr	r3, [pc, #28]	; (80010c8 <HAL_PCD_MspInit+0xec>)
 80010aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010ac:	4a06      	ldr	r2, [pc, #24]	; (80010c8 <HAL_PCD_MspInit+0xec>)
 80010ae:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010b2:	6453      	str	r3, [r2, #68]	; 0x44
 80010b4:	4b04      	ldr	r3, [pc, #16]	; (80010c8 <HAL_PCD_MspInit+0xec>)
 80010b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010b8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010bc:	60bb      	str	r3, [r7, #8]
 80010be:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80010c0:	bf00      	nop
 80010c2:	37b8      	adds	r7, #184	; 0xb8
 80010c4:	46bd      	mov	sp, r7
 80010c6:	bd80      	pop	{r7, pc}
 80010c8:	40023800 	.word	0x40023800
 80010cc:	40020000 	.word	0x40020000

080010d0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80010d0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001108 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80010d4:	480d      	ldr	r0, [pc, #52]	; (800110c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80010d6:	490e      	ldr	r1, [pc, #56]	; (8001110 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80010d8:	4a0e      	ldr	r2, [pc, #56]	; (8001114 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80010da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010dc:	e002      	b.n	80010e4 <LoopCopyDataInit>

080010de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010e2:	3304      	adds	r3, #4

080010e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010e8:	d3f9      	bcc.n	80010de <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010ea:	4a0b      	ldr	r2, [pc, #44]	; (8001118 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80010ec:	4c0b      	ldr	r4, [pc, #44]	; (800111c <LoopFillZerobss+0x26>)
  movs r3, #0
 80010ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010f0:	e001      	b.n	80010f6 <LoopFillZerobss>

080010f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010f4:	3204      	adds	r2, #4

080010f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010f8:	d3fb      	bcc.n	80010f2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80010fa:	f7ff fd9f 	bl	8000c3c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80010fe:	f004 fa07 	bl	8005510 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001102:	f7ff fbc5 	bl	8000890 <main>
  bx  lr    
 8001106:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001108:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 800110c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001110:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001114:	080055ac 	.word	0x080055ac
  ldr r2, =_sbss
 8001118:	2000014c 	.word	0x2000014c
  ldr r4, =_ebss
 800111c:	2000084c 	.word	0x2000084c

08001120 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001120:	e7fe      	b.n	8001120 <ADC_IRQHandler>

08001122 <HAL_Init>:
 * @note   SysTick is used as time base for the HAL_Delay() function, the application
 *         need to ensure that the SysTick time base is always set to 1 millisecond
 *         to have correct HAL operation.
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_Init(void) {
 8001122:	b580      	push	{r7, lr}
 8001124:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

	/* Set Interrupt Group Priority */
	HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001126:	2003      	movs	r0, #3
 8001128:	f000 f92e 	bl	8001388 <HAL_NVIC_SetPriorityGrouping>

	/* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
	HAL_InitTick(TICK_INT_PRIORITY);
 800112c:	2000      	movs	r0, #0
 800112e:	f000 f805 	bl	800113c <HAL_InitTick>

	/* Init the low level hardware */
	HAL_MspInit();
 8001132:	f7ff fd35 	bl	8000ba0 <HAL_MspInit>

	/* Return function status */
	return HAL_OK;
 8001136:	2300      	movs	r3, #0
}
 8001138:	4618      	mov	r0, r3
 800113a:	bd80      	pop	{r7, pc}

0800113c <HAL_InitTick>:
 *       The function is declared as __weak  to be overwritten  in case of other
 *       implementation  in user file.
 * @param TickPriority Tick interrupt priority.
 * @retval HAL status
 */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority) {
 800113c:	b580      	push	{r7, lr}
 800113e:	b082      	sub	sp, #8
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
	/* Configure the SysTick to have interrupt in 1ms time basis*/
	if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U) {
 8001144:	4b12      	ldr	r3, [pc, #72]	; (8001190 <HAL_InitTick+0x54>)
 8001146:	681a      	ldr	r2, [r3, #0]
 8001148:	4b12      	ldr	r3, [pc, #72]	; (8001194 <HAL_InitTick+0x58>)
 800114a:	781b      	ldrb	r3, [r3, #0]
 800114c:	4619      	mov	r1, r3
 800114e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001152:	fbb3 f3f1 	udiv	r3, r3, r1
 8001156:	fbb2 f3f3 	udiv	r3, r2, r3
 800115a:	4618      	mov	r0, r3
 800115c:	f000 f93b 	bl	80013d6 <HAL_SYSTICK_Config>
 8001160:	4603      	mov	r3, r0
 8001162:	2b00      	cmp	r3, #0
 8001164:	d001      	beq.n	800116a <HAL_InitTick+0x2e>
		return HAL_ERROR;
 8001166:	2301      	movs	r3, #1
 8001168:	e00e      	b.n	8001188 <HAL_InitTick+0x4c>
	}

	/* Configure the SysTick IRQ priority */
	if (TickPriority < (1UL << __NVIC_PRIO_BITS)) {
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	2b0f      	cmp	r3, #15
 800116e:	d80a      	bhi.n	8001186 <HAL_InitTick+0x4a>
		HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001170:	2200      	movs	r2, #0
 8001172:	6879      	ldr	r1, [r7, #4]
 8001174:	f04f 30ff 	mov.w	r0, #4294967295
 8001178:	f000 f911 	bl	800139e <HAL_NVIC_SetPriority>
		uwTickPrio = TickPriority;
 800117c:	4a06      	ldr	r2, [pc, #24]	; (8001198 <HAL_InitTick+0x5c>)
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	6013      	str	r3, [r2, #0]
	} else {
		return HAL_ERROR;
	}

	/* Return function status */
	return HAL_OK;
 8001182:	2300      	movs	r3, #0
 8001184:	e000      	b.n	8001188 <HAL_InitTick+0x4c>
		return HAL_ERROR;
 8001186:	2301      	movs	r3, #1
}
 8001188:	4618      	mov	r0, r3
 800118a:	3708      	adds	r7, #8
 800118c:	46bd      	mov	sp, r7
 800118e:	bd80      	pop	{r7, pc}
 8001190:	20000000 	.word	0x20000000
 8001194:	20000008 	.word	0x20000008
 8001198:	20000004 	.word	0x20000004

0800119c <HAL_IncTick>:
 *       in SysTick ISR.
 * @note This function is declared as __weak to be overwritten in case of other 
 *      implementations in user file.
 * @retval None
 */
__weak void HAL_IncTick(void) {
 800119c:	b480      	push	{r7}
 800119e:	af00      	add	r7, sp, #0
	uwTick += uwTickFreq;
 80011a0:	4b06      	ldr	r3, [pc, #24]	; (80011bc <HAL_IncTick+0x20>)
 80011a2:	781b      	ldrb	r3, [r3, #0]
 80011a4:	461a      	mov	r2, r3
 80011a6:	4b06      	ldr	r3, [pc, #24]	; (80011c0 <HAL_IncTick+0x24>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	4413      	add	r3, r2
 80011ac:	4a04      	ldr	r2, [pc, #16]	; (80011c0 <HAL_IncTick+0x24>)
 80011ae:	6013      	str	r3, [r2, #0]
}
 80011b0:	bf00      	nop
 80011b2:	46bd      	mov	sp, r7
 80011b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b8:	4770      	bx	lr
 80011ba:	bf00      	nop
 80011bc:	20000008 	.word	0x20000008
 80011c0:	20000848 	.word	0x20000848

080011c4 <HAL_GetTick>:
 * @brief Provides a tick value in millisecond.
 * @note This function is declared as __weak to be overwritten in case of other 
 *       implementations in user file.
 * @retval tick value
 */
__weak uint32_t HAL_GetTick(void) {
 80011c4:	b480      	push	{r7}
 80011c6:	af00      	add	r7, sp, #0
	return uwTick;
 80011c8:	4b03      	ldr	r3, [pc, #12]	; (80011d8 <HAL_GetTick+0x14>)
 80011ca:	681b      	ldr	r3, [r3, #0]
}
 80011cc:	4618      	mov	r0, r3
 80011ce:	46bd      	mov	sp, r7
 80011d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d4:	4770      	bx	lr
 80011d6:	bf00      	nop
 80011d8:	20000848 	.word	0x20000848

080011dc <HAL_Delay>:
 * @note This function is declared as __weak to be overwritten in case of other
 *       implementations in user file.
 * @param Delay  specifies the delay time length, in milliseconds.
 * @retval None
 */
__weak void HAL_Delay(uint32_t Delay) {
 80011dc:	b580      	push	{r7, lr}
 80011de:	b084      	sub	sp, #16
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
	uint32_t tickstart = HAL_GetTick();
 80011e4:	f7ff ffee 	bl	80011c4 <HAL_GetTick>
 80011e8:	60b8      	str	r0, [r7, #8]
	uint32_t wait = Delay;
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	60fb      	str	r3, [r7, #12]

	/* Add a freq to guarantee minimum wait */
	if (wait < HAL_MAX_DELAY) {
 80011ee:	68fb      	ldr	r3, [r7, #12]
 80011f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011f4:	d005      	beq.n	8001202 <HAL_Delay+0x26>
		wait += (uint32_t) (uwTickFreq);
 80011f6:	4b0a      	ldr	r3, [pc, #40]	; (8001220 <HAL_Delay+0x44>)
 80011f8:	781b      	ldrb	r3, [r3, #0]
 80011fa:	461a      	mov	r2, r3
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	4413      	add	r3, r2
 8001200:	60fb      	str	r3, [r7, #12]
	}

	while ((HAL_GetTick() - tickstart) < wait) {
 8001202:	bf00      	nop
 8001204:	f7ff ffde 	bl	80011c4 <HAL_GetTick>
 8001208:	4602      	mov	r2, r0
 800120a:	68bb      	ldr	r3, [r7, #8]
 800120c:	1ad3      	subs	r3, r2, r3
 800120e:	68fa      	ldr	r2, [r7, #12]
 8001210:	429a      	cmp	r2, r3
 8001212:	d8f7      	bhi.n	8001204 <HAL_Delay+0x28>
	}
}
 8001214:	bf00      	nop
 8001216:	bf00      	nop
 8001218:	3710      	adds	r7, #16
 800121a:	46bd      	mov	sp, r7
 800121c:	bd80      	pop	{r7, pc}
 800121e:	bf00      	nop
 8001220:	20000008 	.word	0x20000008

08001224 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001224:	b480      	push	{r7}
 8001226:	b085      	sub	sp, #20
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	f003 0307 	and.w	r3, r3, #7
 8001232:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001234:	4b0b      	ldr	r3, [pc, #44]	; (8001264 <__NVIC_SetPriorityGrouping+0x40>)
 8001236:	68db      	ldr	r3, [r3, #12]
 8001238:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800123a:	68ba      	ldr	r2, [r7, #8]
 800123c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001240:	4013      	ands	r3, r2
 8001242:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001248:	68bb      	ldr	r3, [r7, #8]
 800124a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800124c:	4b06      	ldr	r3, [pc, #24]	; (8001268 <__NVIC_SetPriorityGrouping+0x44>)
 800124e:	4313      	orrs	r3, r2
 8001250:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001252:	4a04      	ldr	r2, [pc, #16]	; (8001264 <__NVIC_SetPriorityGrouping+0x40>)
 8001254:	68bb      	ldr	r3, [r7, #8]
 8001256:	60d3      	str	r3, [r2, #12]
}
 8001258:	bf00      	nop
 800125a:	3714      	adds	r7, #20
 800125c:	46bd      	mov	sp, r7
 800125e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001262:	4770      	bx	lr
 8001264:	e000ed00 	.word	0xe000ed00
 8001268:	05fa0000 	.word	0x05fa0000

0800126c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800126c:	b480      	push	{r7}
 800126e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001270:	4b04      	ldr	r3, [pc, #16]	; (8001284 <__NVIC_GetPriorityGrouping+0x18>)
 8001272:	68db      	ldr	r3, [r3, #12]
 8001274:	0a1b      	lsrs	r3, r3, #8
 8001276:	f003 0307 	and.w	r3, r3, #7
}
 800127a:	4618      	mov	r0, r3
 800127c:	46bd      	mov	sp, r7
 800127e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001282:	4770      	bx	lr
 8001284:	e000ed00 	.word	0xe000ed00

08001288 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001288:	b480      	push	{r7}
 800128a:	b083      	sub	sp, #12
 800128c:	af00      	add	r7, sp, #0
 800128e:	4603      	mov	r3, r0
 8001290:	6039      	str	r1, [r7, #0]
 8001292:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001294:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001298:	2b00      	cmp	r3, #0
 800129a:	db0a      	blt.n	80012b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800129c:	683b      	ldr	r3, [r7, #0]
 800129e:	b2da      	uxtb	r2, r3
 80012a0:	490c      	ldr	r1, [pc, #48]	; (80012d4 <__NVIC_SetPriority+0x4c>)
 80012a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012a6:	0112      	lsls	r2, r2, #4
 80012a8:	b2d2      	uxtb	r2, r2
 80012aa:	440b      	add	r3, r1
 80012ac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012b0:	e00a      	b.n	80012c8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012b2:	683b      	ldr	r3, [r7, #0]
 80012b4:	b2da      	uxtb	r2, r3
 80012b6:	4908      	ldr	r1, [pc, #32]	; (80012d8 <__NVIC_SetPriority+0x50>)
 80012b8:	79fb      	ldrb	r3, [r7, #7]
 80012ba:	f003 030f 	and.w	r3, r3, #15
 80012be:	3b04      	subs	r3, #4
 80012c0:	0112      	lsls	r2, r2, #4
 80012c2:	b2d2      	uxtb	r2, r2
 80012c4:	440b      	add	r3, r1
 80012c6:	761a      	strb	r2, [r3, #24]
}
 80012c8:	bf00      	nop
 80012ca:	370c      	adds	r7, #12
 80012cc:	46bd      	mov	sp, r7
 80012ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d2:	4770      	bx	lr
 80012d4:	e000e100 	.word	0xe000e100
 80012d8:	e000ed00 	.word	0xe000ed00

080012dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012dc:	b480      	push	{r7}
 80012de:	b089      	sub	sp, #36	; 0x24
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	60f8      	str	r0, [r7, #12]
 80012e4:	60b9      	str	r1, [r7, #8]
 80012e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	f003 0307 	and.w	r3, r3, #7
 80012ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012f0:	69fb      	ldr	r3, [r7, #28]
 80012f2:	f1c3 0307 	rsb	r3, r3, #7
 80012f6:	2b04      	cmp	r3, #4
 80012f8:	bf28      	it	cs
 80012fa:	2304      	movcs	r3, #4
 80012fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012fe:	69fb      	ldr	r3, [r7, #28]
 8001300:	3304      	adds	r3, #4
 8001302:	2b06      	cmp	r3, #6
 8001304:	d902      	bls.n	800130c <NVIC_EncodePriority+0x30>
 8001306:	69fb      	ldr	r3, [r7, #28]
 8001308:	3b03      	subs	r3, #3
 800130a:	e000      	b.n	800130e <NVIC_EncodePriority+0x32>
 800130c:	2300      	movs	r3, #0
 800130e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001310:	f04f 32ff 	mov.w	r2, #4294967295
 8001314:	69bb      	ldr	r3, [r7, #24]
 8001316:	fa02 f303 	lsl.w	r3, r2, r3
 800131a:	43da      	mvns	r2, r3
 800131c:	68bb      	ldr	r3, [r7, #8]
 800131e:	401a      	ands	r2, r3
 8001320:	697b      	ldr	r3, [r7, #20]
 8001322:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001324:	f04f 31ff 	mov.w	r1, #4294967295
 8001328:	697b      	ldr	r3, [r7, #20]
 800132a:	fa01 f303 	lsl.w	r3, r1, r3
 800132e:	43d9      	mvns	r1, r3
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001334:	4313      	orrs	r3, r2
         );
}
 8001336:	4618      	mov	r0, r3
 8001338:	3724      	adds	r7, #36	; 0x24
 800133a:	46bd      	mov	sp, r7
 800133c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001340:	4770      	bx	lr
	...

08001344 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b082      	sub	sp, #8
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	3b01      	subs	r3, #1
 8001350:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001354:	d301      	bcc.n	800135a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001356:	2301      	movs	r3, #1
 8001358:	e00f      	b.n	800137a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800135a:	4a0a      	ldr	r2, [pc, #40]	; (8001384 <SysTick_Config+0x40>)
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	3b01      	subs	r3, #1
 8001360:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001362:	210f      	movs	r1, #15
 8001364:	f04f 30ff 	mov.w	r0, #4294967295
 8001368:	f7ff ff8e 	bl	8001288 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800136c:	4b05      	ldr	r3, [pc, #20]	; (8001384 <SysTick_Config+0x40>)
 800136e:	2200      	movs	r2, #0
 8001370:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001372:	4b04      	ldr	r3, [pc, #16]	; (8001384 <SysTick_Config+0x40>)
 8001374:	2207      	movs	r2, #7
 8001376:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001378:	2300      	movs	r3, #0
}
 800137a:	4618      	mov	r0, r3
 800137c:	3708      	adds	r7, #8
 800137e:	46bd      	mov	sp, r7
 8001380:	bd80      	pop	{r7, pc}
 8001382:	bf00      	nop
 8001384:	e000e010 	.word	0xe000e010

08001388 <HAL_NVIC_SetPriorityGrouping>:
 *                                    0 bits for subpriority
 * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
 *         The pending IRQ priority will be managed only by the subpriority. 
 * @retval None
 */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup) {
 8001388:	b580      	push	{r7, lr}
 800138a:	b082      	sub	sp, #8
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
	/* Check the parameters */
	assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

	/* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
	NVIC_SetPriorityGrouping(PriorityGroup);
 8001390:	6878      	ldr	r0, [r7, #4]
 8001392:	f7ff ff47 	bl	8001224 <__NVIC_SetPriorityGrouping>
}
 8001396:	bf00      	nop
 8001398:	3708      	adds	r7, #8
 800139a:	46bd      	mov	sp, r7
 800139c:	bd80      	pop	{r7, pc}

0800139e <HAL_NVIC_SetPriority>:
 *         This parameter can be a value between 0 and 15
 *         A lower priority value indicates a higher priority.          
 * @retval None
 */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority,
		uint32_t SubPriority) {
 800139e:	b580      	push	{r7, lr}
 80013a0:	b086      	sub	sp, #24
 80013a2:	af00      	add	r7, sp, #0
 80013a4:	4603      	mov	r3, r0
 80013a6:	60b9      	str	r1, [r7, #8]
 80013a8:	607a      	str	r2, [r7, #4]
 80013aa:	73fb      	strb	r3, [r7, #15]
	uint32_t prioritygroup = 0x00;
 80013ac:	2300      	movs	r3, #0
 80013ae:	617b      	str	r3, [r7, #20]

	/* Check the parameters */
	assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
	assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

	prioritygroup = NVIC_GetPriorityGrouping();
 80013b0:	f7ff ff5c 	bl	800126c <__NVIC_GetPriorityGrouping>
 80013b4:	6178      	str	r0, [r7, #20]

	NVIC_SetPriority(IRQn,
 80013b6:	687a      	ldr	r2, [r7, #4]
 80013b8:	68b9      	ldr	r1, [r7, #8]
 80013ba:	6978      	ldr	r0, [r7, #20]
 80013bc:	f7ff ff8e 	bl	80012dc <NVIC_EncodePriority>
 80013c0:	4602      	mov	r2, r0
 80013c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013c6:	4611      	mov	r1, r2
 80013c8:	4618      	mov	r0, r3
 80013ca:	f7ff ff5d 	bl	8001288 <__NVIC_SetPriority>
			NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80013ce:	bf00      	nop
 80013d0:	3718      	adds	r7, #24
 80013d2:	46bd      	mov	sp, r7
 80013d4:	bd80      	pop	{r7, pc}

080013d6 <HAL_SYSTICK_Config>:
 *         Counter is in free running mode to generate periodic interrupts.
 * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
 * @retval status:  - 0  Function succeeded.
 *                  - 1  Function failed.
 */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb) {
 80013d6:	b580      	push	{r7, lr}
 80013d8:	b082      	sub	sp, #8
 80013da:	af00      	add	r7, sp, #0
 80013dc:	6078      	str	r0, [r7, #4]
	return SysTick_Config(TicksNumb);
 80013de:	6878      	ldr	r0, [r7, #4]
 80013e0:	f7ff ffb0 	bl	8001344 <SysTick_Config>
 80013e4:	4603      	mov	r3, r0
}
 80013e6:	4618      	mov	r0, r3
 80013e8:	3708      	adds	r7, #8
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bd80      	pop	{r7, pc}
	...

080013f0 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b084      	sub	sp, #16
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d101      	bne.n	8001402 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80013fe:	2301      	movs	r3, #1
 8001400:	e06a      	b.n	80014d8 <HAL_ETH_Init+0xe8>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001408:	2b00      	cmp	r3, #0
 800140a:	d106      	bne.n	800141a <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	2223      	movs	r2, #35	; 0x23
 8001410:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001414:	6878      	ldr	r0, [r7, #4]
 8001416:	f7ff f8df 	bl	80005d8 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800141a:	4b31      	ldr	r3, [pc, #196]	; (80014e0 <HAL_ETH_Init+0xf0>)
 800141c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800141e:	4a30      	ldr	r2, [pc, #192]	; (80014e0 <HAL_ETH_Init+0xf0>)
 8001420:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001424:	6453      	str	r3, [r2, #68]	; 0x44
 8001426:	4b2e      	ldr	r3, [pc, #184]	; (80014e0 <HAL_ETH_Init+0xf0>)
 8001428:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800142a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800142e:	60bb      	str	r3, [r7, #8]
 8001430:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8001432:	4b2c      	ldr	r3, [pc, #176]	; (80014e4 <HAL_ETH_Init+0xf4>)
 8001434:	685b      	ldr	r3, [r3, #4]
 8001436:	4a2b      	ldr	r2, [pc, #172]	; (80014e4 <HAL_ETH_Init+0xf4>)
 8001438:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800143c:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 800143e:	4b29      	ldr	r3, [pc, #164]	; (80014e4 <HAL_ETH_Init+0xf4>)
 8001440:	685a      	ldr	r2, [r3, #4]
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	689b      	ldr	r3, [r3, #8]
 8001446:	4927      	ldr	r1, [pc, #156]	; (80014e4 <HAL_ETH_Init+0xf4>)
 8001448:	4313      	orrs	r3, r2
 800144a:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 800144c:	4b25      	ldr	r3, [pc, #148]	; (80014e4 <HAL_ETH_Init+0xf4>)
 800144e:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	687a      	ldr	r2, [r7, #4]
 800145c:	6812      	ldr	r2, [r2, #0]
 800145e:	f043 0301 	orr.w	r3, r3, #1
 8001462:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001466:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001468:	f7ff feac 	bl	80011c4 <HAL_GetTick>
 800146c:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 800146e:	e011      	b.n	8001494 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001470:	f7ff fea8 	bl	80011c4 <HAL_GetTick>
 8001474:	4602      	mov	r2, r0
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	1ad3      	subs	r3, r2, r3
 800147a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800147e:	d909      	bls.n	8001494 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	2204      	movs	r2, #4
 8001484:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	22e0      	movs	r2, #224	; 0xe0
 800148c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8001490:	2301      	movs	r3, #1
 8001492:	e021      	b.n	80014d8 <HAL_ETH_Init+0xe8>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	f003 0301 	and.w	r3, r3, #1
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d1e4      	bne.n	8001470 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80014a6:	6878      	ldr	r0, [r7, #4]
 80014a8:	f000 f958 	bl	800175c <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80014ac:	6878      	ldr	r0, [r7, #4]
 80014ae:	f000 f9ff 	bl	80018b0 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80014b2:	6878      	ldr	r0, [r7, #4]
 80014b4:	f000 fa55 	bl	8001962 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	685b      	ldr	r3, [r3, #4]
 80014bc:	461a      	mov	r2, r3
 80014be:	2100      	movs	r1, #0
 80014c0:	6878      	ldr	r0, [r7, #4]
 80014c2:	f000 f9bd 	bl	8001840 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	2200      	movs	r2, #0
 80014ca:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	2210      	movs	r2, #16
 80014d2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80014d6:	2300      	movs	r3, #0
}
 80014d8:	4618      	mov	r0, r3
 80014da:	3710      	adds	r7, #16
 80014dc:	46bd      	mov	sp, r7
 80014de:	bd80      	pop	{r7, pc}
 80014e0:	40023800 	.word	0x40023800
 80014e4:	40013800 	.word	0x40013800

080014e8 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b084      	sub	sp, #16
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
 80014f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 80014fa:	68fa      	ldr	r2, [r7, #12]
 80014fc:	4b51      	ldr	r3, [pc, #324]	; (8001644 <ETH_SetMACConfig+0x15c>)
 80014fe:	4013      	ands	r3, r2
 8001500:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001502:	683b      	ldr	r3, [r7, #0]
 8001504:	7c1b      	ldrb	r3, [r3, #16]
 8001506:	2b00      	cmp	r3, #0
 8001508:	d102      	bne.n	8001510 <ETH_SetMACConfig+0x28>
 800150a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800150e:	e000      	b.n	8001512 <ETH_SetMACConfig+0x2a>
 8001510:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001512:	683b      	ldr	r3, [r7, #0]
 8001514:	7c5b      	ldrb	r3, [r3, #17]
 8001516:	2b00      	cmp	r3, #0
 8001518:	d102      	bne.n	8001520 <ETH_SetMACConfig+0x38>
 800151a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800151e:	e000      	b.n	8001522 <ETH_SetMACConfig+0x3a>
 8001520:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001522:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8001524:	683b      	ldr	r3, [r7, #0]
 8001526:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001528:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800152a:	683b      	ldr	r3, [r7, #0]
 800152c:	7fdb      	ldrb	r3, [r3, #31]
 800152e:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8001530:	431a      	orrs	r2, r3
                        macconf->Speed |
 8001532:	683b      	ldr	r3, [r7, #0]
 8001534:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001536:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001538:	683a      	ldr	r2, [r7, #0]
 800153a:	7f92      	ldrb	r2, [r2, #30]
 800153c:	2a00      	cmp	r2, #0
 800153e:	d102      	bne.n	8001546 <ETH_SetMACConfig+0x5e>
 8001540:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001544:	e000      	b.n	8001548 <ETH_SetMACConfig+0x60>
 8001546:	2200      	movs	r2, #0
                        macconf->Speed |
 8001548:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800154a:	683b      	ldr	r3, [r7, #0]
 800154c:	7f1b      	ldrb	r3, [r3, #28]
 800154e:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001550:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8001552:	683b      	ldr	r3, [r7, #0]
 8001554:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001556:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001558:	683b      	ldr	r3, [r7, #0]
 800155a:	791b      	ldrb	r3, [r3, #4]
 800155c:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 800155e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001560:	683a      	ldr	r2, [r7, #0]
 8001562:	f892 2020 	ldrb.w	r2, [r2, #32]
 8001566:	2a00      	cmp	r2, #0
 8001568:	d102      	bne.n	8001570 <ETH_SetMACConfig+0x88>
 800156a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800156e:	e000      	b.n	8001572 <ETH_SetMACConfig+0x8a>
 8001570:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001572:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001574:	683b      	ldr	r3, [r7, #0]
 8001576:	7bdb      	ldrb	r3, [r3, #15]
 8001578:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 800157a:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 800157c:	683b      	ldr	r3, [r7, #0]
 800157e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001580:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8001582:	683b      	ldr	r3, [r7, #0]
 8001584:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001588:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800158a:	4313      	orrs	r3, r2
 800158c:	68fa      	ldr	r2, [r7, #12]
 800158e:	4313      	orrs	r3, r2
 8001590:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	68fa      	ldr	r2, [r7, #12]
 8001598:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80015a2:	2001      	movs	r0, #1
 80015a4:	f7ff fe1a 	bl	80011dc <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	68fa      	ldr	r2, [r7, #12]
 80015ae:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	699b      	ldr	r3, [r3, #24]
 80015b6:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 80015b8:	68fa      	ldr	r2, [r7, #12]
 80015ba:	f64f 7341 	movw	r3, #65345	; 0xff41
 80015be:	4013      	ands	r3, r2
 80015c0:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80015c2:	683b      	ldr	r3, [r7, #0]
 80015c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80015c6:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80015c8:	683a      	ldr	r2, [r7, #0]
 80015ca:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 80015ce:	2a00      	cmp	r2, #0
 80015d0:	d101      	bne.n	80015d6 <ETH_SetMACConfig+0xee>
 80015d2:	2280      	movs	r2, #128	; 0x80
 80015d4:	e000      	b.n	80015d8 <ETH_SetMACConfig+0xf0>
 80015d6:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80015d8:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 80015da:	683b      	ldr	r3, [r7, #0]
 80015dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80015de:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80015e0:	683a      	ldr	r2, [r7, #0]
 80015e2:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 80015e6:	2a01      	cmp	r2, #1
 80015e8:	d101      	bne.n	80015ee <ETH_SetMACConfig+0x106>
 80015ea:	2208      	movs	r2, #8
 80015ec:	e000      	b.n	80015f0 <ETH_SetMACConfig+0x108>
 80015ee:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 80015f0:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 80015f2:	683a      	ldr	r2, [r7, #0]
 80015f4:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 80015f8:	2a01      	cmp	r2, #1
 80015fa:	d101      	bne.n	8001600 <ETH_SetMACConfig+0x118>
 80015fc:	2204      	movs	r2, #4
 80015fe:	e000      	b.n	8001602 <ETH_SetMACConfig+0x11a>
 8001600:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001602:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8001604:	683a      	ldr	r2, [r7, #0]
 8001606:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 800160a:	2a01      	cmp	r2, #1
 800160c:	d101      	bne.n	8001612 <ETH_SetMACConfig+0x12a>
 800160e:	2202      	movs	r2, #2
 8001610:	e000      	b.n	8001614 <ETH_SetMACConfig+0x12c>
 8001612:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001614:	4313      	orrs	r3, r2
 8001616:	68fa      	ldr	r2, [r7, #12]
 8001618:	4313      	orrs	r3, r2
 800161a:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	68fa      	ldr	r2, [r7, #12]
 8001622:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	699b      	ldr	r3, [r3, #24]
 800162a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800162c:	2001      	movs	r0, #1
 800162e:	f7ff fdd5 	bl	80011dc <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	68fa      	ldr	r2, [r7, #12]
 8001638:	619a      	str	r2, [r3, #24]
}
 800163a:	bf00      	nop
 800163c:	3710      	adds	r7, #16
 800163e:	46bd      	mov	sp, r7
 8001640:	bd80      	pop	{r7, pc}
 8001642:	bf00      	nop
 8001644:	ff20810f 	.word	0xff20810f

08001648 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b084      	sub	sp, #16
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
 8001650:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800165a:	699b      	ldr	r3, [r3, #24]
 800165c:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 800165e:	68fa      	ldr	r2, [r7, #12]
 8001660:	4b3d      	ldr	r3, [pc, #244]	; (8001758 <ETH_SetDMAConfig+0x110>)
 8001662:	4013      	ands	r3, r2
 8001664:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001666:	683b      	ldr	r3, [r7, #0]
 8001668:	7b1b      	ldrb	r3, [r3, #12]
 800166a:	2b00      	cmp	r3, #0
 800166c:	d102      	bne.n	8001674 <ETH_SetDMAConfig+0x2c>
 800166e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001672:	e000      	b.n	8001676 <ETH_SetDMAConfig+0x2e>
 8001674:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8001676:	683b      	ldr	r3, [r7, #0]
 8001678:	7b5b      	ldrb	r3, [r3, #13]
 800167a:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800167c:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800167e:	683a      	ldr	r2, [r7, #0]
 8001680:	7f52      	ldrb	r2, [r2, #29]
 8001682:	2a00      	cmp	r2, #0
 8001684:	d102      	bne.n	800168c <ETH_SetDMAConfig+0x44>
 8001686:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800168a:	e000      	b.n	800168e <ETH_SetDMAConfig+0x46>
 800168c:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800168e:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001690:	683b      	ldr	r3, [r7, #0]
 8001692:	7b9b      	ldrb	r3, [r3, #14]
 8001694:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8001696:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8001698:	683b      	ldr	r3, [r7, #0]
 800169a:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 800169c:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 800169e:	683b      	ldr	r3, [r7, #0]
 80016a0:	7f1b      	ldrb	r3, [r3, #28]
 80016a2:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 80016a4:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80016a6:	683b      	ldr	r3, [r7, #0]
 80016a8:	7f9b      	ldrb	r3, [r3, #30]
 80016aa:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80016ac:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 80016ae:	683b      	ldr	r3, [r7, #0]
 80016b0:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80016b2:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 80016b4:	683b      	ldr	r3, [r7, #0]
 80016b6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80016ba:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80016bc:	4313      	orrs	r3, r2
 80016be:	68fa      	ldr	r2, [r7, #12]
 80016c0:	4313      	orrs	r3, r2
 80016c2:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80016cc:	461a      	mov	r2, r3
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80016da:	699b      	ldr	r3, [r3, #24]
 80016dc:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80016de:	2001      	movs	r0, #1
 80016e0:	f7ff fd7c 	bl	80011dc <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80016ec:	461a      	mov	r2, r3
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80016f2:	683b      	ldr	r3, [r7, #0]
 80016f4:	791b      	ldrb	r3, [r3, #4]
 80016f6:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 80016f8:	683b      	ldr	r3, [r7, #0]
 80016fa:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80016fc:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80016fe:	683b      	ldr	r3, [r7, #0]
 8001700:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8001702:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8001704:	683b      	ldr	r3, [r7, #0]
 8001706:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8001708:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800170a:	683b      	ldr	r3, [r7, #0]
 800170c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001710:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8001712:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001714:	683b      	ldr	r3, [r7, #0]
 8001716:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001718:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800171a:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 800171c:	683b      	ldr	r3, [r7, #0]
 800171e:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001720:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001722:	687a      	ldr	r2, [r7, #4]
 8001724:	6812      	ldr	r2, [r2, #0]
 8001726:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800172a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800172e:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800173c:	2001      	movs	r0, #1
 800173e:	f7ff fd4d 	bl	80011dc <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800174a:	461a      	mov	r2, r3
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	6013      	str	r3, [r2, #0]
}
 8001750:	bf00      	nop
 8001752:	3710      	adds	r7, #16
 8001754:	46bd      	mov	sp, r7
 8001756:	bd80      	pop	{r7, pc}
 8001758:	f8de3f23 	.word	0xf8de3f23

0800175c <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b0a6      	sub	sp, #152	; 0x98
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8001764:	2301      	movs	r3, #1
 8001766:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 800176a:	2301      	movs	r3, #1
 800176c:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8001770:	2300      	movs	r3, #0
 8001772:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8001774:	2300      	movs	r3, #0
 8001776:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 800177a:	2301      	movs	r3, #1
 800177c:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8001780:	2300      	movs	r3, #0
 8001782:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8001786:	2301      	movs	r3, #1
 8001788:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 800178c:	2300      	movs	r3, #0
 800178e:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8001792:	2300      	movs	r3, #0
 8001794:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001798:	2300      	movs	r3, #0
 800179a:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 800179c:	2300      	movs	r3, #0
 800179e:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 80017a2:	2300      	movs	r3, #0
 80017a4:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 80017a6:	2300      	movs	r3, #0
 80017a8:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 80017ac:	2300      	movs	r3, #0
 80017ae:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80017b2:	2300      	movs	r3, #0
 80017b4:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 80017b8:	2300      	movs	r3, #0
 80017ba:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 80017be:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80017c2:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80017c4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80017c8:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80017ca:	2300      	movs	r3, #0
 80017cc:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80017d0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80017d4:	4619      	mov	r1, r3
 80017d6:	6878      	ldr	r0, [r7, #4]
 80017d8:	f7ff fe86 	bl	80014e8 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 80017dc:	2301      	movs	r3, #1
 80017de:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 80017e0:	2301      	movs	r3, #1
 80017e2:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 80017e4:	2301      	movs	r3, #1
 80017e6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 80017ea:	2301      	movs	r3, #1
 80017ec:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 80017ee:	2300      	movs	r3, #0
 80017f0:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 80017f2:	2300      	movs	r3, #0
 80017f4:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 80017f8:	2300      	movs	r3, #0
 80017fa:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 80017fe:	2300      	movs	r3, #0
 8001800:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8001802:	2301      	movs	r3, #1
 8001804:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8001808:	2301      	movs	r3, #1
 800180a:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 800180c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001810:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001812:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001816:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001818:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800181c:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 800181e:	2301      	movs	r3, #1
 8001820:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8001824:	2300      	movs	r3, #0
 8001826:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8001828:	2300      	movs	r3, #0
 800182a:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 800182c:	f107 0308 	add.w	r3, r7, #8
 8001830:	4619      	mov	r1, r3
 8001832:	6878      	ldr	r0, [r7, #4]
 8001834:	f7ff ff08 	bl	8001648 <ETH_SetDMAConfig>
}
 8001838:	bf00      	nop
 800183a:	3798      	adds	r7, #152	; 0x98
 800183c:	46bd      	mov	sp, r7
 800183e:	bd80      	pop	{r7, pc}

08001840 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8001840:	b480      	push	{r7}
 8001842:	b087      	sub	sp, #28
 8001844:	af00      	add	r7, sp, #0
 8001846:	60f8      	str	r0, [r7, #12]
 8001848:	60b9      	str	r1, [r7, #8]
 800184a:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	3305      	adds	r3, #5
 8001850:	781b      	ldrb	r3, [r3, #0]
 8001852:	021b      	lsls	r3, r3, #8
 8001854:	687a      	ldr	r2, [r7, #4]
 8001856:	3204      	adds	r2, #4
 8001858:	7812      	ldrb	r2, [r2, #0]
 800185a:	4313      	orrs	r3, r2
 800185c:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 800185e:	68ba      	ldr	r2, [r7, #8]
 8001860:	4b11      	ldr	r3, [pc, #68]	; (80018a8 <ETH_MACAddressConfig+0x68>)
 8001862:	4413      	add	r3, r2
 8001864:	461a      	mov	r2, r3
 8001866:	697b      	ldr	r3, [r7, #20]
 8001868:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	3303      	adds	r3, #3
 800186e:	781b      	ldrb	r3, [r3, #0]
 8001870:	061a      	lsls	r2, r3, #24
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	3302      	adds	r3, #2
 8001876:	781b      	ldrb	r3, [r3, #0]
 8001878:	041b      	lsls	r3, r3, #16
 800187a:	431a      	orrs	r2, r3
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	3301      	adds	r3, #1
 8001880:	781b      	ldrb	r3, [r3, #0]
 8001882:	021b      	lsls	r3, r3, #8
 8001884:	4313      	orrs	r3, r2
 8001886:	687a      	ldr	r2, [r7, #4]
 8001888:	7812      	ldrb	r2, [r2, #0]
 800188a:	4313      	orrs	r3, r2
 800188c:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 800188e:	68ba      	ldr	r2, [r7, #8]
 8001890:	4b06      	ldr	r3, [pc, #24]	; (80018ac <ETH_MACAddressConfig+0x6c>)
 8001892:	4413      	add	r3, r2
 8001894:	461a      	mov	r2, r3
 8001896:	697b      	ldr	r3, [r7, #20]
 8001898:	6013      	str	r3, [r2, #0]
}
 800189a:	bf00      	nop
 800189c:	371c      	adds	r7, #28
 800189e:	46bd      	mov	sp, r7
 80018a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a4:	4770      	bx	lr
 80018a6:	bf00      	nop
 80018a8:	40028040 	.word	0x40028040
 80018ac:	40028044 	.word	0x40028044

080018b0 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 80018b0:	b480      	push	{r7}
 80018b2:	b085      	sub	sp, #20
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80018b8:	2300      	movs	r3, #0
 80018ba:	60fb      	str	r3, [r7, #12]
 80018bc:	e03e      	b.n	800193c <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	68d9      	ldr	r1, [r3, #12]
 80018c2:	68fa      	ldr	r2, [r7, #12]
 80018c4:	4613      	mov	r3, r2
 80018c6:	009b      	lsls	r3, r3, #2
 80018c8:	4413      	add	r3, r2
 80018ca:	00db      	lsls	r3, r3, #3
 80018cc:	440b      	add	r3, r1
 80018ce:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 80018d0:	68bb      	ldr	r3, [r7, #8]
 80018d2:	2200      	movs	r2, #0
 80018d4:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 80018d6:	68bb      	ldr	r3, [r7, #8]
 80018d8:	2200      	movs	r2, #0
 80018da:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 80018dc:	68bb      	ldr	r3, [r7, #8]
 80018de:	2200      	movs	r2, #0
 80018e0:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 80018e2:	68bb      	ldr	r3, [r7, #8]
 80018e4:	2200      	movs	r2, #0
 80018e6:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80018e8:	68b9      	ldr	r1, [r7, #8]
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	68fa      	ldr	r2, [r7, #12]
 80018ee:	3206      	adds	r2, #6
 80018f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 80018f4:	68bb      	ldr	r3, [r7, #8]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80018fc:	68bb      	ldr	r3, [r7, #8]
 80018fe:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	2b02      	cmp	r3, #2
 8001904:	d80c      	bhi.n	8001920 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	68d9      	ldr	r1, [r3, #12]
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	1c5a      	adds	r2, r3, #1
 800190e:	4613      	mov	r3, r2
 8001910:	009b      	lsls	r3, r3, #2
 8001912:	4413      	add	r3, r2
 8001914:	00db      	lsls	r3, r3, #3
 8001916:	440b      	add	r3, r1
 8001918:	461a      	mov	r2, r3
 800191a:	68bb      	ldr	r3, [r7, #8]
 800191c:	60da      	str	r2, [r3, #12]
 800191e:	e004      	b.n	800192a <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	68db      	ldr	r3, [r3, #12]
 8001924:	461a      	mov	r2, r3
 8001926:	68bb      	ldr	r3, [r7, #8]
 8001928:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 800192a:	68bb      	ldr	r3, [r7, #8]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8001932:	68bb      	ldr	r3, [r7, #8]
 8001934:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	3301      	adds	r3, #1
 800193a:	60fb      	str	r3, [r7, #12]
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	2b03      	cmp	r3, #3
 8001940:	d9bd      	bls.n	80018be <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	2200      	movs	r2, #0
 8001946:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	68da      	ldr	r2, [r3, #12]
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001954:	611a      	str	r2, [r3, #16]
}
 8001956:	bf00      	nop
 8001958:	3714      	adds	r7, #20
 800195a:	46bd      	mov	sp, r7
 800195c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001960:	4770      	bx	lr

08001962 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8001962:	b480      	push	{r7}
 8001964:	b085      	sub	sp, #20
 8001966:	af00      	add	r7, sp, #0
 8001968:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800196a:	2300      	movs	r3, #0
 800196c:	60fb      	str	r3, [r7, #12]
 800196e:	e046      	b.n	80019fe <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	6919      	ldr	r1, [r3, #16]
 8001974:	68fa      	ldr	r2, [r7, #12]
 8001976:	4613      	mov	r3, r2
 8001978:	009b      	lsls	r3, r3, #2
 800197a:	4413      	add	r3, r2
 800197c:	00db      	lsls	r3, r3, #3
 800197e:	440b      	add	r3, r1
 8001980:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8001982:	68bb      	ldr	r3, [r7, #8]
 8001984:	2200      	movs	r2, #0
 8001986:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8001988:	68bb      	ldr	r3, [r7, #8]
 800198a:	2200      	movs	r2, #0
 800198c:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 800198e:	68bb      	ldr	r3, [r7, #8]
 8001990:	2200      	movs	r2, #0
 8001992:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8001994:	68bb      	ldr	r3, [r7, #8]
 8001996:	2200      	movs	r2, #0
 8001998:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 800199a:	68bb      	ldr	r3, [r7, #8]
 800199c:	2200      	movs	r2, #0
 800199e:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 80019a0:	68bb      	ldr	r3, [r7, #8]
 80019a2:	2200      	movs	r2, #0
 80019a4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 80019a6:	68bb      	ldr	r3, [r7, #8]
 80019a8:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80019ac:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 80019ae:	68bb      	ldr	r3, [r7, #8]
 80019b0:	f244 52f8 	movw	r2, #17912	; 0x45f8
 80019b4:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 80019b6:	68bb      	ldr	r3, [r7, #8]
 80019b8:	685b      	ldr	r3, [r3, #4]
 80019ba:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80019be:	68bb      	ldr	r3, [r7, #8]
 80019c0:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80019c2:	68b9      	ldr	r1, [r7, #8]
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	68fa      	ldr	r2, [r7, #12]
 80019c8:	3212      	adds	r2, #18
 80019ca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	2b02      	cmp	r3, #2
 80019d2:	d80c      	bhi.n	80019ee <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	6919      	ldr	r1, [r3, #16]
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	1c5a      	adds	r2, r3, #1
 80019dc:	4613      	mov	r3, r2
 80019de:	009b      	lsls	r3, r3, #2
 80019e0:	4413      	add	r3, r2
 80019e2:	00db      	lsls	r3, r3, #3
 80019e4:	440b      	add	r3, r1
 80019e6:	461a      	mov	r2, r3
 80019e8:	68bb      	ldr	r3, [r7, #8]
 80019ea:	60da      	str	r2, [r3, #12]
 80019ec:	e004      	b.n	80019f8 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	691b      	ldr	r3, [r3, #16]
 80019f2:	461a      	mov	r2, r3
 80019f4:	68bb      	ldr	r3, [r7, #8]
 80019f6:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	3301      	adds	r3, #1
 80019fc:	60fb      	str	r3, [r7, #12]
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	2b03      	cmp	r3, #3
 8001a02:	d9b5      	bls.n	8001970 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	2200      	movs	r2, #0
 8001a08:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	2200      	movs	r2, #0
 8001a14:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	2200      	movs	r2, #0
 8001a1a:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	2200      	movs	r2, #0
 8001a20:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	691a      	ldr	r2, [r3, #16]
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a2e:	60da      	str	r2, [r3, #12]
}
 8001a30:	bf00      	nop
 8001a32:	3714      	adds	r7, #20
 8001a34:	46bd      	mov	sp, r7
 8001a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3a:	4770      	bx	lr

08001a3c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	b089      	sub	sp, #36	; 0x24
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
 8001a44:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001a46:	2300      	movs	r3, #0
 8001a48:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001a4e:	2300      	movs	r3, #0
 8001a50:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001a52:	2300      	movs	r3, #0
 8001a54:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001a56:	2300      	movs	r3, #0
 8001a58:	61fb      	str	r3, [r7, #28]
 8001a5a:	e175      	b.n	8001d48 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001a5c:	2201      	movs	r2, #1
 8001a5e:	69fb      	ldr	r3, [r7, #28]
 8001a60:	fa02 f303 	lsl.w	r3, r2, r3
 8001a64:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a66:	683b      	ldr	r3, [r7, #0]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	697a      	ldr	r2, [r7, #20]
 8001a6c:	4013      	ands	r3, r2
 8001a6e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001a70:	693a      	ldr	r2, [r7, #16]
 8001a72:	697b      	ldr	r3, [r7, #20]
 8001a74:	429a      	cmp	r2, r3
 8001a76:	f040 8164 	bne.w	8001d42 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001a7a:	683b      	ldr	r3, [r7, #0]
 8001a7c:	685b      	ldr	r3, [r3, #4]
 8001a7e:	f003 0303 	and.w	r3, r3, #3
 8001a82:	2b01      	cmp	r3, #1
 8001a84:	d005      	beq.n	8001a92 <HAL_GPIO_Init+0x56>
 8001a86:	683b      	ldr	r3, [r7, #0]
 8001a88:	685b      	ldr	r3, [r3, #4]
 8001a8a:	f003 0303 	and.w	r3, r3, #3
 8001a8e:	2b02      	cmp	r3, #2
 8001a90:	d130      	bne.n	8001af4 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	689b      	ldr	r3, [r3, #8]
 8001a96:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001a98:	69fb      	ldr	r3, [r7, #28]
 8001a9a:	005b      	lsls	r3, r3, #1
 8001a9c:	2203      	movs	r2, #3
 8001a9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa2:	43db      	mvns	r3, r3
 8001aa4:	69ba      	ldr	r2, [r7, #24]
 8001aa6:	4013      	ands	r3, r2
 8001aa8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001aaa:	683b      	ldr	r3, [r7, #0]
 8001aac:	68da      	ldr	r2, [r3, #12]
 8001aae:	69fb      	ldr	r3, [r7, #28]
 8001ab0:	005b      	lsls	r3, r3, #1
 8001ab2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab6:	69ba      	ldr	r2, [r7, #24]
 8001ab8:	4313      	orrs	r3, r2
 8001aba:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	69ba      	ldr	r2, [r7, #24]
 8001ac0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	685b      	ldr	r3, [r3, #4]
 8001ac6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001ac8:	2201      	movs	r2, #1
 8001aca:	69fb      	ldr	r3, [r7, #28]
 8001acc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad0:	43db      	mvns	r3, r3
 8001ad2:	69ba      	ldr	r2, [r7, #24]
 8001ad4:	4013      	ands	r3, r2
 8001ad6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001ad8:	683b      	ldr	r3, [r7, #0]
 8001ada:	685b      	ldr	r3, [r3, #4]
 8001adc:	091b      	lsrs	r3, r3, #4
 8001ade:	f003 0201 	and.w	r2, r3, #1
 8001ae2:	69fb      	ldr	r3, [r7, #28]
 8001ae4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae8:	69ba      	ldr	r2, [r7, #24]
 8001aea:	4313      	orrs	r3, r2
 8001aec:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	69ba      	ldr	r2, [r7, #24]
 8001af2:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001af4:	683b      	ldr	r3, [r7, #0]
 8001af6:	685b      	ldr	r3, [r3, #4]
 8001af8:	f003 0303 	and.w	r3, r3, #3
 8001afc:	2b03      	cmp	r3, #3
 8001afe:	d017      	beq.n	8001b30 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	68db      	ldr	r3, [r3, #12]
 8001b04:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001b06:	69fb      	ldr	r3, [r7, #28]
 8001b08:	005b      	lsls	r3, r3, #1
 8001b0a:	2203      	movs	r2, #3
 8001b0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b10:	43db      	mvns	r3, r3
 8001b12:	69ba      	ldr	r2, [r7, #24]
 8001b14:	4013      	ands	r3, r2
 8001b16:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001b18:	683b      	ldr	r3, [r7, #0]
 8001b1a:	689a      	ldr	r2, [r3, #8]
 8001b1c:	69fb      	ldr	r3, [r7, #28]
 8001b1e:	005b      	lsls	r3, r3, #1
 8001b20:	fa02 f303 	lsl.w	r3, r2, r3
 8001b24:	69ba      	ldr	r2, [r7, #24]
 8001b26:	4313      	orrs	r3, r2
 8001b28:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	69ba      	ldr	r2, [r7, #24]
 8001b2e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	685b      	ldr	r3, [r3, #4]
 8001b34:	f003 0303 	and.w	r3, r3, #3
 8001b38:	2b02      	cmp	r3, #2
 8001b3a:	d123      	bne.n	8001b84 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001b3c:	69fb      	ldr	r3, [r7, #28]
 8001b3e:	08da      	lsrs	r2, r3, #3
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	3208      	adds	r2, #8
 8001b44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b48:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001b4a:	69fb      	ldr	r3, [r7, #28]
 8001b4c:	f003 0307 	and.w	r3, r3, #7
 8001b50:	009b      	lsls	r3, r3, #2
 8001b52:	220f      	movs	r2, #15
 8001b54:	fa02 f303 	lsl.w	r3, r2, r3
 8001b58:	43db      	mvns	r3, r3
 8001b5a:	69ba      	ldr	r2, [r7, #24]
 8001b5c:	4013      	ands	r3, r2
 8001b5e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001b60:	683b      	ldr	r3, [r7, #0]
 8001b62:	691a      	ldr	r2, [r3, #16]
 8001b64:	69fb      	ldr	r3, [r7, #28]
 8001b66:	f003 0307 	and.w	r3, r3, #7
 8001b6a:	009b      	lsls	r3, r3, #2
 8001b6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b70:	69ba      	ldr	r2, [r7, #24]
 8001b72:	4313      	orrs	r3, r2
 8001b74:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001b76:	69fb      	ldr	r3, [r7, #28]
 8001b78:	08da      	lsrs	r2, r3, #3
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	3208      	adds	r2, #8
 8001b7e:	69b9      	ldr	r1, [r7, #24]
 8001b80:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001b8a:	69fb      	ldr	r3, [r7, #28]
 8001b8c:	005b      	lsls	r3, r3, #1
 8001b8e:	2203      	movs	r2, #3
 8001b90:	fa02 f303 	lsl.w	r3, r2, r3
 8001b94:	43db      	mvns	r3, r3
 8001b96:	69ba      	ldr	r2, [r7, #24]
 8001b98:	4013      	ands	r3, r2
 8001b9a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001b9c:	683b      	ldr	r3, [r7, #0]
 8001b9e:	685b      	ldr	r3, [r3, #4]
 8001ba0:	f003 0203 	and.w	r2, r3, #3
 8001ba4:	69fb      	ldr	r3, [r7, #28]
 8001ba6:	005b      	lsls	r3, r3, #1
 8001ba8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bac:	69ba      	ldr	r2, [r7, #24]
 8001bae:	4313      	orrs	r3, r2
 8001bb0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	69ba      	ldr	r2, [r7, #24]
 8001bb6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001bb8:	683b      	ldr	r3, [r7, #0]
 8001bba:	685b      	ldr	r3, [r3, #4]
 8001bbc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	f000 80be 	beq.w	8001d42 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bc6:	4b66      	ldr	r3, [pc, #408]	; (8001d60 <HAL_GPIO_Init+0x324>)
 8001bc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bca:	4a65      	ldr	r2, [pc, #404]	; (8001d60 <HAL_GPIO_Init+0x324>)
 8001bcc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001bd0:	6453      	str	r3, [r2, #68]	; 0x44
 8001bd2:	4b63      	ldr	r3, [pc, #396]	; (8001d60 <HAL_GPIO_Init+0x324>)
 8001bd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bd6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001bda:	60fb      	str	r3, [r7, #12]
 8001bdc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001bde:	4a61      	ldr	r2, [pc, #388]	; (8001d64 <HAL_GPIO_Init+0x328>)
 8001be0:	69fb      	ldr	r3, [r7, #28]
 8001be2:	089b      	lsrs	r3, r3, #2
 8001be4:	3302      	adds	r3, #2
 8001be6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bea:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001bec:	69fb      	ldr	r3, [r7, #28]
 8001bee:	f003 0303 	and.w	r3, r3, #3
 8001bf2:	009b      	lsls	r3, r3, #2
 8001bf4:	220f      	movs	r2, #15
 8001bf6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bfa:	43db      	mvns	r3, r3
 8001bfc:	69ba      	ldr	r2, [r7, #24]
 8001bfe:	4013      	ands	r3, r2
 8001c00:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	4a58      	ldr	r2, [pc, #352]	; (8001d68 <HAL_GPIO_Init+0x32c>)
 8001c06:	4293      	cmp	r3, r2
 8001c08:	d037      	beq.n	8001c7a <HAL_GPIO_Init+0x23e>
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	4a57      	ldr	r2, [pc, #348]	; (8001d6c <HAL_GPIO_Init+0x330>)
 8001c0e:	4293      	cmp	r3, r2
 8001c10:	d031      	beq.n	8001c76 <HAL_GPIO_Init+0x23a>
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	4a56      	ldr	r2, [pc, #344]	; (8001d70 <HAL_GPIO_Init+0x334>)
 8001c16:	4293      	cmp	r3, r2
 8001c18:	d02b      	beq.n	8001c72 <HAL_GPIO_Init+0x236>
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	4a55      	ldr	r2, [pc, #340]	; (8001d74 <HAL_GPIO_Init+0x338>)
 8001c1e:	4293      	cmp	r3, r2
 8001c20:	d025      	beq.n	8001c6e <HAL_GPIO_Init+0x232>
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	4a54      	ldr	r2, [pc, #336]	; (8001d78 <HAL_GPIO_Init+0x33c>)
 8001c26:	4293      	cmp	r3, r2
 8001c28:	d01f      	beq.n	8001c6a <HAL_GPIO_Init+0x22e>
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	4a53      	ldr	r2, [pc, #332]	; (8001d7c <HAL_GPIO_Init+0x340>)
 8001c2e:	4293      	cmp	r3, r2
 8001c30:	d019      	beq.n	8001c66 <HAL_GPIO_Init+0x22a>
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	4a52      	ldr	r2, [pc, #328]	; (8001d80 <HAL_GPIO_Init+0x344>)
 8001c36:	4293      	cmp	r3, r2
 8001c38:	d013      	beq.n	8001c62 <HAL_GPIO_Init+0x226>
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	4a51      	ldr	r2, [pc, #324]	; (8001d84 <HAL_GPIO_Init+0x348>)
 8001c3e:	4293      	cmp	r3, r2
 8001c40:	d00d      	beq.n	8001c5e <HAL_GPIO_Init+0x222>
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	4a50      	ldr	r2, [pc, #320]	; (8001d88 <HAL_GPIO_Init+0x34c>)
 8001c46:	4293      	cmp	r3, r2
 8001c48:	d007      	beq.n	8001c5a <HAL_GPIO_Init+0x21e>
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	4a4f      	ldr	r2, [pc, #316]	; (8001d8c <HAL_GPIO_Init+0x350>)
 8001c4e:	4293      	cmp	r3, r2
 8001c50:	d101      	bne.n	8001c56 <HAL_GPIO_Init+0x21a>
 8001c52:	2309      	movs	r3, #9
 8001c54:	e012      	b.n	8001c7c <HAL_GPIO_Init+0x240>
 8001c56:	230a      	movs	r3, #10
 8001c58:	e010      	b.n	8001c7c <HAL_GPIO_Init+0x240>
 8001c5a:	2308      	movs	r3, #8
 8001c5c:	e00e      	b.n	8001c7c <HAL_GPIO_Init+0x240>
 8001c5e:	2307      	movs	r3, #7
 8001c60:	e00c      	b.n	8001c7c <HAL_GPIO_Init+0x240>
 8001c62:	2306      	movs	r3, #6
 8001c64:	e00a      	b.n	8001c7c <HAL_GPIO_Init+0x240>
 8001c66:	2305      	movs	r3, #5
 8001c68:	e008      	b.n	8001c7c <HAL_GPIO_Init+0x240>
 8001c6a:	2304      	movs	r3, #4
 8001c6c:	e006      	b.n	8001c7c <HAL_GPIO_Init+0x240>
 8001c6e:	2303      	movs	r3, #3
 8001c70:	e004      	b.n	8001c7c <HAL_GPIO_Init+0x240>
 8001c72:	2302      	movs	r3, #2
 8001c74:	e002      	b.n	8001c7c <HAL_GPIO_Init+0x240>
 8001c76:	2301      	movs	r3, #1
 8001c78:	e000      	b.n	8001c7c <HAL_GPIO_Init+0x240>
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	69fa      	ldr	r2, [r7, #28]
 8001c7e:	f002 0203 	and.w	r2, r2, #3
 8001c82:	0092      	lsls	r2, r2, #2
 8001c84:	4093      	lsls	r3, r2
 8001c86:	69ba      	ldr	r2, [r7, #24]
 8001c88:	4313      	orrs	r3, r2
 8001c8a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001c8c:	4935      	ldr	r1, [pc, #212]	; (8001d64 <HAL_GPIO_Init+0x328>)
 8001c8e:	69fb      	ldr	r3, [r7, #28]
 8001c90:	089b      	lsrs	r3, r3, #2
 8001c92:	3302      	adds	r3, #2
 8001c94:	69ba      	ldr	r2, [r7, #24]
 8001c96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001c9a:	4b3d      	ldr	r3, [pc, #244]	; (8001d90 <HAL_GPIO_Init+0x354>)
 8001c9c:	689b      	ldr	r3, [r3, #8]
 8001c9e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ca0:	693b      	ldr	r3, [r7, #16]
 8001ca2:	43db      	mvns	r3, r3
 8001ca4:	69ba      	ldr	r2, [r7, #24]
 8001ca6:	4013      	ands	r3, r2
 8001ca8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001caa:	683b      	ldr	r3, [r7, #0]
 8001cac:	685b      	ldr	r3, [r3, #4]
 8001cae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d003      	beq.n	8001cbe <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001cb6:	69ba      	ldr	r2, [r7, #24]
 8001cb8:	693b      	ldr	r3, [r7, #16]
 8001cba:	4313      	orrs	r3, r2
 8001cbc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001cbe:	4a34      	ldr	r2, [pc, #208]	; (8001d90 <HAL_GPIO_Init+0x354>)
 8001cc0:	69bb      	ldr	r3, [r7, #24]
 8001cc2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001cc4:	4b32      	ldr	r3, [pc, #200]	; (8001d90 <HAL_GPIO_Init+0x354>)
 8001cc6:	68db      	ldr	r3, [r3, #12]
 8001cc8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cca:	693b      	ldr	r3, [r7, #16]
 8001ccc:	43db      	mvns	r3, r3
 8001cce:	69ba      	ldr	r2, [r7, #24]
 8001cd0:	4013      	ands	r3, r2
 8001cd2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001cd4:	683b      	ldr	r3, [r7, #0]
 8001cd6:	685b      	ldr	r3, [r3, #4]
 8001cd8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d003      	beq.n	8001ce8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001ce0:	69ba      	ldr	r2, [r7, #24]
 8001ce2:	693b      	ldr	r3, [r7, #16]
 8001ce4:	4313      	orrs	r3, r2
 8001ce6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001ce8:	4a29      	ldr	r2, [pc, #164]	; (8001d90 <HAL_GPIO_Init+0x354>)
 8001cea:	69bb      	ldr	r3, [r7, #24]
 8001cec:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001cee:	4b28      	ldr	r3, [pc, #160]	; (8001d90 <HAL_GPIO_Init+0x354>)
 8001cf0:	685b      	ldr	r3, [r3, #4]
 8001cf2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cf4:	693b      	ldr	r3, [r7, #16]
 8001cf6:	43db      	mvns	r3, r3
 8001cf8:	69ba      	ldr	r2, [r7, #24]
 8001cfa:	4013      	ands	r3, r2
 8001cfc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001cfe:	683b      	ldr	r3, [r7, #0]
 8001d00:	685b      	ldr	r3, [r3, #4]
 8001d02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d003      	beq.n	8001d12 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001d0a:	69ba      	ldr	r2, [r7, #24]
 8001d0c:	693b      	ldr	r3, [r7, #16]
 8001d0e:	4313      	orrs	r3, r2
 8001d10:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001d12:	4a1f      	ldr	r2, [pc, #124]	; (8001d90 <HAL_GPIO_Init+0x354>)
 8001d14:	69bb      	ldr	r3, [r7, #24]
 8001d16:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001d18:	4b1d      	ldr	r3, [pc, #116]	; (8001d90 <HAL_GPIO_Init+0x354>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d1e:	693b      	ldr	r3, [r7, #16]
 8001d20:	43db      	mvns	r3, r3
 8001d22:	69ba      	ldr	r2, [r7, #24]
 8001d24:	4013      	ands	r3, r2
 8001d26:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001d28:	683b      	ldr	r3, [r7, #0]
 8001d2a:	685b      	ldr	r3, [r3, #4]
 8001d2c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d003      	beq.n	8001d3c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001d34:	69ba      	ldr	r2, [r7, #24]
 8001d36:	693b      	ldr	r3, [r7, #16]
 8001d38:	4313      	orrs	r3, r2
 8001d3a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001d3c:	4a14      	ldr	r2, [pc, #80]	; (8001d90 <HAL_GPIO_Init+0x354>)
 8001d3e:	69bb      	ldr	r3, [r7, #24]
 8001d40:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001d42:	69fb      	ldr	r3, [r7, #28]
 8001d44:	3301      	adds	r3, #1
 8001d46:	61fb      	str	r3, [r7, #28]
 8001d48:	69fb      	ldr	r3, [r7, #28]
 8001d4a:	2b0f      	cmp	r3, #15
 8001d4c:	f67f ae86 	bls.w	8001a5c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001d50:	bf00      	nop
 8001d52:	bf00      	nop
 8001d54:	3724      	adds	r7, #36	; 0x24
 8001d56:	46bd      	mov	sp, r7
 8001d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5c:	4770      	bx	lr
 8001d5e:	bf00      	nop
 8001d60:	40023800 	.word	0x40023800
 8001d64:	40013800 	.word	0x40013800
 8001d68:	40020000 	.word	0x40020000
 8001d6c:	40020400 	.word	0x40020400
 8001d70:	40020800 	.word	0x40020800
 8001d74:	40020c00 	.word	0x40020c00
 8001d78:	40021000 	.word	0x40021000
 8001d7c:	40021400 	.word	0x40021400
 8001d80:	40021800 	.word	0x40021800
 8001d84:	40021c00 	.word	0x40021c00
 8001d88:	40022000 	.word	0x40022000
 8001d8c:	40022400 	.word	0x40022400
 8001d90:	40013c00 	.word	0x40013c00

08001d94 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d94:	b480      	push	{r7}
 8001d96:	b083      	sub	sp, #12
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
 8001d9c:	460b      	mov	r3, r1
 8001d9e:	807b      	strh	r3, [r7, #2]
 8001da0:	4613      	mov	r3, r2
 8001da2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001da4:	787b      	ldrb	r3, [r7, #1]
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d003      	beq.n	8001db2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001daa:	887a      	ldrh	r2, [r7, #2]
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001db0:	e003      	b.n	8001dba <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001db2:	887b      	ldrh	r3, [r7, #2]
 8001db4:	041a      	lsls	r2, r3, #16
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	619a      	str	r2, [r3, #24]
}
 8001dba:	bf00      	nop
 8001dbc:	370c      	adds	r7, #12
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc4:	4770      	bx	lr

08001dc6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001dc6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001dc8:	b08f      	sub	sp, #60	; 0x3c
 8001dca:	af0a      	add	r7, sp, #40	; 0x28
 8001dcc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d101      	bne.n	8001dd8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001dd4:	2301      	movs	r3, #1
 8001dd6:	e116      	b.n	8002006 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8001de4:	b2db      	uxtb	r3, r3
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d106      	bne.n	8001df8 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	2200      	movs	r2, #0
 8001dee:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001df2:	6878      	ldr	r0, [r7, #4]
 8001df4:	f7ff f8f2 	bl	8000fdc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	2203      	movs	r2, #3
 8001dfc:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001e00:	68bb      	ldr	r3, [r7, #8]
 8001e02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d102      	bne.n	8001e12 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	2200      	movs	r2, #0
 8001e10:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	4618      	mov	r0, r3
 8001e18:	f003 f8de 	bl	8004fd8 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	603b      	str	r3, [r7, #0]
 8001e22:	687e      	ldr	r6, [r7, #4]
 8001e24:	466d      	mov	r5, sp
 8001e26:	f106 0410 	add.w	r4, r6, #16
 8001e2a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e2c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e2e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e30:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e32:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001e36:	e885 0003 	stmia.w	r5, {r0, r1}
 8001e3a:	1d33      	adds	r3, r6, #4
 8001e3c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001e3e:	6838      	ldr	r0, [r7, #0]
 8001e40:	f003 f872 	bl	8004f28 <USB_CoreInit>
 8001e44:	4603      	mov	r3, r0
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d005      	beq.n	8001e56 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	2202      	movs	r2, #2
 8001e4e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001e52:	2301      	movs	r3, #1
 8001e54:	e0d7      	b.n	8002006 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	2100      	movs	r1, #0
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	f003 f8cc 	bl	8004ffa <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001e62:	2300      	movs	r3, #0
 8001e64:	73fb      	strb	r3, [r7, #15]
 8001e66:	e04a      	b.n	8001efe <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001e68:	7bfa      	ldrb	r2, [r7, #15]
 8001e6a:	6879      	ldr	r1, [r7, #4]
 8001e6c:	4613      	mov	r3, r2
 8001e6e:	00db      	lsls	r3, r3, #3
 8001e70:	4413      	add	r3, r2
 8001e72:	009b      	lsls	r3, r3, #2
 8001e74:	440b      	add	r3, r1
 8001e76:	333d      	adds	r3, #61	; 0x3d
 8001e78:	2201      	movs	r2, #1
 8001e7a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001e7c:	7bfa      	ldrb	r2, [r7, #15]
 8001e7e:	6879      	ldr	r1, [r7, #4]
 8001e80:	4613      	mov	r3, r2
 8001e82:	00db      	lsls	r3, r3, #3
 8001e84:	4413      	add	r3, r2
 8001e86:	009b      	lsls	r3, r3, #2
 8001e88:	440b      	add	r3, r1
 8001e8a:	333c      	adds	r3, #60	; 0x3c
 8001e8c:	7bfa      	ldrb	r2, [r7, #15]
 8001e8e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001e90:	7bfa      	ldrb	r2, [r7, #15]
 8001e92:	7bfb      	ldrb	r3, [r7, #15]
 8001e94:	b298      	uxth	r0, r3
 8001e96:	6879      	ldr	r1, [r7, #4]
 8001e98:	4613      	mov	r3, r2
 8001e9a:	00db      	lsls	r3, r3, #3
 8001e9c:	4413      	add	r3, r2
 8001e9e:	009b      	lsls	r3, r3, #2
 8001ea0:	440b      	add	r3, r1
 8001ea2:	3344      	adds	r3, #68	; 0x44
 8001ea4:	4602      	mov	r2, r0
 8001ea6:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001ea8:	7bfa      	ldrb	r2, [r7, #15]
 8001eaa:	6879      	ldr	r1, [r7, #4]
 8001eac:	4613      	mov	r3, r2
 8001eae:	00db      	lsls	r3, r3, #3
 8001eb0:	4413      	add	r3, r2
 8001eb2:	009b      	lsls	r3, r3, #2
 8001eb4:	440b      	add	r3, r1
 8001eb6:	3340      	adds	r3, #64	; 0x40
 8001eb8:	2200      	movs	r2, #0
 8001eba:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001ebc:	7bfa      	ldrb	r2, [r7, #15]
 8001ebe:	6879      	ldr	r1, [r7, #4]
 8001ec0:	4613      	mov	r3, r2
 8001ec2:	00db      	lsls	r3, r3, #3
 8001ec4:	4413      	add	r3, r2
 8001ec6:	009b      	lsls	r3, r3, #2
 8001ec8:	440b      	add	r3, r1
 8001eca:	3348      	adds	r3, #72	; 0x48
 8001ecc:	2200      	movs	r2, #0
 8001ece:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001ed0:	7bfa      	ldrb	r2, [r7, #15]
 8001ed2:	6879      	ldr	r1, [r7, #4]
 8001ed4:	4613      	mov	r3, r2
 8001ed6:	00db      	lsls	r3, r3, #3
 8001ed8:	4413      	add	r3, r2
 8001eda:	009b      	lsls	r3, r3, #2
 8001edc:	440b      	add	r3, r1
 8001ede:	334c      	adds	r3, #76	; 0x4c
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001ee4:	7bfa      	ldrb	r2, [r7, #15]
 8001ee6:	6879      	ldr	r1, [r7, #4]
 8001ee8:	4613      	mov	r3, r2
 8001eea:	00db      	lsls	r3, r3, #3
 8001eec:	4413      	add	r3, r2
 8001eee:	009b      	lsls	r3, r3, #2
 8001ef0:	440b      	add	r3, r1
 8001ef2:	3354      	adds	r3, #84	; 0x54
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001ef8:	7bfb      	ldrb	r3, [r7, #15]
 8001efa:	3301      	adds	r3, #1
 8001efc:	73fb      	strb	r3, [r7, #15]
 8001efe:	7bfa      	ldrb	r2, [r7, #15]
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	685b      	ldr	r3, [r3, #4]
 8001f04:	429a      	cmp	r2, r3
 8001f06:	d3af      	bcc.n	8001e68 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f08:	2300      	movs	r3, #0
 8001f0a:	73fb      	strb	r3, [r7, #15]
 8001f0c:	e044      	b.n	8001f98 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001f0e:	7bfa      	ldrb	r2, [r7, #15]
 8001f10:	6879      	ldr	r1, [r7, #4]
 8001f12:	4613      	mov	r3, r2
 8001f14:	00db      	lsls	r3, r3, #3
 8001f16:	4413      	add	r3, r2
 8001f18:	009b      	lsls	r3, r3, #2
 8001f1a:	440b      	add	r3, r1
 8001f1c:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8001f20:	2200      	movs	r2, #0
 8001f22:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001f24:	7bfa      	ldrb	r2, [r7, #15]
 8001f26:	6879      	ldr	r1, [r7, #4]
 8001f28:	4613      	mov	r3, r2
 8001f2a:	00db      	lsls	r3, r3, #3
 8001f2c:	4413      	add	r3, r2
 8001f2e:	009b      	lsls	r3, r3, #2
 8001f30:	440b      	add	r3, r1
 8001f32:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8001f36:	7bfa      	ldrb	r2, [r7, #15]
 8001f38:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001f3a:	7bfa      	ldrb	r2, [r7, #15]
 8001f3c:	6879      	ldr	r1, [r7, #4]
 8001f3e:	4613      	mov	r3, r2
 8001f40:	00db      	lsls	r3, r3, #3
 8001f42:	4413      	add	r3, r2
 8001f44:	009b      	lsls	r3, r3, #2
 8001f46:	440b      	add	r3, r1
 8001f48:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001f50:	7bfa      	ldrb	r2, [r7, #15]
 8001f52:	6879      	ldr	r1, [r7, #4]
 8001f54:	4613      	mov	r3, r2
 8001f56:	00db      	lsls	r3, r3, #3
 8001f58:	4413      	add	r3, r2
 8001f5a:	009b      	lsls	r3, r3, #2
 8001f5c:	440b      	add	r3, r1
 8001f5e:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8001f62:	2200      	movs	r2, #0
 8001f64:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001f66:	7bfa      	ldrb	r2, [r7, #15]
 8001f68:	6879      	ldr	r1, [r7, #4]
 8001f6a:	4613      	mov	r3, r2
 8001f6c:	00db      	lsls	r3, r3, #3
 8001f6e:	4413      	add	r3, r2
 8001f70:	009b      	lsls	r3, r3, #2
 8001f72:	440b      	add	r3, r1
 8001f74:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8001f78:	2200      	movs	r2, #0
 8001f7a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001f7c:	7bfa      	ldrb	r2, [r7, #15]
 8001f7e:	6879      	ldr	r1, [r7, #4]
 8001f80:	4613      	mov	r3, r2
 8001f82:	00db      	lsls	r3, r3, #3
 8001f84:	4413      	add	r3, r2
 8001f86:	009b      	lsls	r3, r3, #2
 8001f88:	440b      	add	r3, r1
 8001f8a:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8001f8e:	2200      	movs	r2, #0
 8001f90:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f92:	7bfb      	ldrb	r3, [r7, #15]
 8001f94:	3301      	adds	r3, #1
 8001f96:	73fb      	strb	r3, [r7, #15]
 8001f98:	7bfa      	ldrb	r2, [r7, #15]
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	685b      	ldr	r3, [r3, #4]
 8001f9e:	429a      	cmp	r2, r3
 8001fa0:	d3b5      	bcc.n	8001f0e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	603b      	str	r3, [r7, #0]
 8001fa8:	687e      	ldr	r6, [r7, #4]
 8001faa:	466d      	mov	r5, sp
 8001fac:	f106 0410 	add.w	r4, r6, #16
 8001fb0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001fb2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001fb4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001fb6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001fb8:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001fbc:	e885 0003 	stmia.w	r5, {r0, r1}
 8001fc0:	1d33      	adds	r3, r6, #4
 8001fc2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001fc4:	6838      	ldr	r0, [r7, #0]
 8001fc6:	f003 f865 	bl	8005094 <USB_DevInit>
 8001fca:	4603      	mov	r3, r0
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d005      	beq.n	8001fdc <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	2202      	movs	r2, #2
 8001fd4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001fd8:	2301      	movs	r3, #1
 8001fda:	e014      	b.n	8002006 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	2200      	movs	r2, #0
 8001fe0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	2201      	movs	r2, #1
 8001fe8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ff0:	2b01      	cmp	r3, #1
 8001ff2:	d102      	bne.n	8001ffa <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001ff4:	6878      	ldr	r0, [r7, #4]
 8001ff6:	f000 f80b 	bl	8002010 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	4618      	mov	r0, r3
 8002000:	f003 fa23 	bl	800544a <USB_DevDisconnect>

  return HAL_OK;
 8002004:	2300      	movs	r3, #0
}
 8002006:	4618      	mov	r0, r3
 8002008:	3714      	adds	r7, #20
 800200a:	46bd      	mov	sp, r7
 800200c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08002010 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002010:	b480      	push	{r7}
 8002012:	b085      	sub	sp, #20
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	2201      	movs	r2, #1
 8002022:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	2200      	movs	r2, #0
 800202a:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	699b      	ldr	r3, [r3, #24]
 8002032:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800203e:	4b05      	ldr	r3, [pc, #20]	; (8002054 <HAL_PCDEx_ActivateLPM+0x44>)
 8002040:	4313      	orrs	r3, r2
 8002042:	68fa      	ldr	r2, [r7, #12]
 8002044:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8002046:	2300      	movs	r3, #0
}
 8002048:	4618      	mov	r0, r3
 800204a:	3714      	adds	r7, #20
 800204c:	46bd      	mov	sp, r7
 800204e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002052:	4770      	bx	lr
 8002054:	10000003 	.word	0x10000003

08002058 <HAL_PWR_EnableBkUpAccess>:
 *         backup data registers and backup SRAM).
 * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
 *         Backup Domain Access should be kept enabled.
 * @retval None
 */
void HAL_PWR_EnableBkUpAccess(void) {
 8002058:	b480      	push	{r7}
 800205a:	af00      	add	r7, sp, #0
	/* Enable access to RTC and backup registers */
	SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800205c:	4b05      	ldr	r3, [pc, #20]	; (8002074 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	4a04      	ldr	r2, [pc, #16]	; (8002074 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002062:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002066:	6013      	str	r3, [r2, #0]
}
 8002068:	bf00      	nop
 800206a:	46bd      	mov	sp, r7
 800206c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002070:	4770      	bx	lr
 8002072:	bf00      	nop
 8002074:	40007000 	.word	0x40007000

08002078 <HAL_PWREx_EnableOverDrive>:
 *         critical tasks and when the system clock source is either HSI or HSE. 
 *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
 *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void) {
 8002078:	b580      	push	{r7, lr}
 800207a:	b082      	sub	sp, #8
 800207c:	af00      	add	r7, sp, #0
	uint32_t tickstart = 0;
 800207e:	2300      	movs	r3, #0
 8002080:	607b      	str	r3, [r7, #4]

	__HAL_RCC_PWR_CLK_ENABLE();
 8002082:	4b23      	ldr	r3, [pc, #140]	; (8002110 <HAL_PWREx_EnableOverDrive+0x98>)
 8002084:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002086:	4a22      	ldr	r2, [pc, #136]	; (8002110 <HAL_PWREx_EnableOverDrive+0x98>)
 8002088:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800208c:	6413      	str	r3, [r2, #64]	; 0x40
 800208e:	4b20      	ldr	r3, [pc, #128]	; (8002110 <HAL_PWREx_EnableOverDrive+0x98>)
 8002090:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002092:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002096:	603b      	str	r3, [r7, #0]
 8002098:	683b      	ldr	r3, [r7, #0]

	/* Enable the Over-drive to extend the clock frequency to 216 MHz */
	__HAL_PWR_OVERDRIVE_ENABLE();
 800209a:	4b1e      	ldr	r3, [pc, #120]	; (8002114 <HAL_PWREx_EnableOverDrive+0x9c>)
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	4a1d      	ldr	r2, [pc, #116]	; (8002114 <HAL_PWREx_EnableOverDrive+0x9c>)
 80020a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020a4:	6013      	str	r3, [r2, #0]

	/* Get tick */
	tickstart = HAL_GetTick();
 80020a6:	f7ff f88d 	bl	80011c4 <HAL_GetTick>
 80020aa:	6078      	str	r0, [r7, #4]

	while (!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY)) {
 80020ac:	e009      	b.n	80020c2 <HAL_PWREx_EnableOverDrive+0x4a>
		if ((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE) {
 80020ae:	f7ff f889 	bl	80011c4 <HAL_GetTick>
 80020b2:	4602      	mov	r2, r0
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	1ad3      	subs	r3, r2, r3
 80020b8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80020bc:	d901      	bls.n	80020c2 <HAL_PWREx_EnableOverDrive+0x4a>
			return HAL_TIMEOUT;
 80020be:	2303      	movs	r3, #3
 80020c0:	e022      	b.n	8002108 <HAL_PWREx_EnableOverDrive+0x90>
	while (!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY)) {
 80020c2:	4b14      	ldr	r3, [pc, #80]	; (8002114 <HAL_PWREx_EnableOverDrive+0x9c>)
 80020c4:	685b      	ldr	r3, [r3, #4]
 80020c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80020ce:	d1ee      	bne.n	80020ae <HAL_PWREx_EnableOverDrive+0x36>
		}
	}

	/* Enable the Over-drive switch */
	__HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80020d0:	4b10      	ldr	r3, [pc, #64]	; (8002114 <HAL_PWREx_EnableOverDrive+0x9c>)
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	4a0f      	ldr	r2, [pc, #60]	; (8002114 <HAL_PWREx_EnableOverDrive+0x9c>)
 80020d6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80020da:	6013      	str	r3, [r2, #0]

	/* Get tick */
	tickstart = HAL_GetTick();
 80020dc:	f7ff f872 	bl	80011c4 <HAL_GetTick>
 80020e0:	6078      	str	r0, [r7, #4]

	while (!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY)) {
 80020e2:	e009      	b.n	80020f8 <HAL_PWREx_EnableOverDrive+0x80>
		if ((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE) {
 80020e4:	f7ff f86e 	bl	80011c4 <HAL_GetTick>
 80020e8:	4602      	mov	r2, r0
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	1ad3      	subs	r3, r2, r3
 80020ee:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80020f2:	d901      	bls.n	80020f8 <HAL_PWREx_EnableOverDrive+0x80>
			return HAL_TIMEOUT;
 80020f4:	2303      	movs	r3, #3
 80020f6:	e007      	b.n	8002108 <HAL_PWREx_EnableOverDrive+0x90>
	while (!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY)) {
 80020f8:	4b06      	ldr	r3, [pc, #24]	; (8002114 <HAL_PWREx_EnableOverDrive+0x9c>)
 80020fa:	685b      	ldr	r3, [r3, #4]
 80020fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002100:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002104:	d1ee      	bne.n	80020e4 <HAL_PWREx_EnableOverDrive+0x6c>
		}
	}
	return HAL_OK;
 8002106:	2300      	movs	r3, #0
}
 8002108:	4618      	mov	r0, r3
 800210a:	3708      	adds	r7, #8
 800210c:	46bd      	mov	sp, r7
 800210e:	bd80      	pop	{r7, pc}
 8002110:	40023800 	.word	0x40023800
 8002114:	40007000 	.word	0x40007000

08002118 <HAL_RCC_OscConfig>:
 * @note   Transition HSE Bypass to HSE On and HSE On to HSE Bypass are not
 *         supported by this function. User should request a transition to HSE Off
 *         first and then HSE On or HSE Bypass.
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef *RCC_OscInitStruct) {
 8002118:	b580      	push	{r7, lr}
 800211a:	b086      	sub	sp, #24
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
	uint32_t tickstart;
	uint32_t pll_config;
	FlagStatus pwrclkchanged = RESET;
 8002120:	2300      	movs	r3, #0
 8002122:	75fb      	strb	r3, [r7, #23]

	/* Check Null pointer */
	if (RCC_OscInitStruct == NULL) {
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	2b00      	cmp	r3, #0
 8002128:	d101      	bne.n	800212e <HAL_RCC_OscConfig+0x16>
		return HAL_ERROR;
 800212a:	2301      	movs	r3, #1
 800212c:	e29b      	b.n	8002666 <HAL_RCC_OscConfig+0x54e>

	/* Check the parameters */
	assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

	/*------------------------------- HSE Configuration ------------------------*/
	if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f003 0301 	and.w	r3, r3, #1
 8002136:	2b00      	cmp	r3, #0
 8002138:	f000 8087 	beq.w	800224a <HAL_RCC_OscConfig+0x132>
			== RCC_OSCILLATORTYPE_HSE) {
		/* Check the parameters */
		assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
		/* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
		if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800213c:	4b96      	ldr	r3, [pc, #600]	; (8002398 <HAL_RCC_OscConfig+0x280>)
 800213e:	689b      	ldr	r3, [r3, #8]
 8002140:	f003 030c 	and.w	r3, r3, #12
 8002144:	2b04      	cmp	r3, #4
 8002146:	d00c      	beq.n	8002162 <HAL_RCC_OscConfig+0x4a>
				|| ((__HAL_RCC_GET_SYSCLK_SOURCE()
 8002148:	4b93      	ldr	r3, [pc, #588]	; (8002398 <HAL_RCC_OscConfig+0x280>)
 800214a:	689b      	ldr	r3, [r3, #8]
 800214c:	f003 030c 	and.w	r3, r3, #12
 8002150:	2b08      	cmp	r3, #8
 8002152:	d112      	bne.n	800217a <HAL_RCC_OscConfig+0x62>
						== RCC_SYSCLKSOURCE_STATUS_PLLCLK)
						&& ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC)
 8002154:	4b90      	ldr	r3, [pc, #576]	; (8002398 <HAL_RCC_OscConfig+0x280>)
 8002156:	685b      	ldr	r3, [r3, #4]
 8002158:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800215c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002160:	d10b      	bne.n	800217a <HAL_RCC_OscConfig+0x62>
								== RCC_PLLCFGR_PLLSRC_HSE))) {
			if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002162:	4b8d      	ldr	r3, [pc, #564]	; (8002398 <HAL_RCC_OscConfig+0x280>)
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800216a:	2b00      	cmp	r3, #0
 800216c:	d06c      	beq.n	8002248 <HAL_RCC_OscConfig+0x130>
					&& (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)) {
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	685b      	ldr	r3, [r3, #4]
 8002172:	2b00      	cmp	r3, #0
 8002174:	d168      	bne.n	8002248 <HAL_RCC_OscConfig+0x130>
				return HAL_ERROR;
 8002176:	2301      	movs	r3, #1
 8002178:	e275      	b.n	8002666 <HAL_RCC_OscConfig+0x54e>
			}
		} else {
			/* Set the new HSE configuration ---------------------------------------*/
			__HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	685b      	ldr	r3, [r3, #4]
 800217e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002182:	d106      	bne.n	8002192 <HAL_RCC_OscConfig+0x7a>
 8002184:	4b84      	ldr	r3, [pc, #528]	; (8002398 <HAL_RCC_OscConfig+0x280>)
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	4a83      	ldr	r2, [pc, #524]	; (8002398 <HAL_RCC_OscConfig+0x280>)
 800218a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800218e:	6013      	str	r3, [r2, #0]
 8002190:	e02e      	b.n	80021f0 <HAL_RCC_OscConfig+0xd8>
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	685b      	ldr	r3, [r3, #4]
 8002196:	2b00      	cmp	r3, #0
 8002198:	d10c      	bne.n	80021b4 <HAL_RCC_OscConfig+0x9c>
 800219a:	4b7f      	ldr	r3, [pc, #508]	; (8002398 <HAL_RCC_OscConfig+0x280>)
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	4a7e      	ldr	r2, [pc, #504]	; (8002398 <HAL_RCC_OscConfig+0x280>)
 80021a0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80021a4:	6013      	str	r3, [r2, #0]
 80021a6:	4b7c      	ldr	r3, [pc, #496]	; (8002398 <HAL_RCC_OscConfig+0x280>)
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	4a7b      	ldr	r2, [pc, #492]	; (8002398 <HAL_RCC_OscConfig+0x280>)
 80021ac:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80021b0:	6013      	str	r3, [r2, #0]
 80021b2:	e01d      	b.n	80021f0 <HAL_RCC_OscConfig+0xd8>
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	685b      	ldr	r3, [r3, #4]
 80021b8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80021bc:	d10c      	bne.n	80021d8 <HAL_RCC_OscConfig+0xc0>
 80021be:	4b76      	ldr	r3, [pc, #472]	; (8002398 <HAL_RCC_OscConfig+0x280>)
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	4a75      	ldr	r2, [pc, #468]	; (8002398 <HAL_RCC_OscConfig+0x280>)
 80021c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80021c8:	6013      	str	r3, [r2, #0]
 80021ca:	4b73      	ldr	r3, [pc, #460]	; (8002398 <HAL_RCC_OscConfig+0x280>)
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	4a72      	ldr	r2, [pc, #456]	; (8002398 <HAL_RCC_OscConfig+0x280>)
 80021d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021d4:	6013      	str	r3, [r2, #0]
 80021d6:	e00b      	b.n	80021f0 <HAL_RCC_OscConfig+0xd8>
 80021d8:	4b6f      	ldr	r3, [pc, #444]	; (8002398 <HAL_RCC_OscConfig+0x280>)
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	4a6e      	ldr	r2, [pc, #440]	; (8002398 <HAL_RCC_OscConfig+0x280>)
 80021de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80021e2:	6013      	str	r3, [r2, #0]
 80021e4:	4b6c      	ldr	r3, [pc, #432]	; (8002398 <HAL_RCC_OscConfig+0x280>)
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	4a6b      	ldr	r2, [pc, #428]	; (8002398 <HAL_RCC_OscConfig+0x280>)
 80021ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80021ee:	6013      	str	r3, [r2, #0]

			/* Check the HSE State */
			if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF) {
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	685b      	ldr	r3, [r3, #4]
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d013      	beq.n	8002220 <HAL_RCC_OscConfig+0x108>
				/* Get Start Tick*/
				tickstart = HAL_GetTick();
 80021f8:	f7fe ffe4 	bl	80011c4 <HAL_GetTick>
 80021fc:	6138      	str	r0, [r7, #16]

				/* Wait till HSE is ready */
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET) {
 80021fe:	e008      	b.n	8002212 <HAL_RCC_OscConfig+0xfa>
					if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE) {
 8002200:	f7fe ffe0 	bl	80011c4 <HAL_GetTick>
 8002204:	4602      	mov	r2, r0
 8002206:	693b      	ldr	r3, [r7, #16]
 8002208:	1ad3      	subs	r3, r2, r3
 800220a:	2b64      	cmp	r3, #100	; 0x64
 800220c:	d901      	bls.n	8002212 <HAL_RCC_OscConfig+0xfa>
						return HAL_TIMEOUT;
 800220e:	2303      	movs	r3, #3
 8002210:	e229      	b.n	8002666 <HAL_RCC_OscConfig+0x54e>
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET) {
 8002212:	4b61      	ldr	r3, [pc, #388]	; (8002398 <HAL_RCC_OscConfig+0x280>)
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800221a:	2b00      	cmp	r3, #0
 800221c:	d0f0      	beq.n	8002200 <HAL_RCC_OscConfig+0xe8>
 800221e:	e014      	b.n	800224a <HAL_RCC_OscConfig+0x132>
					}
				}
			} else {
				/* Get Start Tick*/
				tickstart = HAL_GetTick();
 8002220:	f7fe ffd0 	bl	80011c4 <HAL_GetTick>
 8002224:	6138      	str	r0, [r7, #16]

				/* Wait till HSE is bypassed or disabled */
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) {
 8002226:	e008      	b.n	800223a <HAL_RCC_OscConfig+0x122>
					if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE) {
 8002228:	f7fe ffcc 	bl	80011c4 <HAL_GetTick>
 800222c:	4602      	mov	r2, r0
 800222e:	693b      	ldr	r3, [r7, #16]
 8002230:	1ad3      	subs	r3, r2, r3
 8002232:	2b64      	cmp	r3, #100	; 0x64
 8002234:	d901      	bls.n	800223a <HAL_RCC_OscConfig+0x122>
						return HAL_TIMEOUT;
 8002236:	2303      	movs	r3, #3
 8002238:	e215      	b.n	8002666 <HAL_RCC_OscConfig+0x54e>
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) {
 800223a:	4b57      	ldr	r3, [pc, #348]	; (8002398 <HAL_RCC_OscConfig+0x280>)
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002242:	2b00      	cmp	r3, #0
 8002244:	d1f0      	bne.n	8002228 <HAL_RCC_OscConfig+0x110>
 8002246:	e000      	b.n	800224a <HAL_RCC_OscConfig+0x132>
			if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002248:	bf00      	nop
				}
			}
		}
	}
	/*----------------------------- HSI Configuration --------------------------*/
	if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f003 0302 	and.w	r3, r3, #2
 8002252:	2b00      	cmp	r3, #0
 8002254:	d069      	beq.n	800232a <HAL_RCC_OscConfig+0x212>
		assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
		assert_param(
				IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

		/* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
		if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002256:	4b50      	ldr	r3, [pc, #320]	; (8002398 <HAL_RCC_OscConfig+0x280>)
 8002258:	689b      	ldr	r3, [r3, #8]
 800225a:	f003 030c 	and.w	r3, r3, #12
 800225e:	2b00      	cmp	r3, #0
 8002260:	d00b      	beq.n	800227a <HAL_RCC_OscConfig+0x162>
				|| ((__HAL_RCC_GET_SYSCLK_SOURCE()
 8002262:	4b4d      	ldr	r3, [pc, #308]	; (8002398 <HAL_RCC_OscConfig+0x280>)
 8002264:	689b      	ldr	r3, [r3, #8]
 8002266:	f003 030c 	and.w	r3, r3, #12
 800226a:	2b08      	cmp	r3, #8
 800226c:	d11c      	bne.n	80022a8 <HAL_RCC_OscConfig+0x190>
						== RCC_SYSCLKSOURCE_STATUS_PLLCLK)
						&& ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC)
 800226e:	4b4a      	ldr	r3, [pc, #296]	; (8002398 <HAL_RCC_OscConfig+0x280>)
 8002270:	685b      	ldr	r3, [r3, #4]
 8002272:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002276:	2b00      	cmp	r3, #0
 8002278:	d116      	bne.n	80022a8 <HAL_RCC_OscConfig+0x190>
								== RCC_PLLCFGR_PLLSRC_HSI))) {
			/* When HSI is used as system clock it will not disabled */
			if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800227a:	4b47      	ldr	r3, [pc, #284]	; (8002398 <HAL_RCC_OscConfig+0x280>)
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f003 0302 	and.w	r3, r3, #2
 8002282:	2b00      	cmp	r3, #0
 8002284:	d005      	beq.n	8002292 <HAL_RCC_OscConfig+0x17a>
					&& (RCC_OscInitStruct->HSIState != RCC_HSI_ON)) {
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	68db      	ldr	r3, [r3, #12]
 800228a:	2b01      	cmp	r3, #1
 800228c:	d001      	beq.n	8002292 <HAL_RCC_OscConfig+0x17a>
				return HAL_ERROR;
 800228e:	2301      	movs	r3, #1
 8002290:	e1e9      	b.n	8002666 <HAL_RCC_OscConfig+0x54e>
			}
			/* Otherwise, just the calibration is allowed */
			else {
				/* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
				__HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(
 8002292:	4b41      	ldr	r3, [pc, #260]	; (8002398 <HAL_RCC_OscConfig+0x280>)
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	691b      	ldr	r3, [r3, #16]
 800229e:	00db      	lsls	r3, r3, #3
 80022a0:	493d      	ldr	r1, [pc, #244]	; (8002398 <HAL_RCC_OscConfig+0x280>)
 80022a2:	4313      	orrs	r3, r2
 80022a4:	600b      	str	r3, [r1, #0]
			if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022a6:	e040      	b.n	800232a <HAL_RCC_OscConfig+0x212>
						RCC_OscInitStruct->HSICalibrationValue);
			}
		} else {
			/* Check the HSI State */
			if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF) {
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	68db      	ldr	r3, [r3, #12]
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d023      	beq.n	80022f8 <HAL_RCC_OscConfig+0x1e0>
				/* Enable the Internal High Speed oscillator (HSI). */
				__HAL_RCC_HSI_ENABLE();
 80022b0:	4b39      	ldr	r3, [pc, #228]	; (8002398 <HAL_RCC_OscConfig+0x280>)
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	4a38      	ldr	r2, [pc, #224]	; (8002398 <HAL_RCC_OscConfig+0x280>)
 80022b6:	f043 0301 	orr.w	r3, r3, #1
 80022ba:	6013      	str	r3, [r2, #0]

				/* Get Start Tick*/
				tickstart = HAL_GetTick();
 80022bc:	f7fe ff82 	bl	80011c4 <HAL_GetTick>
 80022c0:	6138      	str	r0, [r7, #16]

				/* Wait till HSI is ready */
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET) {
 80022c2:	e008      	b.n	80022d6 <HAL_RCC_OscConfig+0x1be>
					if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE) {
 80022c4:	f7fe ff7e 	bl	80011c4 <HAL_GetTick>
 80022c8:	4602      	mov	r2, r0
 80022ca:	693b      	ldr	r3, [r7, #16]
 80022cc:	1ad3      	subs	r3, r2, r3
 80022ce:	2b02      	cmp	r3, #2
 80022d0:	d901      	bls.n	80022d6 <HAL_RCC_OscConfig+0x1be>
						return HAL_TIMEOUT;
 80022d2:	2303      	movs	r3, #3
 80022d4:	e1c7      	b.n	8002666 <HAL_RCC_OscConfig+0x54e>
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET) {
 80022d6:	4b30      	ldr	r3, [pc, #192]	; (8002398 <HAL_RCC_OscConfig+0x280>)
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f003 0302 	and.w	r3, r3, #2
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d0f0      	beq.n	80022c4 <HAL_RCC_OscConfig+0x1ac>
					}
				}

				/* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
				__HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(
 80022e2:	4b2d      	ldr	r3, [pc, #180]	; (8002398 <HAL_RCC_OscConfig+0x280>)
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	691b      	ldr	r3, [r3, #16]
 80022ee:	00db      	lsls	r3, r3, #3
 80022f0:	4929      	ldr	r1, [pc, #164]	; (8002398 <HAL_RCC_OscConfig+0x280>)
 80022f2:	4313      	orrs	r3, r2
 80022f4:	600b      	str	r3, [r1, #0]
 80022f6:	e018      	b.n	800232a <HAL_RCC_OscConfig+0x212>
						RCC_OscInitStruct->HSICalibrationValue);
			} else {
				/* Disable the Internal High Speed oscillator (HSI). */
				__HAL_RCC_HSI_DISABLE();
 80022f8:	4b27      	ldr	r3, [pc, #156]	; (8002398 <HAL_RCC_OscConfig+0x280>)
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	4a26      	ldr	r2, [pc, #152]	; (8002398 <HAL_RCC_OscConfig+0x280>)
 80022fe:	f023 0301 	bic.w	r3, r3, #1
 8002302:	6013      	str	r3, [r2, #0]

				/* Get Start Tick*/
				tickstart = HAL_GetTick();
 8002304:	f7fe ff5e 	bl	80011c4 <HAL_GetTick>
 8002308:	6138      	str	r0, [r7, #16]

				/* Wait till HSI is ready */
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) {
 800230a:	e008      	b.n	800231e <HAL_RCC_OscConfig+0x206>
					if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE) {
 800230c:	f7fe ff5a 	bl	80011c4 <HAL_GetTick>
 8002310:	4602      	mov	r2, r0
 8002312:	693b      	ldr	r3, [r7, #16]
 8002314:	1ad3      	subs	r3, r2, r3
 8002316:	2b02      	cmp	r3, #2
 8002318:	d901      	bls.n	800231e <HAL_RCC_OscConfig+0x206>
						return HAL_TIMEOUT;
 800231a:	2303      	movs	r3, #3
 800231c:	e1a3      	b.n	8002666 <HAL_RCC_OscConfig+0x54e>
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) {
 800231e:	4b1e      	ldr	r3, [pc, #120]	; (8002398 <HAL_RCC_OscConfig+0x280>)
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f003 0302 	and.w	r3, r3, #2
 8002326:	2b00      	cmp	r3, #0
 8002328:	d1f0      	bne.n	800230c <HAL_RCC_OscConfig+0x1f4>
				}
			}
		}
	}
	/*------------------------------ LSI Configuration -------------------------*/
	if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI)
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f003 0308 	and.w	r3, r3, #8
 8002332:	2b00      	cmp	r3, #0
 8002334:	d038      	beq.n	80023a8 <HAL_RCC_OscConfig+0x290>
			== RCC_OSCILLATORTYPE_LSI) {
		/* Check the parameters */
		assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

		/* Check the LSI State */
		if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF) {
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	695b      	ldr	r3, [r3, #20]
 800233a:	2b00      	cmp	r3, #0
 800233c:	d019      	beq.n	8002372 <HAL_RCC_OscConfig+0x25a>
			/* Enable the Internal Low Speed oscillator (LSI). */
			__HAL_RCC_LSI_ENABLE();
 800233e:	4b16      	ldr	r3, [pc, #88]	; (8002398 <HAL_RCC_OscConfig+0x280>)
 8002340:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002342:	4a15      	ldr	r2, [pc, #84]	; (8002398 <HAL_RCC_OscConfig+0x280>)
 8002344:	f043 0301 	orr.w	r3, r3, #1
 8002348:	6753      	str	r3, [r2, #116]	; 0x74

			/* Get Start Tick*/
			tickstart = HAL_GetTick();
 800234a:	f7fe ff3b 	bl	80011c4 <HAL_GetTick>
 800234e:	6138      	str	r0, [r7, #16]

			/* Wait till LSI is ready */
			while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET) {
 8002350:	e008      	b.n	8002364 <HAL_RCC_OscConfig+0x24c>
				if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE) {
 8002352:	f7fe ff37 	bl	80011c4 <HAL_GetTick>
 8002356:	4602      	mov	r2, r0
 8002358:	693b      	ldr	r3, [r7, #16]
 800235a:	1ad3      	subs	r3, r2, r3
 800235c:	2b02      	cmp	r3, #2
 800235e:	d901      	bls.n	8002364 <HAL_RCC_OscConfig+0x24c>
					return HAL_TIMEOUT;
 8002360:	2303      	movs	r3, #3
 8002362:	e180      	b.n	8002666 <HAL_RCC_OscConfig+0x54e>
			while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET) {
 8002364:	4b0c      	ldr	r3, [pc, #48]	; (8002398 <HAL_RCC_OscConfig+0x280>)
 8002366:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002368:	f003 0302 	and.w	r3, r3, #2
 800236c:	2b00      	cmp	r3, #0
 800236e:	d0f0      	beq.n	8002352 <HAL_RCC_OscConfig+0x23a>
 8002370:	e01a      	b.n	80023a8 <HAL_RCC_OscConfig+0x290>
				}
			}
		} else {
			/* Disable the Internal Low Speed oscillator (LSI). */
			__HAL_RCC_LSI_DISABLE();
 8002372:	4b09      	ldr	r3, [pc, #36]	; (8002398 <HAL_RCC_OscConfig+0x280>)
 8002374:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002376:	4a08      	ldr	r2, [pc, #32]	; (8002398 <HAL_RCC_OscConfig+0x280>)
 8002378:	f023 0301 	bic.w	r3, r3, #1
 800237c:	6753      	str	r3, [r2, #116]	; 0x74

			/* Get Start Tick*/
			tickstart = HAL_GetTick();
 800237e:	f7fe ff21 	bl	80011c4 <HAL_GetTick>
 8002382:	6138      	str	r0, [r7, #16]

			/* Wait till LSI is ready */
			while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET) {
 8002384:	e00a      	b.n	800239c <HAL_RCC_OscConfig+0x284>
				if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE) {
 8002386:	f7fe ff1d 	bl	80011c4 <HAL_GetTick>
 800238a:	4602      	mov	r2, r0
 800238c:	693b      	ldr	r3, [r7, #16]
 800238e:	1ad3      	subs	r3, r2, r3
 8002390:	2b02      	cmp	r3, #2
 8002392:	d903      	bls.n	800239c <HAL_RCC_OscConfig+0x284>
					return HAL_TIMEOUT;
 8002394:	2303      	movs	r3, #3
 8002396:	e166      	b.n	8002666 <HAL_RCC_OscConfig+0x54e>
 8002398:	40023800 	.word	0x40023800
			while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET) {
 800239c:	4b92      	ldr	r3, [pc, #584]	; (80025e8 <HAL_RCC_OscConfig+0x4d0>)
 800239e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80023a0:	f003 0302 	and.w	r3, r3, #2
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d1ee      	bne.n	8002386 <HAL_RCC_OscConfig+0x26e>
				}
			}
		}
	}
	/*------------------------------ LSE Configuration -------------------------*/
	if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f003 0304 	and.w	r3, r3, #4
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	f000 80a4 	beq.w	80024fe <HAL_RCC_OscConfig+0x3e6>
		/* Check the parameters */
		assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

		/* Update LSE configuration in Backup Domain control register    */
		/* Requires to enable write access to Backup Domain of necessary */
		if (__HAL_RCC_PWR_IS_CLK_DISABLED()) {
 80023b6:	4b8c      	ldr	r3, [pc, #560]	; (80025e8 <HAL_RCC_OscConfig+0x4d0>)
 80023b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d10d      	bne.n	80023de <HAL_RCC_OscConfig+0x2c6>
			/* Enable Power Clock*/
			__HAL_RCC_PWR_CLK_ENABLE();
 80023c2:	4b89      	ldr	r3, [pc, #548]	; (80025e8 <HAL_RCC_OscConfig+0x4d0>)
 80023c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023c6:	4a88      	ldr	r2, [pc, #544]	; (80025e8 <HAL_RCC_OscConfig+0x4d0>)
 80023c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023cc:	6413      	str	r3, [r2, #64]	; 0x40
 80023ce:	4b86      	ldr	r3, [pc, #536]	; (80025e8 <HAL_RCC_OscConfig+0x4d0>)
 80023d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023d6:	60bb      	str	r3, [r7, #8]
 80023d8:	68bb      	ldr	r3, [r7, #8]
			pwrclkchanged = SET;
 80023da:	2301      	movs	r3, #1
 80023dc:	75fb      	strb	r3, [r7, #23]
		}

		if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP)) {
 80023de:	4b83      	ldr	r3, [pc, #524]	; (80025ec <HAL_RCC_OscConfig+0x4d4>)
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d118      	bne.n	800241c <HAL_RCC_OscConfig+0x304>
			/* Enable write access to Backup domain */
			PWR->CR1 |= PWR_CR1_DBP;
 80023ea:	4b80      	ldr	r3, [pc, #512]	; (80025ec <HAL_RCC_OscConfig+0x4d4>)
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	4a7f      	ldr	r2, [pc, #508]	; (80025ec <HAL_RCC_OscConfig+0x4d4>)
 80023f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023f4:	6013      	str	r3, [r2, #0]

			/* Wait for Backup domain Write protection disable */
			tickstart = HAL_GetTick();
 80023f6:	f7fe fee5 	bl	80011c4 <HAL_GetTick>
 80023fa:	6138      	str	r0, [r7, #16]

			while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP)) {
 80023fc:	e008      	b.n	8002410 <HAL_RCC_OscConfig+0x2f8>
				if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE) {
 80023fe:	f7fe fee1 	bl	80011c4 <HAL_GetTick>
 8002402:	4602      	mov	r2, r0
 8002404:	693b      	ldr	r3, [r7, #16]
 8002406:	1ad3      	subs	r3, r2, r3
 8002408:	2b64      	cmp	r3, #100	; 0x64
 800240a:	d901      	bls.n	8002410 <HAL_RCC_OscConfig+0x2f8>
					return HAL_TIMEOUT;
 800240c:	2303      	movs	r3, #3
 800240e:	e12a      	b.n	8002666 <HAL_RCC_OscConfig+0x54e>
			while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP)) {
 8002410:	4b76      	ldr	r3, [pc, #472]	; (80025ec <HAL_RCC_OscConfig+0x4d4>)
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002418:	2b00      	cmp	r3, #0
 800241a:	d0f0      	beq.n	80023fe <HAL_RCC_OscConfig+0x2e6>
				}
			}
		}

		/* Set the new LSE configuration -----------------------------------------*/
		__HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	689b      	ldr	r3, [r3, #8]
 8002420:	2b01      	cmp	r3, #1
 8002422:	d106      	bne.n	8002432 <HAL_RCC_OscConfig+0x31a>
 8002424:	4b70      	ldr	r3, [pc, #448]	; (80025e8 <HAL_RCC_OscConfig+0x4d0>)
 8002426:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002428:	4a6f      	ldr	r2, [pc, #444]	; (80025e8 <HAL_RCC_OscConfig+0x4d0>)
 800242a:	f043 0301 	orr.w	r3, r3, #1
 800242e:	6713      	str	r3, [r2, #112]	; 0x70
 8002430:	e02d      	b.n	800248e <HAL_RCC_OscConfig+0x376>
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	689b      	ldr	r3, [r3, #8]
 8002436:	2b00      	cmp	r3, #0
 8002438:	d10c      	bne.n	8002454 <HAL_RCC_OscConfig+0x33c>
 800243a:	4b6b      	ldr	r3, [pc, #428]	; (80025e8 <HAL_RCC_OscConfig+0x4d0>)
 800243c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800243e:	4a6a      	ldr	r2, [pc, #424]	; (80025e8 <HAL_RCC_OscConfig+0x4d0>)
 8002440:	f023 0301 	bic.w	r3, r3, #1
 8002444:	6713      	str	r3, [r2, #112]	; 0x70
 8002446:	4b68      	ldr	r3, [pc, #416]	; (80025e8 <HAL_RCC_OscConfig+0x4d0>)
 8002448:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800244a:	4a67      	ldr	r2, [pc, #412]	; (80025e8 <HAL_RCC_OscConfig+0x4d0>)
 800244c:	f023 0304 	bic.w	r3, r3, #4
 8002450:	6713      	str	r3, [r2, #112]	; 0x70
 8002452:	e01c      	b.n	800248e <HAL_RCC_OscConfig+0x376>
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	689b      	ldr	r3, [r3, #8]
 8002458:	2b05      	cmp	r3, #5
 800245a:	d10c      	bne.n	8002476 <HAL_RCC_OscConfig+0x35e>
 800245c:	4b62      	ldr	r3, [pc, #392]	; (80025e8 <HAL_RCC_OscConfig+0x4d0>)
 800245e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002460:	4a61      	ldr	r2, [pc, #388]	; (80025e8 <HAL_RCC_OscConfig+0x4d0>)
 8002462:	f043 0304 	orr.w	r3, r3, #4
 8002466:	6713      	str	r3, [r2, #112]	; 0x70
 8002468:	4b5f      	ldr	r3, [pc, #380]	; (80025e8 <HAL_RCC_OscConfig+0x4d0>)
 800246a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800246c:	4a5e      	ldr	r2, [pc, #376]	; (80025e8 <HAL_RCC_OscConfig+0x4d0>)
 800246e:	f043 0301 	orr.w	r3, r3, #1
 8002472:	6713      	str	r3, [r2, #112]	; 0x70
 8002474:	e00b      	b.n	800248e <HAL_RCC_OscConfig+0x376>
 8002476:	4b5c      	ldr	r3, [pc, #368]	; (80025e8 <HAL_RCC_OscConfig+0x4d0>)
 8002478:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800247a:	4a5b      	ldr	r2, [pc, #364]	; (80025e8 <HAL_RCC_OscConfig+0x4d0>)
 800247c:	f023 0301 	bic.w	r3, r3, #1
 8002480:	6713      	str	r3, [r2, #112]	; 0x70
 8002482:	4b59      	ldr	r3, [pc, #356]	; (80025e8 <HAL_RCC_OscConfig+0x4d0>)
 8002484:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002486:	4a58      	ldr	r2, [pc, #352]	; (80025e8 <HAL_RCC_OscConfig+0x4d0>)
 8002488:	f023 0304 	bic.w	r3, r3, #4
 800248c:	6713      	str	r3, [r2, #112]	; 0x70
		/* Check the LSE State */
		if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF) {
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	689b      	ldr	r3, [r3, #8]
 8002492:	2b00      	cmp	r3, #0
 8002494:	d015      	beq.n	80024c2 <HAL_RCC_OscConfig+0x3aa>
			/* Get Start Tick*/
			tickstart = HAL_GetTick();
 8002496:	f7fe fe95 	bl	80011c4 <HAL_GetTick>
 800249a:	6138      	str	r0, [r7, #16]

			/* Wait till LSE is ready */
			while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET) {
 800249c:	e00a      	b.n	80024b4 <HAL_RCC_OscConfig+0x39c>
				if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE) {
 800249e:	f7fe fe91 	bl	80011c4 <HAL_GetTick>
 80024a2:	4602      	mov	r2, r0
 80024a4:	693b      	ldr	r3, [r7, #16]
 80024a6:	1ad3      	subs	r3, r2, r3
 80024a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80024ac:	4293      	cmp	r3, r2
 80024ae:	d901      	bls.n	80024b4 <HAL_RCC_OscConfig+0x39c>
					return HAL_TIMEOUT;
 80024b0:	2303      	movs	r3, #3
 80024b2:	e0d8      	b.n	8002666 <HAL_RCC_OscConfig+0x54e>
			while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET) {
 80024b4:	4b4c      	ldr	r3, [pc, #304]	; (80025e8 <HAL_RCC_OscConfig+0x4d0>)
 80024b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024b8:	f003 0302 	and.w	r3, r3, #2
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d0ee      	beq.n	800249e <HAL_RCC_OscConfig+0x386>
 80024c0:	e014      	b.n	80024ec <HAL_RCC_OscConfig+0x3d4>
				}
			}
		} else {
			/* Get Start Tick*/
			tickstart = HAL_GetTick();
 80024c2:	f7fe fe7f 	bl	80011c4 <HAL_GetTick>
 80024c6:	6138      	str	r0, [r7, #16]

			/* Wait till LSE is ready */
			while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET) {
 80024c8:	e00a      	b.n	80024e0 <HAL_RCC_OscConfig+0x3c8>
				if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE) {
 80024ca:	f7fe fe7b 	bl	80011c4 <HAL_GetTick>
 80024ce:	4602      	mov	r2, r0
 80024d0:	693b      	ldr	r3, [r7, #16]
 80024d2:	1ad3      	subs	r3, r2, r3
 80024d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80024d8:	4293      	cmp	r3, r2
 80024da:	d901      	bls.n	80024e0 <HAL_RCC_OscConfig+0x3c8>
					return HAL_TIMEOUT;
 80024dc:	2303      	movs	r3, #3
 80024de:	e0c2      	b.n	8002666 <HAL_RCC_OscConfig+0x54e>
			while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET) {
 80024e0:	4b41      	ldr	r3, [pc, #260]	; (80025e8 <HAL_RCC_OscConfig+0x4d0>)
 80024e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024e4:	f003 0302 	and.w	r3, r3, #2
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d1ee      	bne.n	80024ca <HAL_RCC_OscConfig+0x3b2>
				}
			}
		}

		/* Restore clock configuration if changed */
		if (pwrclkchanged == SET) {
 80024ec:	7dfb      	ldrb	r3, [r7, #23]
 80024ee:	2b01      	cmp	r3, #1
 80024f0:	d105      	bne.n	80024fe <HAL_RCC_OscConfig+0x3e6>
			__HAL_RCC_PWR_CLK_DISABLE();
 80024f2:	4b3d      	ldr	r3, [pc, #244]	; (80025e8 <HAL_RCC_OscConfig+0x4d0>)
 80024f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024f6:	4a3c      	ldr	r2, [pc, #240]	; (80025e8 <HAL_RCC_OscConfig+0x4d0>)
 80024f8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80024fc:	6413      	str	r3, [r2, #64]	; 0x40
		}
	}
	/*-------------------------------- PLL Configuration -----------------------*/
	/* Check the parameters */
	assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
	if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE) {
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	699b      	ldr	r3, [r3, #24]
 8002502:	2b00      	cmp	r3, #0
 8002504:	f000 80ae 	beq.w	8002664 <HAL_RCC_OscConfig+0x54c>
		/* Check if the PLL is used as system clock or not */
		if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK) {
 8002508:	4b37      	ldr	r3, [pc, #220]	; (80025e8 <HAL_RCC_OscConfig+0x4d0>)
 800250a:	689b      	ldr	r3, [r3, #8]
 800250c:	f003 030c 	and.w	r3, r3, #12
 8002510:	2b08      	cmp	r3, #8
 8002512:	d06d      	beq.n	80025f0 <HAL_RCC_OscConfig+0x4d8>
			if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON) {
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	699b      	ldr	r3, [r3, #24]
 8002518:	2b02      	cmp	r3, #2
 800251a:	d14b      	bne.n	80025b4 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
				assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

				/* Disable the main PLL. */
				__HAL_RCC_PLL_DISABLE();
 800251c:	4b32      	ldr	r3, [pc, #200]	; (80025e8 <HAL_RCC_OscConfig+0x4d0>)
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	4a31      	ldr	r2, [pc, #196]	; (80025e8 <HAL_RCC_OscConfig+0x4d0>)
 8002522:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002526:	6013      	str	r3, [r2, #0]

				/* Get Start Tick*/
				tickstart = HAL_GetTick();
 8002528:	f7fe fe4c 	bl	80011c4 <HAL_GetTick>
 800252c:	6138      	str	r0, [r7, #16]

				/* Wait till PLL is ready */
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET) {
 800252e:	e008      	b.n	8002542 <HAL_RCC_OscConfig+0x42a>
					if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE) {
 8002530:	f7fe fe48 	bl	80011c4 <HAL_GetTick>
 8002534:	4602      	mov	r2, r0
 8002536:	693b      	ldr	r3, [r7, #16]
 8002538:	1ad3      	subs	r3, r2, r3
 800253a:	2b02      	cmp	r3, #2
 800253c:	d901      	bls.n	8002542 <HAL_RCC_OscConfig+0x42a>
						return HAL_TIMEOUT;
 800253e:	2303      	movs	r3, #3
 8002540:	e091      	b.n	8002666 <HAL_RCC_OscConfig+0x54e>
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET) {
 8002542:	4b29      	ldr	r3, [pc, #164]	; (80025e8 <HAL_RCC_OscConfig+0x4d0>)
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800254a:	2b00      	cmp	r3, #0
 800254c:	d1f0      	bne.n	8002530 <HAL_RCC_OscConfig+0x418>
					}
				}

				/* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
				__HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	69da      	ldr	r2, [r3, #28]
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	6a1b      	ldr	r3, [r3, #32]
 8002556:	431a      	orrs	r2, r3
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800255c:	019b      	lsls	r3, r3, #6
 800255e:	431a      	orrs	r2, r3
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002564:	085b      	lsrs	r3, r3, #1
 8002566:	3b01      	subs	r3, #1
 8002568:	041b      	lsls	r3, r3, #16
 800256a:	431a      	orrs	r2, r3
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002570:	061b      	lsls	r3, r3, #24
 8002572:	431a      	orrs	r2, r3
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002578:	071b      	lsls	r3, r3, #28
 800257a:	491b      	ldr	r1, [pc, #108]	; (80025e8 <HAL_RCC_OscConfig+0x4d0>)
 800257c:	4313      	orrs	r3, r2
 800257e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

				/* Enable the main PLL. */
				__HAL_RCC_PLL_ENABLE();
 8002580:	4b19      	ldr	r3, [pc, #100]	; (80025e8 <HAL_RCC_OscConfig+0x4d0>)
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	4a18      	ldr	r2, [pc, #96]	; (80025e8 <HAL_RCC_OscConfig+0x4d0>)
 8002586:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800258a:	6013      	str	r3, [r2, #0]

				/* Get Start Tick*/
				tickstart = HAL_GetTick();
 800258c:	f7fe fe1a 	bl	80011c4 <HAL_GetTick>
 8002590:	6138      	str	r0, [r7, #16]

				/* Wait till PLL is ready */
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET) {
 8002592:	e008      	b.n	80025a6 <HAL_RCC_OscConfig+0x48e>
					if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE) {
 8002594:	f7fe fe16 	bl	80011c4 <HAL_GetTick>
 8002598:	4602      	mov	r2, r0
 800259a:	693b      	ldr	r3, [r7, #16]
 800259c:	1ad3      	subs	r3, r2, r3
 800259e:	2b02      	cmp	r3, #2
 80025a0:	d901      	bls.n	80025a6 <HAL_RCC_OscConfig+0x48e>
						return HAL_TIMEOUT;
 80025a2:	2303      	movs	r3, #3
 80025a4:	e05f      	b.n	8002666 <HAL_RCC_OscConfig+0x54e>
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET) {
 80025a6:	4b10      	ldr	r3, [pc, #64]	; (80025e8 <HAL_RCC_OscConfig+0x4d0>)
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d0f0      	beq.n	8002594 <HAL_RCC_OscConfig+0x47c>
 80025b2:	e057      	b.n	8002664 <HAL_RCC_OscConfig+0x54c>
					}
				}
			} else {
				/* Disable the main PLL. */
				__HAL_RCC_PLL_DISABLE();
 80025b4:	4b0c      	ldr	r3, [pc, #48]	; (80025e8 <HAL_RCC_OscConfig+0x4d0>)
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	4a0b      	ldr	r2, [pc, #44]	; (80025e8 <HAL_RCC_OscConfig+0x4d0>)
 80025ba:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80025be:	6013      	str	r3, [r2, #0]

				/* Get Start Tick*/
				tickstart = HAL_GetTick();
 80025c0:	f7fe fe00 	bl	80011c4 <HAL_GetTick>
 80025c4:	6138      	str	r0, [r7, #16]

				/* Wait till PLL is ready */
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET) {
 80025c6:	e008      	b.n	80025da <HAL_RCC_OscConfig+0x4c2>
					if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE) {
 80025c8:	f7fe fdfc 	bl	80011c4 <HAL_GetTick>
 80025cc:	4602      	mov	r2, r0
 80025ce:	693b      	ldr	r3, [r7, #16]
 80025d0:	1ad3      	subs	r3, r2, r3
 80025d2:	2b02      	cmp	r3, #2
 80025d4:	d901      	bls.n	80025da <HAL_RCC_OscConfig+0x4c2>
						return HAL_TIMEOUT;
 80025d6:	2303      	movs	r3, #3
 80025d8:	e045      	b.n	8002666 <HAL_RCC_OscConfig+0x54e>
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET) {
 80025da:	4b03      	ldr	r3, [pc, #12]	; (80025e8 <HAL_RCC_OscConfig+0x4d0>)
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d1f0      	bne.n	80025c8 <HAL_RCC_OscConfig+0x4b0>
 80025e6:	e03d      	b.n	8002664 <HAL_RCC_OscConfig+0x54c>
 80025e8:	40023800 	.word	0x40023800
 80025ec:	40007000 	.word	0x40007000
					}
				}
			}
		} else {
			/* Do not return HAL_ERROR if request repeats the current configuration */
			pll_config = RCC->PLLCFGR;
 80025f0:	4b1f      	ldr	r3, [pc, #124]	; (8002670 <HAL_RCC_OscConfig+0x558>)
 80025f2:	685b      	ldr	r3, [r3, #4]
 80025f4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
			if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	699b      	ldr	r3, [r3, #24]
 80025fa:	2b01      	cmp	r3, #1
 80025fc:	d030      	beq.n	8002660 <HAL_RCC_OscConfig+0x548>
					|| (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
							!= RCC_OscInitStruct->PLL.PLLSource)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	69db      	ldr	r3, [r3, #28]
					|| (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)
 8002608:	429a      	cmp	r2, r3
 800260a:	d129      	bne.n	8002660 <HAL_RCC_OscConfig+0x548>
					|| (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
							!= RCC_OscInitStruct->PLL.PLLM)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	6a1b      	ldr	r3, [r3, #32]
					|| (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)
 8002616:	429a      	cmp	r2, r3
 8002618:	d122      	bne.n	8002660 <HAL_RCC_OscConfig+0x548>
					|| (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)
 800261a:	68fa      	ldr	r2, [r7, #12]
 800261c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002620:	4013      	ands	r3, r2
							!= (RCC_OscInitStruct->PLL.PLLN
 8002622:	687a      	ldr	r2, [r7, #4]
 8002624:	6a52      	ldr	r2, [r2, #36]	; 0x24
									<< RCC_PLLCFGR_PLLN_Pos))
 8002626:	0192      	lsls	r2, r2, #6
					|| (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)
 8002628:	4293      	cmp	r3, r2
 800262a:	d119      	bne.n	8002660 <HAL_RCC_OscConfig+0x548>
					|| (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
							!= ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002636:	085b      	lsrs	r3, r3, #1
 8002638:	3b01      	subs	r3, #1
									<< RCC_PLLCFGR_PLLP_Pos))
 800263a:	041b      	lsls	r3, r3, #16
					|| (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)
 800263c:	429a      	cmp	r2, r3
 800263e:	d10f      	bne.n	8002660 <HAL_RCC_OscConfig+0x548>
					|| (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
							!= (RCC_OscInitStruct->PLL.PLLQ
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	6adb      	ldr	r3, [r3, #44]	; 0x2c
									<< RCC_PLLCFGR_PLLQ_Pos))
 800264a:	061b      	lsls	r3, r3, #24
					|| (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)
 800264c:	429a      	cmp	r2, r3
 800264e:	d107      	bne.n	8002660 <HAL_RCC_OscConfig+0x548>
					|| (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
							!= (RCC_OscInitStruct->PLL.PLLR
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
									<< RCC_PLLCFGR_PLLR_Pos)))
 800265a:	071b      	lsls	r3, r3, #28
					|| (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)
 800265c:	429a      	cmp	r2, r3
 800265e:	d001      	beq.n	8002664 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
					{
				return HAL_ERROR;
 8002660:	2301      	movs	r3, #1
 8002662:	e000      	b.n	8002666 <HAL_RCC_OscConfig+0x54e>
			}
		}
	}
	return HAL_OK;
 8002664:	2300      	movs	r3, #0
}
 8002666:	4618      	mov	r0, r3
 8002668:	3718      	adds	r7, #24
 800266a:	46bd      	mov	sp, r7
 800266c:	bd80      	pop	{r7, pc}
 800266e:	bf00      	nop
 8002670:	40023800 	.word	0x40023800

08002674 <HAL_RCC_ClockConfig>:
 *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
 *         (for more details refer to section above "Initialization/de-initialization functions")
 * @retval None
 */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef *RCC_ClkInitStruct,
		uint32_t FLatency) {
 8002674:	b580      	push	{r7, lr}
 8002676:	b084      	sub	sp, #16
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
 800267c:	6039      	str	r1, [r7, #0]
	uint32_t tickstart = 0;
 800267e:	2300      	movs	r3, #0
 8002680:	60fb      	str	r3, [r7, #12]

	/* Check Null pointer */
	if (RCC_ClkInitStruct == NULL) {
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	2b00      	cmp	r3, #0
 8002686:	d101      	bne.n	800268c <HAL_RCC_ClockConfig+0x18>
		return HAL_ERROR;
 8002688:	2301      	movs	r3, #1
 800268a:	e0d0      	b.n	800282e <HAL_RCC_ClockConfig+0x1ba>
	/* To correctly read data from FLASH memory, the number of wait states (LATENCY)
	 must be correctly programmed according to the frequency of the CPU clock
	 (HCLK) and the supply voltage of the device. */

	/* Increasing the CPU frequency */
	if (FLatency > __HAL_FLASH_GET_LATENCY()) {
 800268c:	4b6a      	ldr	r3, [pc, #424]	; (8002838 <HAL_RCC_ClockConfig+0x1c4>)
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f003 030f 	and.w	r3, r3, #15
 8002694:	683a      	ldr	r2, [r7, #0]
 8002696:	429a      	cmp	r2, r3
 8002698:	d910      	bls.n	80026bc <HAL_RCC_ClockConfig+0x48>
		/* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
		__HAL_FLASH_SET_LATENCY(FLatency);
 800269a:	4b67      	ldr	r3, [pc, #412]	; (8002838 <HAL_RCC_ClockConfig+0x1c4>)
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f023 020f 	bic.w	r2, r3, #15
 80026a2:	4965      	ldr	r1, [pc, #404]	; (8002838 <HAL_RCC_ClockConfig+0x1c4>)
 80026a4:	683b      	ldr	r3, [r7, #0]
 80026a6:	4313      	orrs	r3, r2
 80026a8:	600b      	str	r3, [r1, #0]

		/* Check that the new number of wait states is taken into account to access the Flash
		 memory by reading the FLASH_ACR register */
		if (__HAL_FLASH_GET_LATENCY() != FLatency) {
 80026aa:	4b63      	ldr	r3, [pc, #396]	; (8002838 <HAL_RCC_ClockConfig+0x1c4>)
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f003 030f 	and.w	r3, r3, #15
 80026b2:	683a      	ldr	r2, [r7, #0]
 80026b4:	429a      	cmp	r2, r3
 80026b6:	d001      	beq.n	80026bc <HAL_RCC_ClockConfig+0x48>
			return HAL_ERROR;
 80026b8:	2301      	movs	r3, #1
 80026ba:	e0b8      	b.n	800282e <HAL_RCC_ClockConfig+0x1ba>
		}
	}

	/*-------------------------- HCLK Configuration --------------------------*/
	if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f003 0302 	and.w	r3, r3, #2
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d020      	beq.n	800270a <HAL_RCC_ClockConfig+0x96>
			== RCC_CLOCKTYPE_HCLK) {
		/* Set the highest APBx dividers in order to ensure that we do not go through
		 a non-spec phase whatever we decrease or increase HCLK. */
		if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f003 0304 	and.w	r3, r3, #4
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d005      	beq.n	80026e0 <HAL_RCC_ClockConfig+0x6c>
				== RCC_CLOCKTYPE_PCLK1) {
			MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80026d4:	4b59      	ldr	r3, [pc, #356]	; (800283c <HAL_RCC_ClockConfig+0x1c8>)
 80026d6:	689b      	ldr	r3, [r3, #8]
 80026d8:	4a58      	ldr	r2, [pc, #352]	; (800283c <HAL_RCC_ClockConfig+0x1c8>)
 80026da:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80026de:	6093      	str	r3, [r2, #8]
		}

		if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f003 0308 	and.w	r3, r3, #8
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d005      	beq.n	80026f8 <HAL_RCC_ClockConfig+0x84>
				== RCC_CLOCKTYPE_PCLK2) {
			MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80026ec:	4b53      	ldr	r3, [pc, #332]	; (800283c <HAL_RCC_ClockConfig+0x1c8>)
 80026ee:	689b      	ldr	r3, [r3, #8]
 80026f0:	4a52      	ldr	r2, [pc, #328]	; (800283c <HAL_RCC_ClockConfig+0x1c8>)
 80026f2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80026f6:	6093      	str	r3, [r2, #8]
		}

		/* Set the new HCLK clock divider */
		assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
		MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80026f8:	4b50      	ldr	r3, [pc, #320]	; (800283c <HAL_RCC_ClockConfig+0x1c8>)
 80026fa:	689b      	ldr	r3, [r3, #8]
 80026fc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	689b      	ldr	r3, [r3, #8]
 8002704:	494d      	ldr	r1, [pc, #308]	; (800283c <HAL_RCC_ClockConfig+0x1c8>)
 8002706:	4313      	orrs	r3, r2
 8002708:	608b      	str	r3, [r1, #8]
	}

	/*------------------------- SYSCLK Configuration ---------------------------*/
	if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f003 0301 	and.w	r3, r3, #1
 8002712:	2b00      	cmp	r3, #0
 8002714:	d040      	beq.n	8002798 <HAL_RCC_ClockConfig+0x124>
			== RCC_CLOCKTYPE_SYSCLK) {
		assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

		/* HSE is selected as System Clock Source */
		if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE) {
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	685b      	ldr	r3, [r3, #4]
 800271a:	2b01      	cmp	r3, #1
 800271c:	d107      	bne.n	800272e <HAL_RCC_ClockConfig+0xba>
			/* Check the HSE ready flag */
			if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET) {
 800271e:	4b47      	ldr	r3, [pc, #284]	; (800283c <HAL_RCC_ClockConfig+0x1c8>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002726:	2b00      	cmp	r3, #0
 8002728:	d115      	bne.n	8002756 <HAL_RCC_ClockConfig+0xe2>
				return HAL_ERROR;
 800272a:	2301      	movs	r3, #1
 800272c:	e07f      	b.n	800282e <HAL_RCC_ClockConfig+0x1ba>
			}
		}
		/* PLL is selected as System Clock Source */
		else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK) {
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	685b      	ldr	r3, [r3, #4]
 8002732:	2b02      	cmp	r3, #2
 8002734:	d107      	bne.n	8002746 <HAL_RCC_ClockConfig+0xd2>
			/* Check the PLL ready flag */
			if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET) {
 8002736:	4b41      	ldr	r3, [pc, #260]	; (800283c <HAL_RCC_ClockConfig+0x1c8>)
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800273e:	2b00      	cmp	r3, #0
 8002740:	d109      	bne.n	8002756 <HAL_RCC_ClockConfig+0xe2>
				return HAL_ERROR;
 8002742:	2301      	movs	r3, #1
 8002744:	e073      	b.n	800282e <HAL_RCC_ClockConfig+0x1ba>
			}
		}
		/* HSI is selected as System Clock Source */
		else {
			/* Check the HSI ready flag */
			if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET) {
 8002746:	4b3d      	ldr	r3, [pc, #244]	; (800283c <HAL_RCC_ClockConfig+0x1c8>)
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f003 0302 	and.w	r3, r3, #2
 800274e:	2b00      	cmp	r3, #0
 8002750:	d101      	bne.n	8002756 <HAL_RCC_ClockConfig+0xe2>
				return HAL_ERROR;
 8002752:	2301      	movs	r3, #1
 8002754:	e06b      	b.n	800282e <HAL_RCC_ClockConfig+0x1ba>
			}
		}

		__HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002756:	4b39      	ldr	r3, [pc, #228]	; (800283c <HAL_RCC_ClockConfig+0x1c8>)
 8002758:	689b      	ldr	r3, [r3, #8]
 800275a:	f023 0203 	bic.w	r2, r3, #3
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	685b      	ldr	r3, [r3, #4]
 8002762:	4936      	ldr	r1, [pc, #216]	; (800283c <HAL_RCC_ClockConfig+0x1c8>)
 8002764:	4313      	orrs	r3, r2
 8002766:	608b      	str	r3, [r1, #8]

		/* Get Start Tick*/
		tickstart = HAL_GetTick();
 8002768:	f7fe fd2c 	bl	80011c4 <HAL_GetTick>
 800276c:	60f8      	str	r0, [r7, #12]

		while (__HAL_RCC_GET_SYSCLK_SOURCE()
 800276e:	e00a      	b.n	8002786 <HAL_RCC_ClockConfig+0x112>
				!= (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos)) {
			if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE) {
 8002770:	f7fe fd28 	bl	80011c4 <HAL_GetTick>
 8002774:	4602      	mov	r2, r0
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	1ad3      	subs	r3, r2, r3
 800277a:	f241 3288 	movw	r2, #5000	; 0x1388
 800277e:	4293      	cmp	r3, r2
 8002780:	d901      	bls.n	8002786 <HAL_RCC_ClockConfig+0x112>
				return HAL_TIMEOUT;
 8002782:	2303      	movs	r3, #3
 8002784:	e053      	b.n	800282e <HAL_RCC_ClockConfig+0x1ba>
		while (__HAL_RCC_GET_SYSCLK_SOURCE()
 8002786:	4b2d      	ldr	r3, [pc, #180]	; (800283c <HAL_RCC_ClockConfig+0x1c8>)
 8002788:	689b      	ldr	r3, [r3, #8]
 800278a:	f003 020c 	and.w	r2, r3, #12
				!= (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos)) {
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	685b      	ldr	r3, [r3, #4]
 8002792:	009b      	lsls	r3, r3, #2
		while (__HAL_RCC_GET_SYSCLK_SOURCE()
 8002794:	429a      	cmp	r2, r3
 8002796:	d1eb      	bne.n	8002770 <HAL_RCC_ClockConfig+0xfc>
			}
		}
	}

	/* Decreasing the number of wait states because of lower CPU frequency */
	if (FLatency < __HAL_FLASH_GET_LATENCY()) {
 8002798:	4b27      	ldr	r3, [pc, #156]	; (8002838 <HAL_RCC_ClockConfig+0x1c4>)
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f003 030f 	and.w	r3, r3, #15
 80027a0:	683a      	ldr	r2, [r7, #0]
 80027a2:	429a      	cmp	r2, r3
 80027a4:	d210      	bcs.n	80027c8 <HAL_RCC_ClockConfig+0x154>
		/* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
		__HAL_FLASH_SET_LATENCY(FLatency);
 80027a6:	4b24      	ldr	r3, [pc, #144]	; (8002838 <HAL_RCC_ClockConfig+0x1c4>)
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f023 020f 	bic.w	r2, r3, #15
 80027ae:	4922      	ldr	r1, [pc, #136]	; (8002838 <HAL_RCC_ClockConfig+0x1c4>)
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	4313      	orrs	r3, r2
 80027b4:	600b      	str	r3, [r1, #0]

		/* Check that the new number of wait states is taken into account to access the Flash
		 memory by reading the FLASH_ACR register */
		if (__HAL_FLASH_GET_LATENCY() != FLatency) {
 80027b6:	4b20      	ldr	r3, [pc, #128]	; (8002838 <HAL_RCC_ClockConfig+0x1c4>)
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f003 030f 	and.w	r3, r3, #15
 80027be:	683a      	ldr	r2, [r7, #0]
 80027c0:	429a      	cmp	r2, r3
 80027c2:	d001      	beq.n	80027c8 <HAL_RCC_ClockConfig+0x154>
			return HAL_ERROR;
 80027c4:	2301      	movs	r3, #1
 80027c6:	e032      	b.n	800282e <HAL_RCC_ClockConfig+0x1ba>
		}
	}

	/*-------------------------- PCLK1 Configuration ---------------------------*/
	if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f003 0304 	and.w	r3, r3, #4
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d008      	beq.n	80027e6 <HAL_RCC_ClockConfig+0x172>
			== RCC_CLOCKTYPE_PCLK1) {
		assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
		MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1,
 80027d4:	4b19      	ldr	r3, [pc, #100]	; (800283c <HAL_RCC_ClockConfig+0x1c8>)
 80027d6:	689b      	ldr	r3, [r3, #8]
 80027d8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	68db      	ldr	r3, [r3, #12]
 80027e0:	4916      	ldr	r1, [pc, #88]	; (800283c <HAL_RCC_ClockConfig+0x1c8>)
 80027e2:	4313      	orrs	r3, r2
 80027e4:	608b      	str	r3, [r1, #8]
				RCC_ClkInitStruct->APB1CLKDivider);
	}

	/*-------------------------- PCLK2 Configuration ---------------------------*/
	if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2)
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f003 0308 	and.w	r3, r3, #8
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d009      	beq.n	8002806 <HAL_RCC_ClockConfig+0x192>
			== RCC_CLOCKTYPE_PCLK2) {
		assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
		MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2,
 80027f2:	4b12      	ldr	r3, [pc, #72]	; (800283c <HAL_RCC_ClockConfig+0x1c8>)
 80027f4:	689b      	ldr	r3, [r3, #8]
 80027f6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	691b      	ldr	r3, [r3, #16]
 80027fe:	00db      	lsls	r3, r3, #3
 8002800:	490e      	ldr	r1, [pc, #56]	; (800283c <HAL_RCC_ClockConfig+0x1c8>)
 8002802:	4313      	orrs	r3, r2
 8002804:	608b      	str	r3, [r1, #8]
				((RCC_ClkInitStruct->APB2CLKDivider) << 3));
	}

	/* Update the SystemCoreClock global variable */
	SystemCoreClock = HAL_RCC_GetSysClockFreq()
 8002806:	f000 f821 	bl	800284c <HAL_RCC_GetSysClockFreq>
 800280a:	4602      	mov	r2, r0
			>> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800280c:	4b0b      	ldr	r3, [pc, #44]	; (800283c <HAL_RCC_ClockConfig+0x1c8>)
 800280e:	689b      	ldr	r3, [r3, #8]
 8002810:	091b      	lsrs	r3, r3, #4
 8002812:	f003 030f 	and.w	r3, r3, #15
 8002816:	490a      	ldr	r1, [pc, #40]	; (8002840 <HAL_RCC_ClockConfig+0x1cc>)
 8002818:	5ccb      	ldrb	r3, [r1, r3]
 800281a:	fa22 f303 	lsr.w	r3, r2, r3
	SystemCoreClock = HAL_RCC_GetSysClockFreq()
 800281e:	4a09      	ldr	r2, [pc, #36]	; (8002844 <HAL_RCC_ClockConfig+0x1d0>)
 8002820:	6013      	str	r3, [r2, #0]

	/* Configure the source of time base considering new system clocks settings*/
	HAL_InitTick(uwTickPrio);
 8002822:	4b09      	ldr	r3, [pc, #36]	; (8002848 <HAL_RCC_ClockConfig+0x1d4>)
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	4618      	mov	r0, r3
 8002828:	f7fe fc88 	bl	800113c <HAL_InitTick>

	return HAL_OK;
 800282c:	2300      	movs	r3, #0
}
 800282e:	4618      	mov	r0, r3
 8002830:	3710      	adds	r7, #16
 8002832:	46bd      	mov	sp, r7
 8002834:	bd80      	pop	{r7, pc}
 8002836:	bf00      	nop
 8002838:	40023c00 	.word	0x40023c00
 800283c:	40023800 	.word	0x40023800
 8002840:	08005584 	.word	0x08005584
 8002844:	20000000 	.word	0x20000000
 8002848:	20000004 	.word	0x20000004

0800284c <HAL_RCC_GetSysClockFreq>:
 *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
 *
 *
 * @retval SYSCLK frequency
 */
uint32_t HAL_RCC_GetSysClockFreq(void) {
 800284c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002850:	b094      	sub	sp, #80	; 0x50
 8002852:	af00      	add	r7, sp, #0
	uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002854:	2300      	movs	r3, #0
 8002856:	647b      	str	r3, [r7, #68]	; 0x44
 8002858:	2300      	movs	r3, #0
 800285a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800285c:	2300      	movs	r3, #0
 800285e:	643b      	str	r3, [r7, #64]	; 0x40
	uint32_t sysclockfreq = 0;
 8002860:	2300      	movs	r3, #0
 8002862:	64bb      	str	r3, [r7, #72]	; 0x48

	/* Get SYSCLK source -------------------------------------------------------*/
	switch (RCC->CFGR & RCC_CFGR_SWS) {
 8002864:	4b79      	ldr	r3, [pc, #484]	; (8002a4c <HAL_RCC_GetSysClockFreq+0x200>)
 8002866:	689b      	ldr	r3, [r3, #8]
 8002868:	f003 030c 	and.w	r3, r3, #12
 800286c:	2b08      	cmp	r3, #8
 800286e:	d00d      	beq.n	800288c <HAL_RCC_GetSysClockFreq+0x40>
 8002870:	2b08      	cmp	r3, #8
 8002872:	f200 80e1 	bhi.w	8002a38 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002876:	2b00      	cmp	r3, #0
 8002878:	d002      	beq.n	8002880 <HAL_RCC_GetSysClockFreq+0x34>
 800287a:	2b04      	cmp	r3, #4
 800287c:	d003      	beq.n	8002886 <HAL_RCC_GetSysClockFreq+0x3a>
 800287e:	e0db      	b.n	8002a38 <HAL_RCC_GetSysClockFreq+0x1ec>
	case RCC_SYSCLKSOURCE_STATUS_HSI: /* HSI used as system clock source */
	{
		sysclockfreq = HSI_VALUE;
 8002880:	4b73      	ldr	r3, [pc, #460]	; (8002a50 <HAL_RCC_GetSysClockFreq+0x204>)
 8002882:	64bb      	str	r3, [r7, #72]	; 0x48
		break;
 8002884:	e0db      	b.n	8002a3e <HAL_RCC_GetSysClockFreq+0x1f2>
	}
	case RCC_SYSCLKSOURCE_STATUS_HSE: /* HSE used as system clock  source */
	{
		sysclockfreq = HSE_VALUE;
 8002886:	4b73      	ldr	r3, [pc, #460]	; (8002a54 <HAL_RCC_GetSysClockFreq+0x208>)
 8002888:	64bb      	str	r3, [r7, #72]	; 0x48
		break;
 800288a:	e0d8      	b.n	8002a3e <HAL_RCC_GetSysClockFreq+0x1f2>
	}
	case RCC_SYSCLKSOURCE_STATUS_PLLCLK: /* PLL used as system clock  source */
	{
		/* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
		 SYSCLK = PLL_VCO / PLLP */
		pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800288c:	4b6f      	ldr	r3, [pc, #444]	; (8002a4c <HAL_RCC_GetSysClockFreq+0x200>)
 800288e:	685b      	ldr	r3, [r3, #4]
 8002890:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002894:	647b      	str	r3, [r7, #68]	; 0x44
		if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI) {
 8002896:	4b6d      	ldr	r3, [pc, #436]	; (8002a4c <HAL_RCC_GetSysClockFreq+0x200>)
 8002898:	685b      	ldr	r3, [r3, #4]
 800289a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d063      	beq.n	800296a <HAL_RCC_GetSysClockFreq+0x11e>
			/* HSE used as PLL clock source */
			pllvco = (uint32_t) ((((uint64_t) HSE_VALUE
					* ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN)
 80028a2:	4b6a      	ldr	r3, [pc, #424]	; (8002a4c <HAL_RCC_GetSysClockFreq+0x200>)
 80028a4:	685b      	ldr	r3, [r3, #4]
							>> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t) pllm);
 80028a6:	099b      	lsrs	r3, r3, #6
					* ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN)
 80028a8:	2200      	movs	r2, #0
 80028aa:	63bb      	str	r3, [r7, #56]	; 0x38
 80028ac:	63fa      	str	r2, [r7, #60]	; 0x3c
 80028ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80028b4:	633b      	str	r3, [r7, #48]	; 0x30
 80028b6:	2300      	movs	r3, #0
 80028b8:	637b      	str	r3, [r7, #52]	; 0x34
 80028ba:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80028be:	4622      	mov	r2, r4
 80028c0:	462b      	mov	r3, r5
 80028c2:	f04f 0000 	mov.w	r0, #0
 80028c6:	f04f 0100 	mov.w	r1, #0
 80028ca:	0159      	lsls	r1, r3, #5
 80028cc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80028d0:	0150      	lsls	r0, r2, #5
 80028d2:	4602      	mov	r2, r0
 80028d4:	460b      	mov	r3, r1
 80028d6:	4621      	mov	r1, r4
 80028d8:	1a51      	subs	r1, r2, r1
 80028da:	6139      	str	r1, [r7, #16]
 80028dc:	4629      	mov	r1, r5
 80028de:	eb63 0301 	sbc.w	r3, r3, r1
 80028e2:	617b      	str	r3, [r7, #20]
 80028e4:	f04f 0200 	mov.w	r2, #0
 80028e8:	f04f 0300 	mov.w	r3, #0
 80028ec:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80028f0:	4659      	mov	r1, fp
 80028f2:	018b      	lsls	r3, r1, #6
 80028f4:	4651      	mov	r1, sl
 80028f6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80028fa:	4651      	mov	r1, sl
 80028fc:	018a      	lsls	r2, r1, #6
 80028fe:	4651      	mov	r1, sl
 8002900:	ebb2 0801 	subs.w	r8, r2, r1
 8002904:	4659      	mov	r1, fp
 8002906:	eb63 0901 	sbc.w	r9, r3, r1
 800290a:	f04f 0200 	mov.w	r2, #0
 800290e:	f04f 0300 	mov.w	r3, #0
 8002912:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002916:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800291a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800291e:	4690      	mov	r8, r2
 8002920:	4699      	mov	r9, r3
 8002922:	4623      	mov	r3, r4
 8002924:	eb18 0303 	adds.w	r3, r8, r3
 8002928:	60bb      	str	r3, [r7, #8]
 800292a:	462b      	mov	r3, r5
 800292c:	eb49 0303 	adc.w	r3, r9, r3
 8002930:	60fb      	str	r3, [r7, #12]
 8002932:	f04f 0200 	mov.w	r2, #0
 8002936:	f04f 0300 	mov.w	r3, #0
 800293a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800293e:	4629      	mov	r1, r5
 8002940:	024b      	lsls	r3, r1, #9
 8002942:	4621      	mov	r1, r4
 8002944:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002948:	4621      	mov	r1, r4
 800294a:	024a      	lsls	r2, r1, #9
 800294c:	4610      	mov	r0, r2
 800294e:	4619      	mov	r1, r3
							>> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t) pllm);
 8002950:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002952:	2200      	movs	r2, #0
 8002954:	62bb      	str	r3, [r7, #40]	; 0x28
 8002956:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002958:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800295c:	f7fd fc6c 	bl	8000238 <__aeabi_uldivmod>
 8002960:	4602      	mov	r2, r0
 8002962:	460b      	mov	r3, r1
			pllvco = (uint32_t) ((((uint64_t) HSE_VALUE
 8002964:	4613      	mov	r3, r2
 8002966:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002968:	e058      	b.n	8002a1c <HAL_RCC_GetSysClockFreq+0x1d0>
		} else {
			/* HSI used as PLL clock source */
			pllvco = (uint32_t) ((((uint64_t) HSI_VALUE
					* ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN)
 800296a:	4b38      	ldr	r3, [pc, #224]	; (8002a4c <HAL_RCC_GetSysClockFreq+0x200>)
 800296c:	685b      	ldr	r3, [r3, #4]
							>> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t) pllm);
 800296e:	099b      	lsrs	r3, r3, #6
					* ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN)
 8002970:	2200      	movs	r2, #0
 8002972:	4618      	mov	r0, r3
 8002974:	4611      	mov	r1, r2
 8002976:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800297a:	623b      	str	r3, [r7, #32]
 800297c:	2300      	movs	r3, #0
 800297e:	627b      	str	r3, [r7, #36]	; 0x24
 8002980:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002984:	4642      	mov	r2, r8
 8002986:	464b      	mov	r3, r9
 8002988:	f04f 0000 	mov.w	r0, #0
 800298c:	f04f 0100 	mov.w	r1, #0
 8002990:	0159      	lsls	r1, r3, #5
 8002992:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002996:	0150      	lsls	r0, r2, #5
 8002998:	4602      	mov	r2, r0
 800299a:	460b      	mov	r3, r1
 800299c:	4641      	mov	r1, r8
 800299e:	ebb2 0a01 	subs.w	sl, r2, r1
 80029a2:	4649      	mov	r1, r9
 80029a4:	eb63 0b01 	sbc.w	fp, r3, r1
 80029a8:	f04f 0200 	mov.w	r2, #0
 80029ac:	f04f 0300 	mov.w	r3, #0
 80029b0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80029b4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80029b8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80029bc:	ebb2 040a 	subs.w	r4, r2, sl
 80029c0:	eb63 050b 	sbc.w	r5, r3, fp
 80029c4:	f04f 0200 	mov.w	r2, #0
 80029c8:	f04f 0300 	mov.w	r3, #0
 80029cc:	00eb      	lsls	r3, r5, #3
 80029ce:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80029d2:	00e2      	lsls	r2, r4, #3
 80029d4:	4614      	mov	r4, r2
 80029d6:	461d      	mov	r5, r3
 80029d8:	4643      	mov	r3, r8
 80029da:	18e3      	adds	r3, r4, r3
 80029dc:	603b      	str	r3, [r7, #0]
 80029de:	464b      	mov	r3, r9
 80029e0:	eb45 0303 	adc.w	r3, r5, r3
 80029e4:	607b      	str	r3, [r7, #4]
 80029e6:	f04f 0200 	mov.w	r2, #0
 80029ea:	f04f 0300 	mov.w	r3, #0
 80029ee:	e9d7 4500 	ldrd	r4, r5, [r7]
 80029f2:	4629      	mov	r1, r5
 80029f4:	028b      	lsls	r3, r1, #10
 80029f6:	4621      	mov	r1, r4
 80029f8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80029fc:	4621      	mov	r1, r4
 80029fe:	028a      	lsls	r2, r1, #10
 8002a00:	4610      	mov	r0, r2
 8002a02:	4619      	mov	r1, r3
							>> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t) pllm);
 8002a04:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002a06:	2200      	movs	r2, #0
 8002a08:	61bb      	str	r3, [r7, #24]
 8002a0a:	61fa      	str	r2, [r7, #28]
 8002a0c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002a10:	f7fd fc12 	bl	8000238 <__aeabi_uldivmod>
 8002a14:	4602      	mov	r2, r0
 8002a16:	460b      	mov	r3, r1
			pllvco = (uint32_t) ((((uint64_t) HSI_VALUE
 8002a18:	4613      	mov	r3, r2
 8002a1a:	64fb      	str	r3, [r7, #76]	; 0x4c
		}
		pllp =
				((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos)
 8002a1c:	4b0b      	ldr	r3, [pc, #44]	; (8002a4c <HAL_RCC_GetSysClockFreq+0x200>)
 8002a1e:	685b      	ldr	r3, [r3, #4]
 8002a20:	0c1b      	lsrs	r3, r3, #16
 8002a22:	f003 0303 	and.w	r3, r3, #3
						+ 1) * 2);
 8002a26:	3301      	adds	r3, #1
		pllp =
 8002a28:	005b      	lsls	r3, r3, #1
 8002a2a:	643b      	str	r3, [r7, #64]	; 0x40

		sysclockfreq = pllvco / pllp;
 8002a2c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002a2e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002a30:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a34:	64bb      	str	r3, [r7, #72]	; 0x48
		break;
 8002a36:	e002      	b.n	8002a3e <HAL_RCC_GetSysClockFreq+0x1f2>
	}
	default: {
		sysclockfreq = HSI_VALUE;
 8002a38:	4b05      	ldr	r3, [pc, #20]	; (8002a50 <HAL_RCC_GetSysClockFreq+0x204>)
 8002a3a:	64bb      	str	r3, [r7, #72]	; 0x48
		break;
 8002a3c:	bf00      	nop
	}
	}
	return sysclockfreq;
 8002a3e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002a40:	4618      	mov	r0, r3
 8002a42:	3750      	adds	r7, #80	; 0x50
 8002a44:	46bd      	mov	sp, r7
 8002a46:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002a4a:	bf00      	nop
 8002a4c:	40023800 	.word	0x40023800
 8002a50:	00f42400 	.word	0x00f42400
 8002a54:	007a1200 	.word	0x007a1200

08002a58 <HAL_RCC_GetHCLKFreq>:
 * @note   Each time HCLK changes, this function must be called to update the
 *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
 * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
 * @retval HCLK frequency
 */
uint32_t HAL_RCC_GetHCLKFreq(void) {
 8002a58:	b480      	push	{r7}
 8002a5a:	af00      	add	r7, sp, #0
	return SystemCoreClock;
 8002a5c:	4b03      	ldr	r3, [pc, #12]	; (8002a6c <HAL_RCC_GetHCLKFreq+0x14>)
 8002a5e:	681b      	ldr	r3, [r3, #0]
}
 8002a60:	4618      	mov	r0, r3
 8002a62:	46bd      	mov	sp, r7
 8002a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a68:	4770      	bx	lr
 8002a6a:	bf00      	nop
 8002a6c:	20000000 	.word	0x20000000

08002a70 <HAL_RCC_GetPCLK1Freq>:
 * @brief  Returns the PCLK1 frequency
 * @note   Each time PCLK1 changes, this function must be called to update the
 *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
 * @retval PCLK1 frequency
 */
uint32_t HAL_RCC_GetPCLK1Freq(void) {
 8002a70:	b580      	push	{r7, lr}
 8002a72:	af00      	add	r7, sp, #0
	/* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
	return (HAL_RCC_GetHCLKFreq()
 8002a74:	f7ff fff0 	bl	8002a58 <HAL_RCC_GetHCLKFreq>
 8002a78:	4602      	mov	r2, r0
			>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002a7a:	4b05      	ldr	r3, [pc, #20]	; (8002a90 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002a7c:	689b      	ldr	r3, [r3, #8]
 8002a7e:	0a9b      	lsrs	r3, r3, #10
 8002a80:	f003 0307 	and.w	r3, r3, #7
 8002a84:	4903      	ldr	r1, [pc, #12]	; (8002a94 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002a86:	5ccb      	ldrb	r3, [r1, r3]
 8002a88:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	bd80      	pop	{r7, pc}
 8002a90:	40023800 	.word	0x40023800
 8002a94:	08005594 	.word	0x08005594

08002a98 <HAL_RCC_GetPCLK2Freq>:
 * @brief  Returns the PCLK2 frequency
 * @note   Each time PCLK2 changes, this function must be called to update the
 *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
 * @retval PCLK2 frequency
 */
uint32_t HAL_RCC_GetPCLK2Freq(void) {
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	af00      	add	r7, sp, #0
	/* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
	return (HAL_RCC_GetHCLKFreq()
 8002a9c:	f7ff ffdc 	bl	8002a58 <HAL_RCC_GetHCLKFreq>
 8002aa0:	4602      	mov	r2, r0
			>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002aa2:	4b05      	ldr	r3, [pc, #20]	; (8002ab8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002aa4:	689b      	ldr	r3, [r3, #8]
 8002aa6:	0b5b      	lsrs	r3, r3, #13
 8002aa8:	f003 0307 	and.w	r3, r3, #7
 8002aac:	4903      	ldr	r1, [pc, #12]	; (8002abc <HAL_RCC_GetPCLK2Freq+0x24>)
 8002aae:	5ccb      	ldrb	r3, [r1, r3]
 8002ab0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	bd80      	pop	{r7, pc}
 8002ab8:	40023800 	.word	0x40023800
 8002abc:	08005594 	.word	0x08005594

08002ac0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	b088      	sub	sp, #32
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002ac8:	2300      	movs	r3, #0
 8002aca:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002acc:	2300      	movs	r3, #0
 8002ace:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002ad0:	2300      	movs	r3, #0
 8002ad2:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002ad4:	2300      	movs	r3, #0
 8002ad6:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002ad8:	2300      	movs	r3, #0
 8002ada:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f003 0301 	and.w	r3, r3, #1
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d012      	beq.n	8002b0e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002ae8:	4b69      	ldr	r3, [pc, #420]	; (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002aea:	689b      	ldr	r3, [r3, #8]
 8002aec:	4a68      	ldr	r2, [pc, #416]	; (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002aee:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002af2:	6093      	str	r3, [r2, #8]
 8002af4:	4b66      	ldr	r3, [pc, #408]	; (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002af6:	689a      	ldr	r2, [r3, #8]
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002afc:	4964      	ldr	r1, [pc, #400]	; (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002afe:	4313      	orrs	r3, r2
 8002b00:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d101      	bne.n	8002b0e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8002b0a:	2301      	movs	r3, #1
 8002b0c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d017      	beq.n	8002b4a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002b1a:	4b5d      	ldr	r3, [pc, #372]	; (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b1c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002b20:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b28:	4959      	ldr	r1, [pc, #356]	; (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b2a:	4313      	orrs	r3, r2
 8002b2c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b34:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002b38:	d101      	bne.n	8002b3e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8002b3a:	2301      	movs	r3, #1
 8002b3c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d101      	bne.n	8002b4a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8002b46:	2301      	movs	r3, #1
 8002b48:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d017      	beq.n	8002b86 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002b56:	4b4e      	ldr	r3, [pc, #312]	; (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b58:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002b5c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b64:	494a      	ldr	r1, [pc, #296]	; (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b66:	4313      	orrs	r3, r2
 8002b68:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b70:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002b74:	d101      	bne.n	8002b7a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8002b76:	2301      	movs	r3, #1
 8002b78:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d101      	bne.n	8002b86 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8002b82:	2301      	movs	r3, #1
 8002b84:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d001      	beq.n	8002b96 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8002b92:	2301      	movs	r3, #1
 8002b94:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f003 0320 	and.w	r3, r3, #32
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	f000 808b 	beq.w	8002cba <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002ba4:	4b3a      	ldr	r3, [pc, #232]	; (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ba6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ba8:	4a39      	ldr	r2, [pc, #228]	; (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002baa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002bae:	6413      	str	r3, [r2, #64]	; 0x40
 8002bb0:	4b37      	ldr	r3, [pc, #220]	; (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002bb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bb4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bb8:	60bb      	str	r3, [r7, #8]
 8002bba:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002bbc:	4b35      	ldr	r3, [pc, #212]	; (8002c94 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	4a34      	ldr	r2, [pc, #208]	; (8002c94 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002bc2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002bc6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002bc8:	f7fe fafc 	bl	80011c4 <HAL_GetTick>
 8002bcc:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002bce:	e008      	b.n	8002be2 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002bd0:	f7fe faf8 	bl	80011c4 <HAL_GetTick>
 8002bd4:	4602      	mov	r2, r0
 8002bd6:	697b      	ldr	r3, [r7, #20]
 8002bd8:	1ad3      	subs	r3, r2, r3
 8002bda:	2b64      	cmp	r3, #100	; 0x64
 8002bdc:	d901      	bls.n	8002be2 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8002bde:	2303      	movs	r3, #3
 8002be0:	e38f      	b.n	8003302 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002be2:	4b2c      	ldr	r3, [pc, #176]	; (8002c94 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d0f0      	beq.n	8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002bee:	4b28      	ldr	r3, [pc, #160]	; (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002bf0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bf2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002bf6:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002bf8:	693b      	ldr	r3, [r7, #16]
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d035      	beq.n	8002c6a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c02:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c06:	693a      	ldr	r2, [r7, #16]
 8002c08:	429a      	cmp	r2, r3
 8002c0a:	d02e      	beq.n	8002c6a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002c0c:	4b20      	ldr	r3, [pc, #128]	; (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c10:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c14:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002c16:	4b1e      	ldr	r3, [pc, #120]	; (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c1a:	4a1d      	ldr	r2, [pc, #116]	; (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c20:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002c22:	4b1b      	ldr	r3, [pc, #108]	; (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c26:	4a1a      	ldr	r2, [pc, #104]	; (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c28:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c2c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8002c2e:	4a18      	ldr	r2, [pc, #96]	; (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c30:	693b      	ldr	r3, [r7, #16]
 8002c32:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002c34:	4b16      	ldr	r3, [pc, #88]	; (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c38:	f003 0301 	and.w	r3, r3, #1
 8002c3c:	2b01      	cmp	r3, #1
 8002c3e:	d114      	bne.n	8002c6a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c40:	f7fe fac0 	bl	80011c4 <HAL_GetTick>
 8002c44:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c46:	e00a      	b.n	8002c5e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c48:	f7fe fabc 	bl	80011c4 <HAL_GetTick>
 8002c4c:	4602      	mov	r2, r0
 8002c4e:	697b      	ldr	r3, [r7, #20]
 8002c50:	1ad3      	subs	r3, r2, r3
 8002c52:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c56:	4293      	cmp	r3, r2
 8002c58:	d901      	bls.n	8002c5e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002c5a:	2303      	movs	r3, #3
 8002c5c:	e351      	b.n	8003302 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c5e:	4b0c      	ldr	r3, [pc, #48]	; (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c62:	f003 0302 	and.w	r3, r3, #2
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d0ee      	beq.n	8002c48 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c6e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c72:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002c76:	d111      	bne.n	8002c9c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002c78:	4b05      	ldr	r3, [pc, #20]	; (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c7a:	689b      	ldr	r3, [r3, #8]
 8002c7c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002c84:	4b04      	ldr	r3, [pc, #16]	; (8002c98 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002c86:	400b      	ands	r3, r1
 8002c88:	4901      	ldr	r1, [pc, #4]	; (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c8a:	4313      	orrs	r3, r2
 8002c8c:	608b      	str	r3, [r1, #8]
 8002c8e:	e00b      	b.n	8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002c90:	40023800 	.word	0x40023800
 8002c94:	40007000 	.word	0x40007000
 8002c98:	0ffffcff 	.word	0x0ffffcff
 8002c9c:	4bac      	ldr	r3, [pc, #688]	; (8002f50 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c9e:	689b      	ldr	r3, [r3, #8]
 8002ca0:	4aab      	ldr	r2, [pc, #684]	; (8002f50 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ca2:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002ca6:	6093      	str	r3, [r2, #8]
 8002ca8:	4ba9      	ldr	r3, [pc, #676]	; (8002f50 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002caa:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cb0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002cb4:	49a6      	ldr	r1, [pc, #664]	; (8002f50 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002cb6:	4313      	orrs	r3, r2
 8002cb8:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f003 0310 	and.w	r3, r3, #16
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d010      	beq.n	8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002cc6:	4ba2      	ldr	r3, [pc, #648]	; (8002f50 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002cc8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002ccc:	4aa0      	ldr	r2, [pc, #640]	; (8002f50 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002cce:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002cd2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002cd6:	4b9e      	ldr	r3, [pc, #632]	; (8002f50 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002cd8:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ce0:	499b      	ldr	r1, [pc, #620]	; (8002f50 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ce2:	4313      	orrs	r3, r2
 8002ce4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d00a      	beq.n	8002d0a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002cf4:	4b96      	ldr	r3, [pc, #600]	; (8002f50 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002cf6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cfa:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002d02:	4993      	ldr	r1, [pc, #588]	; (8002f50 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d04:	4313      	orrs	r3, r2
 8002d06:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d00a      	beq.n	8002d2c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002d16:	4b8e      	ldr	r3, [pc, #568]	; (8002f50 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d1c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002d24:	498a      	ldr	r1, [pc, #552]	; (8002f50 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d26:	4313      	orrs	r3, r2
 8002d28:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d00a      	beq.n	8002d4e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002d38:	4b85      	ldr	r3, [pc, #532]	; (8002f50 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d3e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002d46:	4982      	ldr	r1, [pc, #520]	; (8002f50 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d48:	4313      	orrs	r3, r2
 8002d4a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d00a      	beq.n	8002d70 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002d5a:	4b7d      	ldr	r3, [pc, #500]	; (8002f50 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d60:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d68:	4979      	ldr	r1, [pc, #484]	; (8002f50 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d6a:	4313      	orrs	r3, r2
 8002d6c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d00a      	beq.n	8002d92 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002d7c:	4b74      	ldr	r3, [pc, #464]	; (8002f50 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d82:	f023 0203 	bic.w	r2, r3, #3
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d8a:	4971      	ldr	r1, [pc, #452]	; (8002f50 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d8c:	4313      	orrs	r3, r2
 8002d8e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d00a      	beq.n	8002db4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002d9e:	4b6c      	ldr	r3, [pc, #432]	; (8002f50 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002da0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002da4:	f023 020c 	bic.w	r2, r3, #12
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002dac:	4968      	ldr	r1, [pc, #416]	; (8002f50 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002dae:	4313      	orrs	r3, r2
 8002db0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d00a      	beq.n	8002dd6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002dc0:	4b63      	ldr	r3, [pc, #396]	; (8002f50 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002dc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002dc6:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002dce:	4960      	ldr	r1, [pc, #384]	; (8002f50 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002dd0:	4313      	orrs	r3, r2
 8002dd2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d00a      	beq.n	8002df8 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002de2:	4b5b      	ldr	r3, [pc, #364]	; (8002f50 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002de4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002de8:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002df0:	4957      	ldr	r1, [pc, #348]	; (8002f50 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002df2:	4313      	orrs	r3, r2
 8002df4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d00a      	beq.n	8002e1a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002e04:	4b52      	ldr	r3, [pc, #328]	; (8002f50 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e0a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e12:	494f      	ldr	r1, [pc, #316]	; (8002f50 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e14:	4313      	orrs	r3, r2
 8002e16:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d00a      	beq.n	8002e3c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8002e26:	4b4a      	ldr	r3, [pc, #296]	; (8002f50 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e2c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e34:	4946      	ldr	r1, [pc, #280]	; (8002f50 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e36:	4313      	orrs	r3, r2
 8002e38:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d00a      	beq.n	8002e5e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002e48:	4b41      	ldr	r3, [pc, #260]	; (8002f50 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e4e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e56:	493e      	ldr	r1, [pc, #248]	; (8002f50 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e58:	4313      	orrs	r3, r2
 8002e5a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d00a      	beq.n	8002e80 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002e6a:	4b39      	ldr	r3, [pc, #228]	; (8002f50 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e70:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e78:	4935      	ldr	r1, [pc, #212]	; (8002f50 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e7a:	4313      	orrs	r3, r2
 8002e7c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d00a      	beq.n	8002ea2 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002e8c:	4b30      	ldr	r3, [pc, #192]	; (8002f50 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e92:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002e9a:	492d      	ldr	r1, [pc, #180]	; (8002f50 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e9c:	4313      	orrs	r3, r2
 8002e9e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d011      	beq.n	8002ed2 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002eae:	4b28      	ldr	r3, [pc, #160]	; (8002f50 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002eb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002eb4:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002ebc:	4924      	ldr	r1, [pc, #144]	; (8002f50 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ebe:	4313      	orrs	r3, r2
 8002ec0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002ec8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002ecc:	d101      	bne.n	8002ed2 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8002ece:	2301      	movs	r3, #1
 8002ed0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f003 0308 	and.w	r3, r3, #8
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d001      	beq.n	8002ee2 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8002ede:	2301      	movs	r3, #1
 8002ee0:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d00a      	beq.n	8002f04 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002eee:	4b18      	ldr	r3, [pc, #96]	; (8002f50 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ef0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ef4:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002efc:	4914      	ldr	r1, [pc, #80]	; (8002f50 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002efe:	4313      	orrs	r3, r2
 8002f00:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d00b      	beq.n	8002f28 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002f10:	4b0f      	ldr	r3, [pc, #60]	; (8002f50 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f16:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002f20:	490b      	ldr	r1, [pc, #44]	; (8002f50 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f22:	4313      	orrs	r3, r2
 8002f24:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d00f      	beq.n	8002f54 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8002f34:	4b06      	ldr	r3, [pc, #24]	; (8002f50 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f3a:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002f44:	4902      	ldr	r1, [pc, #8]	; (8002f50 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f46:	4313      	orrs	r3, r2
 8002f48:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002f4c:	e002      	b.n	8002f54 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8002f4e:	bf00      	nop
 8002f50:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d00b      	beq.n	8002f78 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002f60:	4b8a      	ldr	r3, [pc, #552]	; (800318c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f62:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002f66:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f70:	4986      	ldr	r1, [pc, #536]	; (800318c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f72:	4313      	orrs	r3, r2
 8002f74:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d00b      	beq.n	8002f9c <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8002f84:	4b81      	ldr	r3, [pc, #516]	; (800318c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f86:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002f8a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002f94:	497d      	ldr	r1, [pc, #500]	; (800318c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f96:	4313      	orrs	r3, r2
 8002f98:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002f9c:	69fb      	ldr	r3, [r7, #28]
 8002f9e:	2b01      	cmp	r3, #1
 8002fa0:	d006      	beq.n	8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	f000 80d6 	beq.w	800315c <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002fb0:	4b76      	ldr	r3, [pc, #472]	; (800318c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	4a75      	ldr	r2, [pc, #468]	; (800318c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002fb6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002fba:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002fbc:	f7fe f902 	bl	80011c4 <HAL_GetTick>
 8002fc0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002fc2:	e008      	b.n	8002fd6 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002fc4:	f7fe f8fe 	bl	80011c4 <HAL_GetTick>
 8002fc8:	4602      	mov	r2, r0
 8002fca:	697b      	ldr	r3, [r7, #20]
 8002fcc:	1ad3      	subs	r3, r2, r3
 8002fce:	2b64      	cmp	r3, #100	; 0x64
 8002fd0:	d901      	bls.n	8002fd6 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002fd2:	2303      	movs	r3, #3
 8002fd4:	e195      	b.n	8003302 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002fd6:	4b6d      	ldr	r3, [pc, #436]	; (800318c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d1f0      	bne.n	8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f003 0301 	and.w	r3, r3, #1
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d021      	beq.n	8003032 <HAL_RCCEx_PeriphCLKConfig+0x572>
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d11d      	bne.n	8003032 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002ff6:	4b65      	ldr	r3, [pc, #404]	; (800318c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002ff8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002ffc:	0c1b      	lsrs	r3, r3, #16
 8002ffe:	f003 0303 	and.w	r3, r3, #3
 8003002:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003004:	4b61      	ldr	r3, [pc, #388]	; (800318c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003006:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800300a:	0e1b      	lsrs	r3, r3, #24
 800300c:	f003 030f 	and.w	r3, r3, #15
 8003010:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	685b      	ldr	r3, [r3, #4]
 8003016:	019a      	lsls	r2, r3, #6
 8003018:	693b      	ldr	r3, [r7, #16]
 800301a:	041b      	lsls	r3, r3, #16
 800301c:	431a      	orrs	r2, r3
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	061b      	lsls	r3, r3, #24
 8003022:	431a      	orrs	r2, r3
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	689b      	ldr	r3, [r3, #8]
 8003028:	071b      	lsls	r3, r3, #28
 800302a:	4958      	ldr	r1, [pc, #352]	; (800318c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800302c:	4313      	orrs	r3, r2
 800302e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800303a:	2b00      	cmp	r3, #0
 800303c:	d004      	beq.n	8003048 <HAL_RCCEx_PeriphCLKConfig+0x588>
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003042:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003046:	d00a      	beq.n	800305e <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003050:	2b00      	cmp	r3, #0
 8003052:	d02e      	beq.n	80030b2 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003058:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800305c:	d129      	bne.n	80030b2 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800305e:	4b4b      	ldr	r3, [pc, #300]	; (800318c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003060:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003064:	0c1b      	lsrs	r3, r3, #16
 8003066:	f003 0303 	and.w	r3, r3, #3
 800306a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800306c:	4b47      	ldr	r3, [pc, #284]	; (800318c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800306e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003072:	0f1b      	lsrs	r3, r3, #28
 8003074:	f003 0307 	and.w	r3, r3, #7
 8003078:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	685b      	ldr	r3, [r3, #4]
 800307e:	019a      	lsls	r2, r3, #6
 8003080:	693b      	ldr	r3, [r7, #16]
 8003082:	041b      	lsls	r3, r3, #16
 8003084:	431a      	orrs	r2, r3
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	68db      	ldr	r3, [r3, #12]
 800308a:	061b      	lsls	r3, r3, #24
 800308c:	431a      	orrs	r2, r3
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	071b      	lsls	r3, r3, #28
 8003092:	493e      	ldr	r1, [pc, #248]	; (800318c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003094:	4313      	orrs	r3, r2
 8003096:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800309a:	4b3c      	ldr	r3, [pc, #240]	; (800318c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800309c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80030a0:	f023 021f 	bic.w	r2, r3, #31
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030a8:	3b01      	subs	r3, #1
 80030aa:	4938      	ldr	r1, [pc, #224]	; (800318c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80030ac:	4313      	orrs	r3, r2
 80030ae:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d01d      	beq.n	80030fa <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80030be:	4b33      	ldr	r3, [pc, #204]	; (800318c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80030c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80030c4:	0e1b      	lsrs	r3, r3, #24
 80030c6:	f003 030f 	and.w	r3, r3, #15
 80030ca:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80030cc:	4b2f      	ldr	r3, [pc, #188]	; (800318c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80030ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80030d2:	0f1b      	lsrs	r3, r3, #28
 80030d4:	f003 0307 	and.w	r3, r3, #7
 80030d8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	685b      	ldr	r3, [r3, #4]
 80030de:	019a      	lsls	r2, r3, #6
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	691b      	ldr	r3, [r3, #16]
 80030e4:	041b      	lsls	r3, r3, #16
 80030e6:	431a      	orrs	r2, r3
 80030e8:	693b      	ldr	r3, [r7, #16]
 80030ea:	061b      	lsls	r3, r3, #24
 80030ec:	431a      	orrs	r2, r3
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	071b      	lsls	r3, r3, #28
 80030f2:	4926      	ldr	r1, [pc, #152]	; (800318c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80030f4:	4313      	orrs	r3, r2
 80030f6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003102:	2b00      	cmp	r3, #0
 8003104:	d011      	beq.n	800312a <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	685b      	ldr	r3, [r3, #4]
 800310a:	019a      	lsls	r2, r3, #6
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	691b      	ldr	r3, [r3, #16]
 8003110:	041b      	lsls	r3, r3, #16
 8003112:	431a      	orrs	r2, r3
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	68db      	ldr	r3, [r3, #12]
 8003118:	061b      	lsls	r3, r3, #24
 800311a:	431a      	orrs	r2, r3
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	689b      	ldr	r3, [r3, #8]
 8003120:	071b      	lsls	r3, r3, #28
 8003122:	491a      	ldr	r1, [pc, #104]	; (800318c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003124:	4313      	orrs	r3, r2
 8003126:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800312a:	4b18      	ldr	r3, [pc, #96]	; (800318c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	4a17      	ldr	r2, [pc, #92]	; (800318c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003130:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003134:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003136:	f7fe f845 	bl	80011c4 <HAL_GetTick>
 800313a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800313c:	e008      	b.n	8003150 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800313e:	f7fe f841 	bl	80011c4 <HAL_GetTick>
 8003142:	4602      	mov	r2, r0
 8003144:	697b      	ldr	r3, [r7, #20]
 8003146:	1ad3      	subs	r3, r2, r3
 8003148:	2b64      	cmp	r3, #100	; 0x64
 800314a:	d901      	bls.n	8003150 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800314c:	2303      	movs	r3, #3
 800314e:	e0d8      	b.n	8003302 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003150:	4b0e      	ldr	r3, [pc, #56]	; (800318c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003158:	2b00      	cmp	r3, #0
 800315a:	d0f0      	beq.n	800313e <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800315c:	69bb      	ldr	r3, [r7, #24]
 800315e:	2b01      	cmp	r3, #1
 8003160:	f040 80ce 	bne.w	8003300 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003164:	4b09      	ldr	r3, [pc, #36]	; (800318c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	4a08      	ldr	r2, [pc, #32]	; (800318c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800316a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800316e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003170:	f7fe f828 	bl	80011c4 <HAL_GetTick>
 8003174:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003176:	e00b      	b.n	8003190 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003178:	f7fe f824 	bl	80011c4 <HAL_GetTick>
 800317c:	4602      	mov	r2, r0
 800317e:	697b      	ldr	r3, [r7, #20]
 8003180:	1ad3      	subs	r3, r2, r3
 8003182:	2b64      	cmp	r3, #100	; 0x64
 8003184:	d904      	bls.n	8003190 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003186:	2303      	movs	r3, #3
 8003188:	e0bb      	b.n	8003302 <HAL_RCCEx_PeriphCLKConfig+0x842>
 800318a:	bf00      	nop
 800318c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003190:	4b5e      	ldr	r3, [pc, #376]	; (800330c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003198:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800319c:	d0ec      	beq.n	8003178 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d003      	beq.n	80031b2 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d009      	beq.n	80031c6 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d02e      	beq.n	800321c <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d12a      	bne.n	800321c <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80031c6:	4b51      	ldr	r3, [pc, #324]	; (800330c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80031c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031cc:	0c1b      	lsrs	r3, r3, #16
 80031ce:	f003 0303 	and.w	r3, r3, #3
 80031d2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80031d4:	4b4d      	ldr	r3, [pc, #308]	; (800330c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80031d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031da:	0f1b      	lsrs	r3, r3, #28
 80031dc:	f003 0307 	and.w	r3, r3, #7
 80031e0:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	695b      	ldr	r3, [r3, #20]
 80031e6:	019a      	lsls	r2, r3, #6
 80031e8:	693b      	ldr	r3, [r7, #16]
 80031ea:	041b      	lsls	r3, r3, #16
 80031ec:	431a      	orrs	r2, r3
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	699b      	ldr	r3, [r3, #24]
 80031f2:	061b      	lsls	r3, r3, #24
 80031f4:	431a      	orrs	r2, r3
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	071b      	lsls	r3, r3, #28
 80031fa:	4944      	ldr	r1, [pc, #272]	; (800330c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80031fc:	4313      	orrs	r3, r2
 80031fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003202:	4b42      	ldr	r3, [pc, #264]	; (800330c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003204:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003208:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003210:	3b01      	subs	r3, #1
 8003212:	021b      	lsls	r3, r3, #8
 8003214:	493d      	ldr	r1, [pc, #244]	; (800330c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003216:	4313      	orrs	r3, r2
 8003218:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003224:	2b00      	cmp	r3, #0
 8003226:	d022      	beq.n	800326e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800322c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003230:	d11d      	bne.n	800326e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003232:	4b36      	ldr	r3, [pc, #216]	; (800330c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003234:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003238:	0e1b      	lsrs	r3, r3, #24
 800323a:	f003 030f 	and.w	r3, r3, #15
 800323e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003240:	4b32      	ldr	r3, [pc, #200]	; (800330c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003242:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003246:	0f1b      	lsrs	r3, r3, #28
 8003248:	f003 0307 	and.w	r3, r3, #7
 800324c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	695b      	ldr	r3, [r3, #20]
 8003252:	019a      	lsls	r2, r3, #6
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	6a1b      	ldr	r3, [r3, #32]
 8003258:	041b      	lsls	r3, r3, #16
 800325a:	431a      	orrs	r2, r3
 800325c:	693b      	ldr	r3, [r7, #16]
 800325e:	061b      	lsls	r3, r3, #24
 8003260:	431a      	orrs	r2, r3
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	071b      	lsls	r3, r3, #28
 8003266:	4929      	ldr	r1, [pc, #164]	; (800330c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003268:	4313      	orrs	r3, r2
 800326a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f003 0308 	and.w	r3, r3, #8
 8003276:	2b00      	cmp	r3, #0
 8003278:	d028      	beq.n	80032cc <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800327a:	4b24      	ldr	r3, [pc, #144]	; (800330c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800327c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003280:	0e1b      	lsrs	r3, r3, #24
 8003282:	f003 030f 	and.w	r3, r3, #15
 8003286:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003288:	4b20      	ldr	r3, [pc, #128]	; (800330c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800328a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800328e:	0c1b      	lsrs	r3, r3, #16
 8003290:	f003 0303 	and.w	r3, r3, #3
 8003294:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	695b      	ldr	r3, [r3, #20]
 800329a:	019a      	lsls	r2, r3, #6
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	041b      	lsls	r3, r3, #16
 80032a0:	431a      	orrs	r2, r3
 80032a2:	693b      	ldr	r3, [r7, #16]
 80032a4:	061b      	lsls	r3, r3, #24
 80032a6:	431a      	orrs	r2, r3
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	69db      	ldr	r3, [r3, #28]
 80032ac:	071b      	lsls	r3, r3, #28
 80032ae:	4917      	ldr	r1, [pc, #92]	; (800330c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80032b0:	4313      	orrs	r3, r2
 80032b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80032b6:	4b15      	ldr	r3, [pc, #84]	; (800330c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80032b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80032bc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032c4:	4911      	ldr	r1, [pc, #68]	; (800330c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80032c6:	4313      	orrs	r3, r2
 80032c8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80032cc:	4b0f      	ldr	r3, [pc, #60]	; (800330c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	4a0e      	ldr	r2, [pc, #56]	; (800330c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80032d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80032d6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80032d8:	f7fd ff74 	bl	80011c4 <HAL_GetTick>
 80032dc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80032de:	e008      	b.n	80032f2 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80032e0:	f7fd ff70 	bl	80011c4 <HAL_GetTick>
 80032e4:	4602      	mov	r2, r0
 80032e6:	697b      	ldr	r3, [r7, #20]
 80032e8:	1ad3      	subs	r3, r2, r3
 80032ea:	2b64      	cmp	r3, #100	; 0x64
 80032ec:	d901      	bls.n	80032f2 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80032ee:	2303      	movs	r3, #3
 80032f0:	e007      	b.n	8003302 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80032f2:	4b06      	ldr	r3, [pc, #24]	; (800330c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80032fa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80032fe:	d1ef      	bne.n	80032e0 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8003300:	2300      	movs	r3, #0
}
 8003302:	4618      	mov	r0, r3
 8003304:	3720      	adds	r7, #32
 8003306:	46bd      	mov	sp, r7
 8003308:	bd80      	pop	{r7, pc}
 800330a:	bf00      	nop
 800330c:	40023800 	.word	0x40023800

08003310 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003310:	b580      	push	{r7, lr}
 8003312:	b082      	sub	sp, #8
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	2b00      	cmp	r3, #0
 800331c:	d101      	bne.n	8003322 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800331e:	2301      	movs	r3, #1
 8003320:	e049      	b.n	80033b6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003328:	b2db      	uxtb	r3, r3
 800332a:	2b00      	cmp	r3, #0
 800332c:	d106      	bne.n	800333c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	2200      	movs	r2, #0
 8003332:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003336:	6878      	ldr	r0, [r7, #4]
 8003338:	f7fd fd20 	bl	8000d7c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2202      	movs	r2, #2
 8003340:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681a      	ldr	r2, [r3, #0]
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	3304      	adds	r3, #4
 800334c:	4619      	mov	r1, r3
 800334e:	4610      	mov	r0, r2
 8003350:	f000 fbee 	bl	8003b30 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	2201      	movs	r2, #1
 8003358:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	2201      	movs	r2, #1
 8003360:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	2201      	movs	r2, #1
 8003368:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	2201      	movs	r2, #1
 8003370:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	2201      	movs	r2, #1
 8003378:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	2201      	movs	r2, #1
 8003380:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	2201      	movs	r2, #1
 8003388:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	2201      	movs	r2, #1
 8003390:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	2201      	movs	r2, #1
 8003398:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	2201      	movs	r2, #1
 80033a0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	2201      	movs	r2, #1
 80033a8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	2201      	movs	r2, #1
 80033b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80033b4:	2300      	movs	r3, #0
}
 80033b6:	4618      	mov	r0, r3
 80033b8:	3708      	adds	r7, #8
 80033ba:	46bd      	mov	sp, r7
 80033bc:	bd80      	pop	{r7, pc}

080033be <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80033be:	b580      	push	{r7, lr}
 80033c0:	b082      	sub	sp, #8
 80033c2:	af00      	add	r7, sp, #0
 80033c4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d101      	bne.n	80033d0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80033cc:	2301      	movs	r3, #1
 80033ce:	e049      	b.n	8003464 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033d6:	b2db      	uxtb	r3, r3
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d106      	bne.n	80033ea <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	2200      	movs	r2, #0
 80033e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80033e4:	6878      	ldr	r0, [r7, #4]
 80033e6:	f000 f841 	bl	800346c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	2202      	movs	r2, #2
 80033ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681a      	ldr	r2, [r3, #0]
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	3304      	adds	r3, #4
 80033fa:	4619      	mov	r1, r3
 80033fc:	4610      	mov	r0, r2
 80033fe:	f000 fb97 	bl	8003b30 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	2201      	movs	r2, #1
 8003406:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	2201      	movs	r2, #1
 800340e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	2201      	movs	r2, #1
 8003416:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	2201      	movs	r2, #1
 800341e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	2201      	movs	r2, #1
 8003426:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	2201      	movs	r2, #1
 800342e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	2201      	movs	r2, #1
 8003436:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	2201      	movs	r2, #1
 800343e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	2201      	movs	r2, #1
 8003446:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	2201      	movs	r2, #1
 800344e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	2201      	movs	r2, #1
 8003456:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	2201      	movs	r2, #1
 800345e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003462:	2300      	movs	r3, #0
}
 8003464:	4618      	mov	r0, r3
 8003466:	3708      	adds	r7, #8
 8003468:	46bd      	mov	sp, r7
 800346a:	bd80      	pop	{r7, pc}

0800346c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800346c:	b480      	push	{r7}
 800346e:	b083      	sub	sp, #12
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003474:	bf00      	nop
 8003476:	370c      	adds	r7, #12
 8003478:	46bd      	mov	sp, r7
 800347a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347e:	4770      	bx	lr

08003480 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003480:	b580      	push	{r7, lr}
 8003482:	b084      	sub	sp, #16
 8003484:	af00      	add	r7, sp, #0
 8003486:	6078      	str	r0, [r7, #4]
 8003488:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800348a:	683b      	ldr	r3, [r7, #0]
 800348c:	2b00      	cmp	r3, #0
 800348e:	d109      	bne.n	80034a4 <HAL_TIM_PWM_Start+0x24>
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003496:	b2db      	uxtb	r3, r3
 8003498:	2b01      	cmp	r3, #1
 800349a:	bf14      	ite	ne
 800349c:	2301      	movne	r3, #1
 800349e:	2300      	moveq	r3, #0
 80034a0:	b2db      	uxtb	r3, r3
 80034a2:	e03c      	b.n	800351e <HAL_TIM_PWM_Start+0x9e>
 80034a4:	683b      	ldr	r3, [r7, #0]
 80034a6:	2b04      	cmp	r3, #4
 80034a8:	d109      	bne.n	80034be <HAL_TIM_PWM_Start+0x3e>
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80034b0:	b2db      	uxtb	r3, r3
 80034b2:	2b01      	cmp	r3, #1
 80034b4:	bf14      	ite	ne
 80034b6:	2301      	movne	r3, #1
 80034b8:	2300      	moveq	r3, #0
 80034ba:	b2db      	uxtb	r3, r3
 80034bc:	e02f      	b.n	800351e <HAL_TIM_PWM_Start+0x9e>
 80034be:	683b      	ldr	r3, [r7, #0]
 80034c0:	2b08      	cmp	r3, #8
 80034c2:	d109      	bne.n	80034d8 <HAL_TIM_PWM_Start+0x58>
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80034ca:	b2db      	uxtb	r3, r3
 80034cc:	2b01      	cmp	r3, #1
 80034ce:	bf14      	ite	ne
 80034d0:	2301      	movne	r3, #1
 80034d2:	2300      	moveq	r3, #0
 80034d4:	b2db      	uxtb	r3, r3
 80034d6:	e022      	b.n	800351e <HAL_TIM_PWM_Start+0x9e>
 80034d8:	683b      	ldr	r3, [r7, #0]
 80034da:	2b0c      	cmp	r3, #12
 80034dc:	d109      	bne.n	80034f2 <HAL_TIM_PWM_Start+0x72>
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80034e4:	b2db      	uxtb	r3, r3
 80034e6:	2b01      	cmp	r3, #1
 80034e8:	bf14      	ite	ne
 80034ea:	2301      	movne	r3, #1
 80034ec:	2300      	moveq	r3, #0
 80034ee:	b2db      	uxtb	r3, r3
 80034f0:	e015      	b.n	800351e <HAL_TIM_PWM_Start+0x9e>
 80034f2:	683b      	ldr	r3, [r7, #0]
 80034f4:	2b10      	cmp	r3, #16
 80034f6:	d109      	bne.n	800350c <HAL_TIM_PWM_Start+0x8c>
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80034fe:	b2db      	uxtb	r3, r3
 8003500:	2b01      	cmp	r3, #1
 8003502:	bf14      	ite	ne
 8003504:	2301      	movne	r3, #1
 8003506:	2300      	moveq	r3, #0
 8003508:	b2db      	uxtb	r3, r3
 800350a:	e008      	b.n	800351e <HAL_TIM_PWM_Start+0x9e>
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003512:	b2db      	uxtb	r3, r3
 8003514:	2b01      	cmp	r3, #1
 8003516:	bf14      	ite	ne
 8003518:	2301      	movne	r3, #1
 800351a:	2300      	moveq	r3, #0
 800351c:	b2db      	uxtb	r3, r3
 800351e:	2b00      	cmp	r3, #0
 8003520:	d001      	beq.n	8003526 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8003522:	2301      	movs	r3, #1
 8003524:	e092      	b.n	800364c <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003526:	683b      	ldr	r3, [r7, #0]
 8003528:	2b00      	cmp	r3, #0
 800352a:	d104      	bne.n	8003536 <HAL_TIM_PWM_Start+0xb6>
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2202      	movs	r2, #2
 8003530:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003534:	e023      	b.n	800357e <HAL_TIM_PWM_Start+0xfe>
 8003536:	683b      	ldr	r3, [r7, #0]
 8003538:	2b04      	cmp	r3, #4
 800353a:	d104      	bne.n	8003546 <HAL_TIM_PWM_Start+0xc6>
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	2202      	movs	r2, #2
 8003540:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003544:	e01b      	b.n	800357e <HAL_TIM_PWM_Start+0xfe>
 8003546:	683b      	ldr	r3, [r7, #0]
 8003548:	2b08      	cmp	r3, #8
 800354a:	d104      	bne.n	8003556 <HAL_TIM_PWM_Start+0xd6>
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	2202      	movs	r2, #2
 8003550:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003554:	e013      	b.n	800357e <HAL_TIM_PWM_Start+0xfe>
 8003556:	683b      	ldr	r3, [r7, #0]
 8003558:	2b0c      	cmp	r3, #12
 800355a:	d104      	bne.n	8003566 <HAL_TIM_PWM_Start+0xe6>
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	2202      	movs	r2, #2
 8003560:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003564:	e00b      	b.n	800357e <HAL_TIM_PWM_Start+0xfe>
 8003566:	683b      	ldr	r3, [r7, #0]
 8003568:	2b10      	cmp	r3, #16
 800356a:	d104      	bne.n	8003576 <HAL_TIM_PWM_Start+0xf6>
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	2202      	movs	r2, #2
 8003570:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003574:	e003      	b.n	800357e <HAL_TIM_PWM_Start+0xfe>
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	2202      	movs	r2, #2
 800357a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	2201      	movs	r2, #1
 8003584:	6839      	ldr	r1, [r7, #0]
 8003586:	4618      	mov	r0, r3
 8003588:	f000 fe6a 	bl	8004260 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	4a30      	ldr	r2, [pc, #192]	; (8003654 <HAL_TIM_PWM_Start+0x1d4>)
 8003592:	4293      	cmp	r3, r2
 8003594:	d004      	beq.n	80035a0 <HAL_TIM_PWM_Start+0x120>
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	4a2f      	ldr	r2, [pc, #188]	; (8003658 <HAL_TIM_PWM_Start+0x1d8>)
 800359c:	4293      	cmp	r3, r2
 800359e:	d101      	bne.n	80035a4 <HAL_TIM_PWM_Start+0x124>
 80035a0:	2301      	movs	r3, #1
 80035a2:	e000      	b.n	80035a6 <HAL_TIM_PWM_Start+0x126>
 80035a4:	2300      	movs	r3, #0
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d007      	beq.n	80035ba <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80035b8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	4a25      	ldr	r2, [pc, #148]	; (8003654 <HAL_TIM_PWM_Start+0x1d4>)
 80035c0:	4293      	cmp	r3, r2
 80035c2:	d022      	beq.n	800360a <HAL_TIM_PWM_Start+0x18a>
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035cc:	d01d      	beq.n	800360a <HAL_TIM_PWM_Start+0x18a>
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	4a22      	ldr	r2, [pc, #136]	; (800365c <HAL_TIM_PWM_Start+0x1dc>)
 80035d4:	4293      	cmp	r3, r2
 80035d6:	d018      	beq.n	800360a <HAL_TIM_PWM_Start+0x18a>
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	4a20      	ldr	r2, [pc, #128]	; (8003660 <HAL_TIM_PWM_Start+0x1e0>)
 80035de:	4293      	cmp	r3, r2
 80035e0:	d013      	beq.n	800360a <HAL_TIM_PWM_Start+0x18a>
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	4a1f      	ldr	r2, [pc, #124]	; (8003664 <HAL_TIM_PWM_Start+0x1e4>)
 80035e8:	4293      	cmp	r3, r2
 80035ea:	d00e      	beq.n	800360a <HAL_TIM_PWM_Start+0x18a>
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	4a19      	ldr	r2, [pc, #100]	; (8003658 <HAL_TIM_PWM_Start+0x1d8>)
 80035f2:	4293      	cmp	r3, r2
 80035f4:	d009      	beq.n	800360a <HAL_TIM_PWM_Start+0x18a>
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	4a1b      	ldr	r2, [pc, #108]	; (8003668 <HAL_TIM_PWM_Start+0x1e8>)
 80035fc:	4293      	cmp	r3, r2
 80035fe:	d004      	beq.n	800360a <HAL_TIM_PWM_Start+0x18a>
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	4a19      	ldr	r2, [pc, #100]	; (800366c <HAL_TIM_PWM_Start+0x1ec>)
 8003606:	4293      	cmp	r3, r2
 8003608:	d115      	bne.n	8003636 <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	689a      	ldr	r2, [r3, #8]
 8003610:	4b17      	ldr	r3, [pc, #92]	; (8003670 <HAL_TIM_PWM_Start+0x1f0>)
 8003612:	4013      	ands	r3, r2
 8003614:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	2b06      	cmp	r3, #6
 800361a:	d015      	beq.n	8003648 <HAL_TIM_PWM_Start+0x1c8>
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003622:	d011      	beq.n	8003648 <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	681a      	ldr	r2, [r3, #0]
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f042 0201 	orr.w	r2, r2, #1
 8003632:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003634:	e008      	b.n	8003648 <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	681a      	ldr	r2, [r3, #0]
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f042 0201 	orr.w	r2, r2, #1
 8003644:	601a      	str	r2, [r3, #0]
 8003646:	e000      	b.n	800364a <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003648:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800364a:	2300      	movs	r3, #0
}
 800364c:	4618      	mov	r0, r3
 800364e:	3710      	adds	r7, #16
 8003650:	46bd      	mov	sp, r7
 8003652:	bd80      	pop	{r7, pc}
 8003654:	40010000 	.word	0x40010000
 8003658:	40010400 	.word	0x40010400
 800365c:	40000400 	.word	0x40000400
 8003660:	40000800 	.word	0x40000800
 8003664:	40000c00 	.word	0x40000c00
 8003668:	40014000 	.word	0x40014000
 800366c:	40001800 	.word	0x40001800
 8003670:	00010007 	.word	0x00010007

08003674 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003674:	b580      	push	{r7, lr}
 8003676:	b082      	sub	sp, #8
 8003678:	af00      	add	r7, sp, #0
 800367a:	6078      	str	r0, [r7, #4]
 800367c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	2200      	movs	r2, #0
 8003684:	6839      	ldr	r1, [r7, #0]
 8003686:	4618      	mov	r0, r3
 8003688:	f000 fdea 	bl	8004260 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	4a36      	ldr	r2, [pc, #216]	; (800376c <HAL_TIM_PWM_Stop+0xf8>)
 8003692:	4293      	cmp	r3, r2
 8003694:	d004      	beq.n	80036a0 <HAL_TIM_PWM_Stop+0x2c>
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	4a35      	ldr	r2, [pc, #212]	; (8003770 <HAL_TIM_PWM_Stop+0xfc>)
 800369c:	4293      	cmp	r3, r2
 800369e:	d101      	bne.n	80036a4 <HAL_TIM_PWM_Stop+0x30>
 80036a0:	2301      	movs	r3, #1
 80036a2:	e000      	b.n	80036a6 <HAL_TIM_PWM_Stop+0x32>
 80036a4:	2300      	movs	r3, #0
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d017      	beq.n	80036da <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	6a1a      	ldr	r2, [r3, #32]
 80036b0:	f241 1311 	movw	r3, #4369	; 0x1111
 80036b4:	4013      	ands	r3, r2
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d10f      	bne.n	80036da <HAL_TIM_PWM_Stop+0x66>
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	6a1a      	ldr	r2, [r3, #32]
 80036c0:	f240 4344 	movw	r3, #1092	; 0x444
 80036c4:	4013      	ands	r3, r2
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d107      	bne.n	80036da <HAL_TIM_PWM_Stop+0x66>
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80036d8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	6a1a      	ldr	r2, [r3, #32]
 80036e0:	f241 1311 	movw	r3, #4369	; 0x1111
 80036e4:	4013      	ands	r3, r2
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d10f      	bne.n	800370a <HAL_TIM_PWM_Stop+0x96>
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	6a1a      	ldr	r2, [r3, #32]
 80036f0:	f240 4344 	movw	r3, #1092	; 0x444
 80036f4:	4013      	ands	r3, r2
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d107      	bne.n	800370a <HAL_TIM_PWM_Stop+0x96>
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	681a      	ldr	r2, [r3, #0]
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f022 0201 	bic.w	r2, r2, #1
 8003708:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800370a:	683b      	ldr	r3, [r7, #0]
 800370c:	2b00      	cmp	r3, #0
 800370e:	d104      	bne.n	800371a <HAL_TIM_PWM_Stop+0xa6>
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	2201      	movs	r2, #1
 8003714:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003718:	e023      	b.n	8003762 <HAL_TIM_PWM_Stop+0xee>
 800371a:	683b      	ldr	r3, [r7, #0]
 800371c:	2b04      	cmp	r3, #4
 800371e:	d104      	bne.n	800372a <HAL_TIM_PWM_Stop+0xb6>
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	2201      	movs	r2, #1
 8003724:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003728:	e01b      	b.n	8003762 <HAL_TIM_PWM_Stop+0xee>
 800372a:	683b      	ldr	r3, [r7, #0]
 800372c:	2b08      	cmp	r3, #8
 800372e:	d104      	bne.n	800373a <HAL_TIM_PWM_Stop+0xc6>
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	2201      	movs	r2, #1
 8003734:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003738:	e013      	b.n	8003762 <HAL_TIM_PWM_Stop+0xee>
 800373a:	683b      	ldr	r3, [r7, #0]
 800373c:	2b0c      	cmp	r3, #12
 800373e:	d104      	bne.n	800374a <HAL_TIM_PWM_Stop+0xd6>
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	2201      	movs	r2, #1
 8003744:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003748:	e00b      	b.n	8003762 <HAL_TIM_PWM_Stop+0xee>
 800374a:	683b      	ldr	r3, [r7, #0]
 800374c:	2b10      	cmp	r3, #16
 800374e:	d104      	bne.n	800375a <HAL_TIM_PWM_Stop+0xe6>
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	2201      	movs	r2, #1
 8003754:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003758:	e003      	b.n	8003762 <HAL_TIM_PWM_Stop+0xee>
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	2201      	movs	r2, #1
 800375e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 8003762:	2300      	movs	r3, #0
}
 8003764:	4618      	mov	r0, r3
 8003766:	3708      	adds	r7, #8
 8003768:	46bd      	mov	sp, r7
 800376a:	bd80      	pop	{r7, pc}
 800376c:	40010000 	.word	0x40010000
 8003770:	40010400 	.word	0x40010400

08003774 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003774:	b580      	push	{r7, lr}
 8003776:	b086      	sub	sp, #24
 8003778:	af00      	add	r7, sp, #0
 800377a:	60f8      	str	r0, [r7, #12]
 800377c:	60b9      	str	r1, [r7, #8]
 800377e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003780:	2300      	movs	r3, #0
 8003782:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800378a:	2b01      	cmp	r3, #1
 800378c:	d101      	bne.n	8003792 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800378e:	2302      	movs	r3, #2
 8003790:	e0ff      	b.n	8003992 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	2201      	movs	r2, #1
 8003796:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	2b14      	cmp	r3, #20
 800379e:	f200 80f0 	bhi.w	8003982 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80037a2:	a201      	add	r2, pc, #4	; (adr r2, 80037a8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80037a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037a8:	080037fd 	.word	0x080037fd
 80037ac:	08003983 	.word	0x08003983
 80037b0:	08003983 	.word	0x08003983
 80037b4:	08003983 	.word	0x08003983
 80037b8:	0800383d 	.word	0x0800383d
 80037bc:	08003983 	.word	0x08003983
 80037c0:	08003983 	.word	0x08003983
 80037c4:	08003983 	.word	0x08003983
 80037c8:	0800387f 	.word	0x0800387f
 80037cc:	08003983 	.word	0x08003983
 80037d0:	08003983 	.word	0x08003983
 80037d4:	08003983 	.word	0x08003983
 80037d8:	080038bf 	.word	0x080038bf
 80037dc:	08003983 	.word	0x08003983
 80037e0:	08003983 	.word	0x08003983
 80037e4:	08003983 	.word	0x08003983
 80037e8:	08003901 	.word	0x08003901
 80037ec:	08003983 	.word	0x08003983
 80037f0:	08003983 	.word	0x08003983
 80037f4:	08003983 	.word	0x08003983
 80037f8:	08003941 	.word	0x08003941
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	68b9      	ldr	r1, [r7, #8]
 8003802:	4618      	mov	r0, r3
 8003804:	f000 fa34 	bl	8003c70 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	699a      	ldr	r2, [r3, #24]
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f042 0208 	orr.w	r2, r2, #8
 8003816:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	699a      	ldr	r2, [r3, #24]
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f022 0204 	bic.w	r2, r2, #4
 8003826:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	6999      	ldr	r1, [r3, #24]
 800382e:	68bb      	ldr	r3, [r7, #8]
 8003830:	691a      	ldr	r2, [r3, #16]
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	430a      	orrs	r2, r1
 8003838:	619a      	str	r2, [r3, #24]
      break;
 800383a:	e0a5      	b.n	8003988 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	68b9      	ldr	r1, [r7, #8]
 8003842:	4618      	mov	r0, r3
 8003844:	f000 fa86 	bl	8003d54 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	699a      	ldr	r2, [r3, #24]
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003856:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	699a      	ldr	r2, [r3, #24]
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003866:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	6999      	ldr	r1, [r3, #24]
 800386e:	68bb      	ldr	r3, [r7, #8]
 8003870:	691b      	ldr	r3, [r3, #16]
 8003872:	021a      	lsls	r2, r3, #8
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	430a      	orrs	r2, r1
 800387a:	619a      	str	r2, [r3, #24]
      break;
 800387c:	e084      	b.n	8003988 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	68b9      	ldr	r1, [r7, #8]
 8003884:	4618      	mov	r0, r3
 8003886:	f000 fadd 	bl	8003e44 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	69da      	ldr	r2, [r3, #28]
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f042 0208 	orr.w	r2, r2, #8
 8003898:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	69da      	ldr	r2, [r3, #28]
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f022 0204 	bic.w	r2, r2, #4
 80038a8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	69d9      	ldr	r1, [r3, #28]
 80038b0:	68bb      	ldr	r3, [r7, #8]
 80038b2:	691a      	ldr	r2, [r3, #16]
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	430a      	orrs	r2, r1
 80038ba:	61da      	str	r2, [r3, #28]
      break;
 80038bc:	e064      	b.n	8003988 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	68b9      	ldr	r1, [r7, #8]
 80038c4:	4618      	mov	r0, r3
 80038c6:	f000 fb33 	bl	8003f30 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	69da      	ldr	r2, [r3, #28]
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80038d8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	69da      	ldr	r2, [r3, #28]
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80038e8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	69d9      	ldr	r1, [r3, #28]
 80038f0:	68bb      	ldr	r3, [r7, #8]
 80038f2:	691b      	ldr	r3, [r3, #16]
 80038f4:	021a      	lsls	r2, r3, #8
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	430a      	orrs	r2, r1
 80038fc:	61da      	str	r2, [r3, #28]
      break;
 80038fe:	e043      	b.n	8003988 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	68b9      	ldr	r1, [r7, #8]
 8003906:	4618      	mov	r0, r3
 8003908:	f000 fb6a 	bl	8003fe0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f042 0208 	orr.w	r2, r2, #8
 800391a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f022 0204 	bic.w	r2, r2, #4
 800392a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003932:	68bb      	ldr	r3, [r7, #8]
 8003934:	691a      	ldr	r2, [r3, #16]
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	430a      	orrs	r2, r1
 800393c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800393e:	e023      	b.n	8003988 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	68b9      	ldr	r1, [r7, #8]
 8003946:	4618      	mov	r0, r3
 8003948:	f000 fb9c 	bl	8004084 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800395a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800396a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003972:	68bb      	ldr	r3, [r7, #8]
 8003974:	691b      	ldr	r3, [r3, #16]
 8003976:	021a      	lsls	r2, r3, #8
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	430a      	orrs	r2, r1
 800397e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003980:	e002      	b.n	8003988 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8003982:	2301      	movs	r3, #1
 8003984:	75fb      	strb	r3, [r7, #23]
      break;
 8003986:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	2200      	movs	r2, #0
 800398c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003990:	7dfb      	ldrb	r3, [r7, #23]
}
 8003992:	4618      	mov	r0, r3
 8003994:	3718      	adds	r7, #24
 8003996:	46bd      	mov	sp, r7
 8003998:	bd80      	pop	{r7, pc}
 800399a:	bf00      	nop

0800399c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800399c:	b580      	push	{r7, lr}
 800399e:	b084      	sub	sp, #16
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	6078      	str	r0, [r7, #4]
 80039a4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80039a6:	2300      	movs	r3, #0
 80039a8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80039b0:	2b01      	cmp	r3, #1
 80039b2:	d101      	bne.n	80039b8 <HAL_TIM_ConfigClockSource+0x1c>
 80039b4:	2302      	movs	r3, #2
 80039b6:	e0b4      	b.n	8003b22 <HAL_TIM_ConfigClockSource+0x186>
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2201      	movs	r2, #1
 80039bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2202      	movs	r2, #2
 80039c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	689b      	ldr	r3, [r3, #8]
 80039ce:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80039d0:	68ba      	ldr	r2, [r7, #8]
 80039d2:	4b56      	ldr	r3, [pc, #344]	; (8003b2c <HAL_TIM_ConfigClockSource+0x190>)
 80039d4:	4013      	ands	r3, r2
 80039d6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80039d8:	68bb      	ldr	r3, [r7, #8]
 80039da:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80039de:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	68ba      	ldr	r2, [r7, #8]
 80039e6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80039e8:	683b      	ldr	r3, [r7, #0]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80039f0:	d03e      	beq.n	8003a70 <HAL_TIM_ConfigClockSource+0xd4>
 80039f2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80039f6:	f200 8087 	bhi.w	8003b08 <HAL_TIM_ConfigClockSource+0x16c>
 80039fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80039fe:	f000 8086 	beq.w	8003b0e <HAL_TIM_ConfigClockSource+0x172>
 8003a02:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a06:	d87f      	bhi.n	8003b08 <HAL_TIM_ConfigClockSource+0x16c>
 8003a08:	2b70      	cmp	r3, #112	; 0x70
 8003a0a:	d01a      	beq.n	8003a42 <HAL_TIM_ConfigClockSource+0xa6>
 8003a0c:	2b70      	cmp	r3, #112	; 0x70
 8003a0e:	d87b      	bhi.n	8003b08 <HAL_TIM_ConfigClockSource+0x16c>
 8003a10:	2b60      	cmp	r3, #96	; 0x60
 8003a12:	d050      	beq.n	8003ab6 <HAL_TIM_ConfigClockSource+0x11a>
 8003a14:	2b60      	cmp	r3, #96	; 0x60
 8003a16:	d877      	bhi.n	8003b08 <HAL_TIM_ConfigClockSource+0x16c>
 8003a18:	2b50      	cmp	r3, #80	; 0x50
 8003a1a:	d03c      	beq.n	8003a96 <HAL_TIM_ConfigClockSource+0xfa>
 8003a1c:	2b50      	cmp	r3, #80	; 0x50
 8003a1e:	d873      	bhi.n	8003b08 <HAL_TIM_ConfigClockSource+0x16c>
 8003a20:	2b40      	cmp	r3, #64	; 0x40
 8003a22:	d058      	beq.n	8003ad6 <HAL_TIM_ConfigClockSource+0x13a>
 8003a24:	2b40      	cmp	r3, #64	; 0x40
 8003a26:	d86f      	bhi.n	8003b08 <HAL_TIM_ConfigClockSource+0x16c>
 8003a28:	2b30      	cmp	r3, #48	; 0x30
 8003a2a:	d064      	beq.n	8003af6 <HAL_TIM_ConfigClockSource+0x15a>
 8003a2c:	2b30      	cmp	r3, #48	; 0x30
 8003a2e:	d86b      	bhi.n	8003b08 <HAL_TIM_ConfigClockSource+0x16c>
 8003a30:	2b20      	cmp	r3, #32
 8003a32:	d060      	beq.n	8003af6 <HAL_TIM_ConfigClockSource+0x15a>
 8003a34:	2b20      	cmp	r3, #32
 8003a36:	d867      	bhi.n	8003b08 <HAL_TIM_ConfigClockSource+0x16c>
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d05c      	beq.n	8003af6 <HAL_TIM_ConfigClockSource+0x15a>
 8003a3c:	2b10      	cmp	r3, #16
 8003a3e:	d05a      	beq.n	8003af6 <HAL_TIM_ConfigClockSource+0x15a>
 8003a40:	e062      	b.n	8003b08 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	6818      	ldr	r0, [r3, #0]
 8003a46:	683b      	ldr	r3, [r7, #0]
 8003a48:	6899      	ldr	r1, [r3, #8]
 8003a4a:	683b      	ldr	r3, [r7, #0]
 8003a4c:	685a      	ldr	r2, [r3, #4]
 8003a4e:	683b      	ldr	r3, [r7, #0]
 8003a50:	68db      	ldr	r3, [r3, #12]
 8003a52:	f000 fbe5 	bl	8004220 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	689b      	ldr	r3, [r3, #8]
 8003a5c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003a5e:	68bb      	ldr	r3, [r7, #8]
 8003a60:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003a64:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	68ba      	ldr	r2, [r7, #8]
 8003a6c:	609a      	str	r2, [r3, #8]
      break;
 8003a6e:	e04f      	b.n	8003b10 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	6818      	ldr	r0, [r3, #0]
 8003a74:	683b      	ldr	r3, [r7, #0]
 8003a76:	6899      	ldr	r1, [r3, #8]
 8003a78:	683b      	ldr	r3, [r7, #0]
 8003a7a:	685a      	ldr	r2, [r3, #4]
 8003a7c:	683b      	ldr	r3, [r7, #0]
 8003a7e:	68db      	ldr	r3, [r3, #12]
 8003a80:	f000 fbce 	bl	8004220 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	689a      	ldr	r2, [r3, #8]
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003a92:	609a      	str	r2, [r3, #8]
      break;
 8003a94:	e03c      	b.n	8003b10 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	6818      	ldr	r0, [r3, #0]
 8003a9a:	683b      	ldr	r3, [r7, #0]
 8003a9c:	6859      	ldr	r1, [r3, #4]
 8003a9e:	683b      	ldr	r3, [r7, #0]
 8003aa0:	68db      	ldr	r3, [r3, #12]
 8003aa2:	461a      	mov	r2, r3
 8003aa4:	f000 fb42 	bl	800412c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	2150      	movs	r1, #80	; 0x50
 8003aae:	4618      	mov	r0, r3
 8003ab0:	f000 fb9b 	bl	80041ea <TIM_ITRx_SetConfig>
      break;
 8003ab4:	e02c      	b.n	8003b10 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	6818      	ldr	r0, [r3, #0]
 8003aba:	683b      	ldr	r3, [r7, #0]
 8003abc:	6859      	ldr	r1, [r3, #4]
 8003abe:	683b      	ldr	r3, [r7, #0]
 8003ac0:	68db      	ldr	r3, [r3, #12]
 8003ac2:	461a      	mov	r2, r3
 8003ac4:	f000 fb61 	bl	800418a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	2160      	movs	r1, #96	; 0x60
 8003ace:	4618      	mov	r0, r3
 8003ad0:	f000 fb8b 	bl	80041ea <TIM_ITRx_SetConfig>
      break;
 8003ad4:	e01c      	b.n	8003b10 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	6818      	ldr	r0, [r3, #0]
 8003ada:	683b      	ldr	r3, [r7, #0]
 8003adc:	6859      	ldr	r1, [r3, #4]
 8003ade:	683b      	ldr	r3, [r7, #0]
 8003ae0:	68db      	ldr	r3, [r3, #12]
 8003ae2:	461a      	mov	r2, r3
 8003ae4:	f000 fb22 	bl	800412c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	2140      	movs	r1, #64	; 0x40
 8003aee:	4618      	mov	r0, r3
 8003af0:	f000 fb7b 	bl	80041ea <TIM_ITRx_SetConfig>
      break;
 8003af4:	e00c      	b.n	8003b10 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681a      	ldr	r2, [r3, #0]
 8003afa:	683b      	ldr	r3, [r7, #0]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	4619      	mov	r1, r3
 8003b00:	4610      	mov	r0, r2
 8003b02:	f000 fb72 	bl	80041ea <TIM_ITRx_SetConfig>
      break;
 8003b06:	e003      	b.n	8003b10 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003b08:	2301      	movs	r3, #1
 8003b0a:	73fb      	strb	r3, [r7, #15]
      break;
 8003b0c:	e000      	b.n	8003b10 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003b0e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	2201      	movs	r2, #1
 8003b14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	2200      	movs	r2, #0
 8003b1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003b20:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b22:	4618      	mov	r0, r3
 8003b24:	3710      	adds	r7, #16
 8003b26:	46bd      	mov	sp, r7
 8003b28:	bd80      	pop	{r7, pc}
 8003b2a:	bf00      	nop
 8003b2c:	fffeff88 	.word	0xfffeff88

08003b30 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003b30:	b480      	push	{r7}
 8003b32:	b085      	sub	sp, #20
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	6078      	str	r0, [r7, #4]
 8003b38:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	4a40      	ldr	r2, [pc, #256]	; (8003c44 <TIM_Base_SetConfig+0x114>)
 8003b44:	4293      	cmp	r3, r2
 8003b46:	d013      	beq.n	8003b70 <TIM_Base_SetConfig+0x40>
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b4e:	d00f      	beq.n	8003b70 <TIM_Base_SetConfig+0x40>
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	4a3d      	ldr	r2, [pc, #244]	; (8003c48 <TIM_Base_SetConfig+0x118>)
 8003b54:	4293      	cmp	r3, r2
 8003b56:	d00b      	beq.n	8003b70 <TIM_Base_SetConfig+0x40>
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	4a3c      	ldr	r2, [pc, #240]	; (8003c4c <TIM_Base_SetConfig+0x11c>)
 8003b5c:	4293      	cmp	r3, r2
 8003b5e:	d007      	beq.n	8003b70 <TIM_Base_SetConfig+0x40>
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	4a3b      	ldr	r2, [pc, #236]	; (8003c50 <TIM_Base_SetConfig+0x120>)
 8003b64:	4293      	cmp	r3, r2
 8003b66:	d003      	beq.n	8003b70 <TIM_Base_SetConfig+0x40>
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	4a3a      	ldr	r2, [pc, #232]	; (8003c54 <TIM_Base_SetConfig+0x124>)
 8003b6c:	4293      	cmp	r3, r2
 8003b6e:	d108      	bne.n	8003b82 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b76:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003b78:	683b      	ldr	r3, [r7, #0]
 8003b7a:	685b      	ldr	r3, [r3, #4]
 8003b7c:	68fa      	ldr	r2, [r7, #12]
 8003b7e:	4313      	orrs	r3, r2
 8003b80:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	4a2f      	ldr	r2, [pc, #188]	; (8003c44 <TIM_Base_SetConfig+0x114>)
 8003b86:	4293      	cmp	r3, r2
 8003b88:	d02b      	beq.n	8003be2 <TIM_Base_SetConfig+0xb2>
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b90:	d027      	beq.n	8003be2 <TIM_Base_SetConfig+0xb2>
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	4a2c      	ldr	r2, [pc, #176]	; (8003c48 <TIM_Base_SetConfig+0x118>)
 8003b96:	4293      	cmp	r3, r2
 8003b98:	d023      	beq.n	8003be2 <TIM_Base_SetConfig+0xb2>
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	4a2b      	ldr	r2, [pc, #172]	; (8003c4c <TIM_Base_SetConfig+0x11c>)
 8003b9e:	4293      	cmp	r3, r2
 8003ba0:	d01f      	beq.n	8003be2 <TIM_Base_SetConfig+0xb2>
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	4a2a      	ldr	r2, [pc, #168]	; (8003c50 <TIM_Base_SetConfig+0x120>)
 8003ba6:	4293      	cmp	r3, r2
 8003ba8:	d01b      	beq.n	8003be2 <TIM_Base_SetConfig+0xb2>
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	4a29      	ldr	r2, [pc, #164]	; (8003c54 <TIM_Base_SetConfig+0x124>)
 8003bae:	4293      	cmp	r3, r2
 8003bb0:	d017      	beq.n	8003be2 <TIM_Base_SetConfig+0xb2>
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	4a28      	ldr	r2, [pc, #160]	; (8003c58 <TIM_Base_SetConfig+0x128>)
 8003bb6:	4293      	cmp	r3, r2
 8003bb8:	d013      	beq.n	8003be2 <TIM_Base_SetConfig+0xb2>
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	4a27      	ldr	r2, [pc, #156]	; (8003c5c <TIM_Base_SetConfig+0x12c>)
 8003bbe:	4293      	cmp	r3, r2
 8003bc0:	d00f      	beq.n	8003be2 <TIM_Base_SetConfig+0xb2>
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	4a26      	ldr	r2, [pc, #152]	; (8003c60 <TIM_Base_SetConfig+0x130>)
 8003bc6:	4293      	cmp	r3, r2
 8003bc8:	d00b      	beq.n	8003be2 <TIM_Base_SetConfig+0xb2>
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	4a25      	ldr	r2, [pc, #148]	; (8003c64 <TIM_Base_SetConfig+0x134>)
 8003bce:	4293      	cmp	r3, r2
 8003bd0:	d007      	beq.n	8003be2 <TIM_Base_SetConfig+0xb2>
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	4a24      	ldr	r2, [pc, #144]	; (8003c68 <TIM_Base_SetConfig+0x138>)
 8003bd6:	4293      	cmp	r3, r2
 8003bd8:	d003      	beq.n	8003be2 <TIM_Base_SetConfig+0xb2>
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	4a23      	ldr	r2, [pc, #140]	; (8003c6c <TIM_Base_SetConfig+0x13c>)
 8003bde:	4293      	cmp	r3, r2
 8003be0:	d108      	bne.n	8003bf4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003be8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003bea:	683b      	ldr	r3, [r7, #0]
 8003bec:	68db      	ldr	r3, [r3, #12]
 8003bee:	68fa      	ldr	r2, [r7, #12]
 8003bf0:	4313      	orrs	r3, r2
 8003bf2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003bfa:	683b      	ldr	r3, [r7, #0]
 8003bfc:	695b      	ldr	r3, [r3, #20]
 8003bfe:	4313      	orrs	r3, r2
 8003c00:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	68fa      	ldr	r2, [r7, #12]
 8003c06:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003c08:	683b      	ldr	r3, [r7, #0]
 8003c0a:	689a      	ldr	r2, [r3, #8]
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003c10:	683b      	ldr	r3, [r7, #0]
 8003c12:	681a      	ldr	r2, [r3, #0]
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	4a0a      	ldr	r2, [pc, #40]	; (8003c44 <TIM_Base_SetConfig+0x114>)
 8003c1c:	4293      	cmp	r3, r2
 8003c1e:	d003      	beq.n	8003c28 <TIM_Base_SetConfig+0xf8>
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	4a0c      	ldr	r2, [pc, #48]	; (8003c54 <TIM_Base_SetConfig+0x124>)
 8003c24:	4293      	cmp	r3, r2
 8003c26:	d103      	bne.n	8003c30 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003c28:	683b      	ldr	r3, [r7, #0]
 8003c2a:	691a      	ldr	r2, [r3, #16]
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	2201      	movs	r2, #1
 8003c34:	615a      	str	r2, [r3, #20]
}
 8003c36:	bf00      	nop
 8003c38:	3714      	adds	r7, #20
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c40:	4770      	bx	lr
 8003c42:	bf00      	nop
 8003c44:	40010000 	.word	0x40010000
 8003c48:	40000400 	.word	0x40000400
 8003c4c:	40000800 	.word	0x40000800
 8003c50:	40000c00 	.word	0x40000c00
 8003c54:	40010400 	.word	0x40010400
 8003c58:	40014000 	.word	0x40014000
 8003c5c:	40014400 	.word	0x40014400
 8003c60:	40014800 	.word	0x40014800
 8003c64:	40001800 	.word	0x40001800
 8003c68:	40001c00 	.word	0x40001c00
 8003c6c:	40002000 	.word	0x40002000

08003c70 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003c70:	b480      	push	{r7}
 8003c72:	b087      	sub	sp, #28
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	6078      	str	r0, [r7, #4]
 8003c78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	6a1b      	ldr	r3, [r3, #32]
 8003c7e:	f023 0201 	bic.w	r2, r3, #1
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	6a1b      	ldr	r3, [r3, #32]
 8003c8a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	685b      	ldr	r3, [r3, #4]
 8003c90:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	699b      	ldr	r3, [r3, #24]
 8003c96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003c98:	68fa      	ldr	r2, [r7, #12]
 8003c9a:	4b2b      	ldr	r3, [pc, #172]	; (8003d48 <TIM_OC1_SetConfig+0xd8>)
 8003c9c:	4013      	ands	r3, r2
 8003c9e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	f023 0303 	bic.w	r3, r3, #3
 8003ca6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003ca8:	683b      	ldr	r3, [r7, #0]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	68fa      	ldr	r2, [r7, #12]
 8003cae:	4313      	orrs	r3, r2
 8003cb0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003cb2:	697b      	ldr	r3, [r7, #20]
 8003cb4:	f023 0302 	bic.w	r3, r3, #2
 8003cb8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003cba:	683b      	ldr	r3, [r7, #0]
 8003cbc:	689b      	ldr	r3, [r3, #8]
 8003cbe:	697a      	ldr	r2, [r7, #20]
 8003cc0:	4313      	orrs	r3, r2
 8003cc2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	4a21      	ldr	r2, [pc, #132]	; (8003d4c <TIM_OC1_SetConfig+0xdc>)
 8003cc8:	4293      	cmp	r3, r2
 8003cca:	d003      	beq.n	8003cd4 <TIM_OC1_SetConfig+0x64>
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	4a20      	ldr	r2, [pc, #128]	; (8003d50 <TIM_OC1_SetConfig+0xe0>)
 8003cd0:	4293      	cmp	r3, r2
 8003cd2:	d10c      	bne.n	8003cee <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003cd4:	697b      	ldr	r3, [r7, #20]
 8003cd6:	f023 0308 	bic.w	r3, r3, #8
 8003cda:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003cdc:	683b      	ldr	r3, [r7, #0]
 8003cde:	68db      	ldr	r3, [r3, #12]
 8003ce0:	697a      	ldr	r2, [r7, #20]
 8003ce2:	4313      	orrs	r3, r2
 8003ce4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003ce6:	697b      	ldr	r3, [r7, #20]
 8003ce8:	f023 0304 	bic.w	r3, r3, #4
 8003cec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	4a16      	ldr	r2, [pc, #88]	; (8003d4c <TIM_OC1_SetConfig+0xdc>)
 8003cf2:	4293      	cmp	r3, r2
 8003cf4:	d003      	beq.n	8003cfe <TIM_OC1_SetConfig+0x8e>
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	4a15      	ldr	r2, [pc, #84]	; (8003d50 <TIM_OC1_SetConfig+0xe0>)
 8003cfa:	4293      	cmp	r3, r2
 8003cfc:	d111      	bne.n	8003d22 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003cfe:	693b      	ldr	r3, [r7, #16]
 8003d00:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003d04:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003d06:	693b      	ldr	r3, [r7, #16]
 8003d08:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003d0c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003d0e:	683b      	ldr	r3, [r7, #0]
 8003d10:	695b      	ldr	r3, [r3, #20]
 8003d12:	693a      	ldr	r2, [r7, #16]
 8003d14:	4313      	orrs	r3, r2
 8003d16:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003d18:	683b      	ldr	r3, [r7, #0]
 8003d1a:	699b      	ldr	r3, [r3, #24]
 8003d1c:	693a      	ldr	r2, [r7, #16]
 8003d1e:	4313      	orrs	r3, r2
 8003d20:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	693a      	ldr	r2, [r7, #16]
 8003d26:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	68fa      	ldr	r2, [r7, #12]
 8003d2c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003d2e:	683b      	ldr	r3, [r7, #0]
 8003d30:	685a      	ldr	r2, [r3, #4]
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	697a      	ldr	r2, [r7, #20]
 8003d3a:	621a      	str	r2, [r3, #32]
}
 8003d3c:	bf00      	nop
 8003d3e:	371c      	adds	r7, #28
 8003d40:	46bd      	mov	sp, r7
 8003d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d46:	4770      	bx	lr
 8003d48:	fffeff8f 	.word	0xfffeff8f
 8003d4c:	40010000 	.word	0x40010000
 8003d50:	40010400 	.word	0x40010400

08003d54 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003d54:	b480      	push	{r7}
 8003d56:	b087      	sub	sp, #28
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	6078      	str	r0, [r7, #4]
 8003d5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	6a1b      	ldr	r3, [r3, #32]
 8003d62:	f023 0210 	bic.w	r2, r3, #16
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	6a1b      	ldr	r3, [r3, #32]
 8003d6e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	685b      	ldr	r3, [r3, #4]
 8003d74:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	699b      	ldr	r3, [r3, #24]
 8003d7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003d7c:	68fa      	ldr	r2, [r7, #12]
 8003d7e:	4b2e      	ldr	r3, [pc, #184]	; (8003e38 <TIM_OC2_SetConfig+0xe4>)
 8003d80:	4013      	ands	r3, r2
 8003d82:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d8a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003d8c:	683b      	ldr	r3, [r7, #0]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	021b      	lsls	r3, r3, #8
 8003d92:	68fa      	ldr	r2, [r7, #12]
 8003d94:	4313      	orrs	r3, r2
 8003d96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003d98:	697b      	ldr	r3, [r7, #20]
 8003d9a:	f023 0320 	bic.w	r3, r3, #32
 8003d9e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003da0:	683b      	ldr	r3, [r7, #0]
 8003da2:	689b      	ldr	r3, [r3, #8]
 8003da4:	011b      	lsls	r3, r3, #4
 8003da6:	697a      	ldr	r2, [r7, #20]
 8003da8:	4313      	orrs	r3, r2
 8003daa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	4a23      	ldr	r2, [pc, #140]	; (8003e3c <TIM_OC2_SetConfig+0xe8>)
 8003db0:	4293      	cmp	r3, r2
 8003db2:	d003      	beq.n	8003dbc <TIM_OC2_SetConfig+0x68>
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	4a22      	ldr	r2, [pc, #136]	; (8003e40 <TIM_OC2_SetConfig+0xec>)
 8003db8:	4293      	cmp	r3, r2
 8003dba:	d10d      	bne.n	8003dd8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003dbc:	697b      	ldr	r3, [r7, #20]
 8003dbe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003dc2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003dc4:	683b      	ldr	r3, [r7, #0]
 8003dc6:	68db      	ldr	r3, [r3, #12]
 8003dc8:	011b      	lsls	r3, r3, #4
 8003dca:	697a      	ldr	r2, [r7, #20]
 8003dcc:	4313      	orrs	r3, r2
 8003dce:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003dd0:	697b      	ldr	r3, [r7, #20]
 8003dd2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003dd6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	4a18      	ldr	r2, [pc, #96]	; (8003e3c <TIM_OC2_SetConfig+0xe8>)
 8003ddc:	4293      	cmp	r3, r2
 8003dde:	d003      	beq.n	8003de8 <TIM_OC2_SetConfig+0x94>
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	4a17      	ldr	r2, [pc, #92]	; (8003e40 <TIM_OC2_SetConfig+0xec>)
 8003de4:	4293      	cmp	r3, r2
 8003de6:	d113      	bne.n	8003e10 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003de8:	693b      	ldr	r3, [r7, #16]
 8003dea:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003dee:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003df0:	693b      	ldr	r3, [r7, #16]
 8003df2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003df6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003df8:	683b      	ldr	r3, [r7, #0]
 8003dfa:	695b      	ldr	r3, [r3, #20]
 8003dfc:	009b      	lsls	r3, r3, #2
 8003dfe:	693a      	ldr	r2, [r7, #16]
 8003e00:	4313      	orrs	r3, r2
 8003e02:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003e04:	683b      	ldr	r3, [r7, #0]
 8003e06:	699b      	ldr	r3, [r3, #24]
 8003e08:	009b      	lsls	r3, r3, #2
 8003e0a:	693a      	ldr	r2, [r7, #16]
 8003e0c:	4313      	orrs	r3, r2
 8003e0e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	693a      	ldr	r2, [r7, #16]
 8003e14:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	68fa      	ldr	r2, [r7, #12]
 8003e1a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003e1c:	683b      	ldr	r3, [r7, #0]
 8003e1e:	685a      	ldr	r2, [r3, #4]
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	697a      	ldr	r2, [r7, #20]
 8003e28:	621a      	str	r2, [r3, #32]
}
 8003e2a:	bf00      	nop
 8003e2c:	371c      	adds	r7, #28
 8003e2e:	46bd      	mov	sp, r7
 8003e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e34:	4770      	bx	lr
 8003e36:	bf00      	nop
 8003e38:	feff8fff 	.word	0xfeff8fff
 8003e3c:	40010000 	.word	0x40010000
 8003e40:	40010400 	.word	0x40010400

08003e44 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003e44:	b480      	push	{r7}
 8003e46:	b087      	sub	sp, #28
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	6078      	str	r0, [r7, #4]
 8003e4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	6a1b      	ldr	r3, [r3, #32]
 8003e52:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	6a1b      	ldr	r3, [r3, #32]
 8003e5e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	685b      	ldr	r3, [r3, #4]
 8003e64:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	69db      	ldr	r3, [r3, #28]
 8003e6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003e6c:	68fa      	ldr	r2, [r7, #12]
 8003e6e:	4b2d      	ldr	r3, [pc, #180]	; (8003f24 <TIM_OC3_SetConfig+0xe0>)
 8003e70:	4013      	ands	r3, r2
 8003e72:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	f023 0303 	bic.w	r3, r3, #3
 8003e7a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003e7c:	683b      	ldr	r3, [r7, #0]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	68fa      	ldr	r2, [r7, #12]
 8003e82:	4313      	orrs	r3, r2
 8003e84:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003e86:	697b      	ldr	r3, [r7, #20]
 8003e88:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003e8c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003e8e:	683b      	ldr	r3, [r7, #0]
 8003e90:	689b      	ldr	r3, [r3, #8]
 8003e92:	021b      	lsls	r3, r3, #8
 8003e94:	697a      	ldr	r2, [r7, #20]
 8003e96:	4313      	orrs	r3, r2
 8003e98:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	4a22      	ldr	r2, [pc, #136]	; (8003f28 <TIM_OC3_SetConfig+0xe4>)
 8003e9e:	4293      	cmp	r3, r2
 8003ea0:	d003      	beq.n	8003eaa <TIM_OC3_SetConfig+0x66>
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	4a21      	ldr	r2, [pc, #132]	; (8003f2c <TIM_OC3_SetConfig+0xe8>)
 8003ea6:	4293      	cmp	r3, r2
 8003ea8:	d10d      	bne.n	8003ec6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003eaa:	697b      	ldr	r3, [r7, #20]
 8003eac:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003eb0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003eb2:	683b      	ldr	r3, [r7, #0]
 8003eb4:	68db      	ldr	r3, [r3, #12]
 8003eb6:	021b      	lsls	r3, r3, #8
 8003eb8:	697a      	ldr	r2, [r7, #20]
 8003eba:	4313      	orrs	r3, r2
 8003ebc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003ebe:	697b      	ldr	r3, [r7, #20]
 8003ec0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003ec4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	4a17      	ldr	r2, [pc, #92]	; (8003f28 <TIM_OC3_SetConfig+0xe4>)
 8003eca:	4293      	cmp	r3, r2
 8003ecc:	d003      	beq.n	8003ed6 <TIM_OC3_SetConfig+0x92>
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	4a16      	ldr	r2, [pc, #88]	; (8003f2c <TIM_OC3_SetConfig+0xe8>)
 8003ed2:	4293      	cmp	r3, r2
 8003ed4:	d113      	bne.n	8003efe <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003ed6:	693b      	ldr	r3, [r7, #16]
 8003ed8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003edc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003ede:	693b      	ldr	r3, [r7, #16]
 8003ee0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003ee4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003ee6:	683b      	ldr	r3, [r7, #0]
 8003ee8:	695b      	ldr	r3, [r3, #20]
 8003eea:	011b      	lsls	r3, r3, #4
 8003eec:	693a      	ldr	r2, [r7, #16]
 8003eee:	4313      	orrs	r3, r2
 8003ef0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003ef2:	683b      	ldr	r3, [r7, #0]
 8003ef4:	699b      	ldr	r3, [r3, #24]
 8003ef6:	011b      	lsls	r3, r3, #4
 8003ef8:	693a      	ldr	r2, [r7, #16]
 8003efa:	4313      	orrs	r3, r2
 8003efc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	693a      	ldr	r2, [r7, #16]
 8003f02:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	68fa      	ldr	r2, [r7, #12]
 8003f08:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003f0a:	683b      	ldr	r3, [r7, #0]
 8003f0c:	685a      	ldr	r2, [r3, #4]
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	697a      	ldr	r2, [r7, #20]
 8003f16:	621a      	str	r2, [r3, #32]
}
 8003f18:	bf00      	nop
 8003f1a:	371c      	adds	r7, #28
 8003f1c:	46bd      	mov	sp, r7
 8003f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f22:	4770      	bx	lr
 8003f24:	fffeff8f 	.word	0xfffeff8f
 8003f28:	40010000 	.word	0x40010000
 8003f2c:	40010400 	.word	0x40010400

08003f30 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003f30:	b480      	push	{r7}
 8003f32:	b087      	sub	sp, #28
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	6078      	str	r0, [r7, #4]
 8003f38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	6a1b      	ldr	r3, [r3, #32]
 8003f3e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	6a1b      	ldr	r3, [r3, #32]
 8003f4a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	685b      	ldr	r3, [r3, #4]
 8003f50:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	69db      	ldr	r3, [r3, #28]
 8003f56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003f58:	68fa      	ldr	r2, [r7, #12]
 8003f5a:	4b1e      	ldr	r3, [pc, #120]	; (8003fd4 <TIM_OC4_SetConfig+0xa4>)
 8003f5c:	4013      	ands	r3, r2
 8003f5e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f66:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003f68:	683b      	ldr	r3, [r7, #0]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	021b      	lsls	r3, r3, #8
 8003f6e:	68fa      	ldr	r2, [r7, #12]
 8003f70:	4313      	orrs	r3, r2
 8003f72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003f74:	693b      	ldr	r3, [r7, #16]
 8003f76:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003f7a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003f7c:	683b      	ldr	r3, [r7, #0]
 8003f7e:	689b      	ldr	r3, [r3, #8]
 8003f80:	031b      	lsls	r3, r3, #12
 8003f82:	693a      	ldr	r2, [r7, #16]
 8003f84:	4313      	orrs	r3, r2
 8003f86:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	4a13      	ldr	r2, [pc, #76]	; (8003fd8 <TIM_OC4_SetConfig+0xa8>)
 8003f8c:	4293      	cmp	r3, r2
 8003f8e:	d003      	beq.n	8003f98 <TIM_OC4_SetConfig+0x68>
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	4a12      	ldr	r2, [pc, #72]	; (8003fdc <TIM_OC4_SetConfig+0xac>)
 8003f94:	4293      	cmp	r3, r2
 8003f96:	d109      	bne.n	8003fac <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003f98:	697b      	ldr	r3, [r7, #20]
 8003f9a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003f9e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003fa0:	683b      	ldr	r3, [r7, #0]
 8003fa2:	695b      	ldr	r3, [r3, #20]
 8003fa4:	019b      	lsls	r3, r3, #6
 8003fa6:	697a      	ldr	r2, [r7, #20]
 8003fa8:	4313      	orrs	r3, r2
 8003faa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	697a      	ldr	r2, [r7, #20]
 8003fb0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	68fa      	ldr	r2, [r7, #12]
 8003fb6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003fb8:	683b      	ldr	r3, [r7, #0]
 8003fba:	685a      	ldr	r2, [r3, #4]
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	693a      	ldr	r2, [r7, #16]
 8003fc4:	621a      	str	r2, [r3, #32]
}
 8003fc6:	bf00      	nop
 8003fc8:	371c      	adds	r7, #28
 8003fca:	46bd      	mov	sp, r7
 8003fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd0:	4770      	bx	lr
 8003fd2:	bf00      	nop
 8003fd4:	feff8fff 	.word	0xfeff8fff
 8003fd8:	40010000 	.word	0x40010000
 8003fdc:	40010400 	.word	0x40010400

08003fe0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003fe0:	b480      	push	{r7}
 8003fe2:	b087      	sub	sp, #28
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	6078      	str	r0, [r7, #4]
 8003fe8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	6a1b      	ldr	r3, [r3, #32]
 8003fee:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	6a1b      	ldr	r3, [r3, #32]
 8003ffa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	685b      	ldr	r3, [r3, #4]
 8004000:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004006:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004008:	68fa      	ldr	r2, [r7, #12]
 800400a:	4b1b      	ldr	r3, [pc, #108]	; (8004078 <TIM_OC5_SetConfig+0x98>)
 800400c:	4013      	ands	r3, r2
 800400e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004010:	683b      	ldr	r3, [r7, #0]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	68fa      	ldr	r2, [r7, #12]
 8004016:	4313      	orrs	r3, r2
 8004018:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800401a:	693b      	ldr	r3, [r7, #16]
 800401c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004020:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004022:	683b      	ldr	r3, [r7, #0]
 8004024:	689b      	ldr	r3, [r3, #8]
 8004026:	041b      	lsls	r3, r3, #16
 8004028:	693a      	ldr	r2, [r7, #16]
 800402a:	4313      	orrs	r3, r2
 800402c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	4a12      	ldr	r2, [pc, #72]	; (800407c <TIM_OC5_SetConfig+0x9c>)
 8004032:	4293      	cmp	r3, r2
 8004034:	d003      	beq.n	800403e <TIM_OC5_SetConfig+0x5e>
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	4a11      	ldr	r2, [pc, #68]	; (8004080 <TIM_OC5_SetConfig+0xa0>)
 800403a:	4293      	cmp	r3, r2
 800403c:	d109      	bne.n	8004052 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800403e:	697b      	ldr	r3, [r7, #20]
 8004040:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004044:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004046:	683b      	ldr	r3, [r7, #0]
 8004048:	695b      	ldr	r3, [r3, #20]
 800404a:	021b      	lsls	r3, r3, #8
 800404c:	697a      	ldr	r2, [r7, #20]
 800404e:	4313      	orrs	r3, r2
 8004050:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	697a      	ldr	r2, [r7, #20]
 8004056:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	68fa      	ldr	r2, [r7, #12]
 800405c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800405e:	683b      	ldr	r3, [r7, #0]
 8004060:	685a      	ldr	r2, [r3, #4]
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	693a      	ldr	r2, [r7, #16]
 800406a:	621a      	str	r2, [r3, #32]
}
 800406c:	bf00      	nop
 800406e:	371c      	adds	r7, #28
 8004070:	46bd      	mov	sp, r7
 8004072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004076:	4770      	bx	lr
 8004078:	fffeff8f 	.word	0xfffeff8f
 800407c:	40010000 	.word	0x40010000
 8004080:	40010400 	.word	0x40010400

08004084 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004084:	b480      	push	{r7}
 8004086:	b087      	sub	sp, #28
 8004088:	af00      	add	r7, sp, #0
 800408a:	6078      	str	r0, [r7, #4]
 800408c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	6a1b      	ldr	r3, [r3, #32]
 8004092:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	6a1b      	ldr	r3, [r3, #32]
 800409e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	685b      	ldr	r3, [r3, #4]
 80040a4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80040ac:	68fa      	ldr	r2, [r7, #12]
 80040ae:	4b1c      	ldr	r3, [pc, #112]	; (8004120 <TIM_OC6_SetConfig+0x9c>)
 80040b0:	4013      	ands	r3, r2
 80040b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80040b4:	683b      	ldr	r3, [r7, #0]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	021b      	lsls	r3, r3, #8
 80040ba:	68fa      	ldr	r2, [r7, #12]
 80040bc:	4313      	orrs	r3, r2
 80040be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80040c0:	693b      	ldr	r3, [r7, #16]
 80040c2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80040c6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80040c8:	683b      	ldr	r3, [r7, #0]
 80040ca:	689b      	ldr	r3, [r3, #8]
 80040cc:	051b      	lsls	r3, r3, #20
 80040ce:	693a      	ldr	r2, [r7, #16]
 80040d0:	4313      	orrs	r3, r2
 80040d2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	4a13      	ldr	r2, [pc, #76]	; (8004124 <TIM_OC6_SetConfig+0xa0>)
 80040d8:	4293      	cmp	r3, r2
 80040da:	d003      	beq.n	80040e4 <TIM_OC6_SetConfig+0x60>
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	4a12      	ldr	r2, [pc, #72]	; (8004128 <TIM_OC6_SetConfig+0xa4>)
 80040e0:	4293      	cmp	r3, r2
 80040e2:	d109      	bne.n	80040f8 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80040e4:	697b      	ldr	r3, [r7, #20]
 80040e6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80040ea:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80040ec:	683b      	ldr	r3, [r7, #0]
 80040ee:	695b      	ldr	r3, [r3, #20]
 80040f0:	029b      	lsls	r3, r3, #10
 80040f2:	697a      	ldr	r2, [r7, #20]
 80040f4:	4313      	orrs	r3, r2
 80040f6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	697a      	ldr	r2, [r7, #20]
 80040fc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	68fa      	ldr	r2, [r7, #12]
 8004102:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004104:	683b      	ldr	r3, [r7, #0]
 8004106:	685a      	ldr	r2, [r3, #4]
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	693a      	ldr	r2, [r7, #16]
 8004110:	621a      	str	r2, [r3, #32]
}
 8004112:	bf00      	nop
 8004114:	371c      	adds	r7, #28
 8004116:	46bd      	mov	sp, r7
 8004118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411c:	4770      	bx	lr
 800411e:	bf00      	nop
 8004120:	feff8fff 	.word	0xfeff8fff
 8004124:	40010000 	.word	0x40010000
 8004128:	40010400 	.word	0x40010400

0800412c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800412c:	b480      	push	{r7}
 800412e:	b087      	sub	sp, #28
 8004130:	af00      	add	r7, sp, #0
 8004132:	60f8      	str	r0, [r7, #12]
 8004134:	60b9      	str	r1, [r7, #8]
 8004136:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	6a1b      	ldr	r3, [r3, #32]
 800413c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	6a1b      	ldr	r3, [r3, #32]
 8004142:	f023 0201 	bic.w	r2, r3, #1
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	699b      	ldr	r3, [r3, #24]
 800414e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004150:	693b      	ldr	r3, [r7, #16]
 8004152:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004156:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	011b      	lsls	r3, r3, #4
 800415c:	693a      	ldr	r2, [r7, #16]
 800415e:	4313      	orrs	r3, r2
 8004160:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004162:	697b      	ldr	r3, [r7, #20]
 8004164:	f023 030a 	bic.w	r3, r3, #10
 8004168:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800416a:	697a      	ldr	r2, [r7, #20]
 800416c:	68bb      	ldr	r3, [r7, #8]
 800416e:	4313      	orrs	r3, r2
 8004170:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	693a      	ldr	r2, [r7, #16]
 8004176:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	697a      	ldr	r2, [r7, #20]
 800417c:	621a      	str	r2, [r3, #32]
}
 800417e:	bf00      	nop
 8004180:	371c      	adds	r7, #28
 8004182:	46bd      	mov	sp, r7
 8004184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004188:	4770      	bx	lr

0800418a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800418a:	b480      	push	{r7}
 800418c:	b087      	sub	sp, #28
 800418e:	af00      	add	r7, sp, #0
 8004190:	60f8      	str	r0, [r7, #12]
 8004192:	60b9      	str	r1, [r7, #8]
 8004194:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	6a1b      	ldr	r3, [r3, #32]
 800419a:	f023 0210 	bic.w	r2, r3, #16
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	699b      	ldr	r3, [r3, #24]
 80041a6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	6a1b      	ldr	r3, [r3, #32]
 80041ac:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80041ae:	697b      	ldr	r3, [r7, #20]
 80041b0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80041b4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	031b      	lsls	r3, r3, #12
 80041ba:	697a      	ldr	r2, [r7, #20]
 80041bc:	4313      	orrs	r3, r2
 80041be:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80041c0:	693b      	ldr	r3, [r7, #16]
 80041c2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80041c6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80041c8:	68bb      	ldr	r3, [r7, #8]
 80041ca:	011b      	lsls	r3, r3, #4
 80041cc:	693a      	ldr	r2, [r7, #16]
 80041ce:	4313      	orrs	r3, r2
 80041d0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	697a      	ldr	r2, [r7, #20]
 80041d6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	693a      	ldr	r2, [r7, #16]
 80041dc:	621a      	str	r2, [r3, #32]
}
 80041de:	bf00      	nop
 80041e0:	371c      	adds	r7, #28
 80041e2:	46bd      	mov	sp, r7
 80041e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e8:	4770      	bx	lr

080041ea <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80041ea:	b480      	push	{r7}
 80041ec:	b085      	sub	sp, #20
 80041ee:	af00      	add	r7, sp, #0
 80041f0:	6078      	str	r0, [r7, #4]
 80041f2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	689b      	ldr	r3, [r3, #8]
 80041f8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004200:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004202:	683a      	ldr	r2, [r7, #0]
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	4313      	orrs	r3, r2
 8004208:	f043 0307 	orr.w	r3, r3, #7
 800420c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	68fa      	ldr	r2, [r7, #12]
 8004212:	609a      	str	r2, [r3, #8]
}
 8004214:	bf00      	nop
 8004216:	3714      	adds	r7, #20
 8004218:	46bd      	mov	sp, r7
 800421a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800421e:	4770      	bx	lr

08004220 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004220:	b480      	push	{r7}
 8004222:	b087      	sub	sp, #28
 8004224:	af00      	add	r7, sp, #0
 8004226:	60f8      	str	r0, [r7, #12]
 8004228:	60b9      	str	r1, [r7, #8]
 800422a:	607a      	str	r2, [r7, #4]
 800422c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	689b      	ldr	r3, [r3, #8]
 8004232:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004234:	697b      	ldr	r3, [r7, #20]
 8004236:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800423a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800423c:	683b      	ldr	r3, [r7, #0]
 800423e:	021a      	lsls	r2, r3, #8
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	431a      	orrs	r2, r3
 8004244:	68bb      	ldr	r3, [r7, #8]
 8004246:	4313      	orrs	r3, r2
 8004248:	697a      	ldr	r2, [r7, #20]
 800424a:	4313      	orrs	r3, r2
 800424c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	697a      	ldr	r2, [r7, #20]
 8004252:	609a      	str	r2, [r3, #8]
}
 8004254:	bf00      	nop
 8004256:	371c      	adds	r7, #28
 8004258:	46bd      	mov	sp, r7
 800425a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800425e:	4770      	bx	lr

08004260 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004260:	b480      	push	{r7}
 8004262:	b087      	sub	sp, #28
 8004264:	af00      	add	r7, sp, #0
 8004266:	60f8      	str	r0, [r7, #12]
 8004268:	60b9      	str	r1, [r7, #8]
 800426a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800426c:	68bb      	ldr	r3, [r7, #8]
 800426e:	f003 031f 	and.w	r3, r3, #31
 8004272:	2201      	movs	r2, #1
 8004274:	fa02 f303 	lsl.w	r3, r2, r3
 8004278:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	6a1a      	ldr	r2, [r3, #32]
 800427e:	697b      	ldr	r3, [r7, #20]
 8004280:	43db      	mvns	r3, r3
 8004282:	401a      	ands	r2, r3
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	6a1a      	ldr	r2, [r3, #32]
 800428c:	68bb      	ldr	r3, [r7, #8]
 800428e:	f003 031f 	and.w	r3, r3, #31
 8004292:	6879      	ldr	r1, [r7, #4]
 8004294:	fa01 f303 	lsl.w	r3, r1, r3
 8004298:	431a      	orrs	r2, r3
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	621a      	str	r2, [r3, #32]
}
 800429e:	bf00      	nop
 80042a0:	371c      	adds	r7, #28
 80042a2:	46bd      	mov	sp, r7
 80042a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a8:	4770      	bx	lr
	...

080042ac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80042ac:	b480      	push	{r7}
 80042ae:	b085      	sub	sp, #20
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	6078      	str	r0, [r7, #4]
 80042b4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80042bc:	2b01      	cmp	r3, #1
 80042be:	d101      	bne.n	80042c4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80042c0:	2302      	movs	r3, #2
 80042c2:	e06d      	b.n	80043a0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	2201      	movs	r2, #1
 80042c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	2202      	movs	r2, #2
 80042d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	685b      	ldr	r3, [r3, #4]
 80042da:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	689b      	ldr	r3, [r3, #8]
 80042e2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	4a30      	ldr	r2, [pc, #192]	; (80043ac <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80042ea:	4293      	cmp	r3, r2
 80042ec:	d004      	beq.n	80042f8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	4a2f      	ldr	r2, [pc, #188]	; (80043b0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80042f4:	4293      	cmp	r3, r2
 80042f6:	d108      	bne.n	800430a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80042fe:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004300:	683b      	ldr	r3, [r7, #0]
 8004302:	685b      	ldr	r3, [r3, #4]
 8004304:	68fa      	ldr	r2, [r7, #12]
 8004306:	4313      	orrs	r3, r2
 8004308:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004310:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004312:	683b      	ldr	r3, [r7, #0]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	68fa      	ldr	r2, [r7, #12]
 8004318:	4313      	orrs	r3, r2
 800431a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	68fa      	ldr	r2, [r7, #12]
 8004322:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	4a20      	ldr	r2, [pc, #128]	; (80043ac <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800432a:	4293      	cmp	r3, r2
 800432c:	d022      	beq.n	8004374 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004336:	d01d      	beq.n	8004374 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	4a1d      	ldr	r2, [pc, #116]	; (80043b4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800433e:	4293      	cmp	r3, r2
 8004340:	d018      	beq.n	8004374 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	4a1c      	ldr	r2, [pc, #112]	; (80043b8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8004348:	4293      	cmp	r3, r2
 800434a:	d013      	beq.n	8004374 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	4a1a      	ldr	r2, [pc, #104]	; (80043bc <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8004352:	4293      	cmp	r3, r2
 8004354:	d00e      	beq.n	8004374 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	4a15      	ldr	r2, [pc, #84]	; (80043b0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800435c:	4293      	cmp	r3, r2
 800435e:	d009      	beq.n	8004374 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	4a16      	ldr	r2, [pc, #88]	; (80043c0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8004366:	4293      	cmp	r3, r2
 8004368:	d004      	beq.n	8004374 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	4a15      	ldr	r2, [pc, #84]	; (80043c4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8004370:	4293      	cmp	r3, r2
 8004372:	d10c      	bne.n	800438e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004374:	68bb      	ldr	r3, [r7, #8]
 8004376:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800437a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800437c:	683b      	ldr	r3, [r7, #0]
 800437e:	689b      	ldr	r3, [r3, #8]
 8004380:	68ba      	ldr	r2, [r7, #8]
 8004382:	4313      	orrs	r3, r2
 8004384:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	68ba      	ldr	r2, [r7, #8]
 800438c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	2201      	movs	r2, #1
 8004392:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	2200      	movs	r2, #0
 800439a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800439e:	2300      	movs	r3, #0
}
 80043a0:	4618      	mov	r0, r3
 80043a2:	3714      	adds	r7, #20
 80043a4:	46bd      	mov	sp, r7
 80043a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043aa:	4770      	bx	lr
 80043ac:	40010000 	.word	0x40010000
 80043b0:	40010400 	.word	0x40010400
 80043b4:	40000400 	.word	0x40000400
 80043b8:	40000800 	.word	0x40000800
 80043bc:	40000c00 	.word	0x40000c00
 80043c0:	40014000 	.word	0x40014000
 80043c4:	40001800 	.word	0x40001800

080043c8 <HAL_UART_Init>:
 * @brief Initialize the UART mode according to the specified
 *        parameters in the UART_InitTypeDef and initialize the associated handle.
 * @param huart UART handle.
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart) {
 80043c8:	b580      	push	{r7, lr}
 80043ca:	b082      	sub	sp, #8
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	6078      	str	r0, [r7, #4]
	/* Check the UART handle allocation */
	if (huart == NULL) {
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d101      	bne.n	80043da <HAL_UART_Init+0x12>
		return HAL_ERROR;
 80043d6:	2301      	movs	r3, #1
 80043d8:	e040      	b.n	800445c <HAL_UART_Init+0x94>
	} else {
		/* Check the parameters */
		assert_param(IS_UART_INSTANCE(huart->Instance));
	}

	if (huart->gState == HAL_UART_STATE_RESET) {
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d106      	bne.n	80043f0 <HAL_UART_Init+0x28>
		/* Allocate lock resource and initialize it */
		huart->Lock = HAL_UNLOCKED;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	2200      	movs	r2, #0
 80043e6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
		/* Init the low level hardware : GPIO, CLOCK */
		HAL_UART_MspInit(huart);
 80043ea:	6878      	ldr	r0, [r7, #4]
 80043ec:	f7fc fd68 	bl	8000ec0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
	}

	huart->gState = HAL_UART_STATE_BUSY;
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	2224      	movs	r2, #36	; 0x24
 80043f4:	67da      	str	r2, [r3, #124]	; 0x7c

	__HAL_UART_DISABLE(huart);
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	681a      	ldr	r2, [r3, #0]
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	f022 0201 	bic.w	r2, r2, #1
 8004404:	601a      	str	r2, [r3, #0]

	/* Set the UART Communication parameters */
	if (UART_SetConfig(huart) == HAL_ERROR) {
 8004406:	6878      	ldr	r0, [r7, #4]
 8004408:	f000 f974 	bl	80046f4 <UART_SetConfig>
 800440c:	4603      	mov	r3, r0
 800440e:	2b01      	cmp	r3, #1
 8004410:	d101      	bne.n	8004416 <HAL_UART_Init+0x4e>
		return HAL_ERROR;
 8004412:	2301      	movs	r3, #1
 8004414:	e022      	b.n	800445c <HAL_UART_Init+0x94>
	}

	if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT) {
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800441a:	2b00      	cmp	r3, #0
 800441c:	d002      	beq.n	8004424 <HAL_UART_Init+0x5c>
		UART_AdvFeatureConfig(huart);
 800441e:	6878      	ldr	r0, [r7, #4]
 8004420:	f000 fbcc 	bl	8004bbc <UART_AdvFeatureConfig>
	}

	/* In asynchronous mode, the following bits must be kept cleared:
	 - LINEN and CLKEN bits in the USART_CR2 register,
	 - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
	CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	685a      	ldr	r2, [r3, #4]
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004432:	605a      	str	r2, [r3, #4]
	CLEAR_BIT(huart->Instance->CR3,
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	689a      	ldr	r2, [r3, #8]
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004442:	609a      	str	r2, [r3, #8]
			(USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));

	__HAL_UART_ENABLE(huart);
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	681a      	ldr	r2, [r3, #0]
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	f042 0201 	orr.w	r2, r2, #1
 8004452:	601a      	str	r2, [r3, #0]

	/* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
	return (UART_CheckIdleState(huart));
 8004454:	6878      	ldr	r0, [r7, #4]
 8004456:	f000 fc53 	bl	8004d00 <UART_CheckIdleState>
 800445a:	4603      	mov	r3, r0
}
 800445c:	4618      	mov	r0, r3
 800445e:	3708      	adds	r7, #8
 8004460:	46bd      	mov	sp, r7
 8004462:	bd80      	pop	{r7, pc}

08004464 <HAL_UART_Transmit>:
 * @param Size    Amount of data elements (u8 or u16) to be sent.
 * @param Timeout Timeout duration.
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart,
		const uint8_t *pData, uint16_t Size, uint32_t Timeout) {
 8004464:	b580      	push	{r7, lr}
 8004466:	b08a      	sub	sp, #40	; 0x28
 8004468:	af02      	add	r7, sp, #8
 800446a:	60f8      	str	r0, [r7, #12]
 800446c:	60b9      	str	r1, [r7, #8]
 800446e:	603b      	str	r3, [r7, #0]
 8004470:	4613      	mov	r3, r2
 8004472:	80fb      	strh	r3, [r7, #6]
	const uint8_t *pdata8bits;
	const uint16_t *pdata16bits;
	uint32_t tickstart;

	/* Check that a Tx process is not already ongoing */
	if (huart->gState == HAL_UART_STATE_READY) {
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004478:	2b20      	cmp	r3, #32
 800447a:	d171      	bne.n	8004560 <HAL_UART_Transmit+0xfc>
		if ((pData == NULL) || (Size == 0U)) {
 800447c:	68bb      	ldr	r3, [r7, #8]
 800447e:	2b00      	cmp	r3, #0
 8004480:	d002      	beq.n	8004488 <HAL_UART_Transmit+0x24>
 8004482:	88fb      	ldrh	r3, [r7, #6]
 8004484:	2b00      	cmp	r3, #0
 8004486:	d101      	bne.n	800448c <HAL_UART_Transmit+0x28>
			return HAL_ERROR;
 8004488:	2301      	movs	r3, #1
 800448a:	e06a      	b.n	8004562 <HAL_UART_Transmit+0xfe>
		}

		huart->ErrorCode = HAL_UART_ERROR_NONE;
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	2200      	movs	r2, #0
 8004490:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
		huart->gState = HAL_UART_STATE_BUSY_TX;
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	2221      	movs	r2, #33	; 0x21
 8004498:	67da      	str	r2, [r3, #124]	; 0x7c

		/* Init tickstart for timeout management */
		tickstart = HAL_GetTick();
 800449a:	f7fc fe93 	bl	80011c4 <HAL_GetTick>
 800449e:	6178      	str	r0, [r7, #20]

		huart->TxXferSize = Size;
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	88fa      	ldrh	r2, [r7, #6]
 80044a4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
		huart->TxXferCount = Size;
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	88fa      	ldrh	r2, [r7, #6]
 80044ac:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

		/* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
		if ((huart->Init.WordLength == UART_WORDLENGTH_9B)
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	689b      	ldr	r3, [r3, #8]
 80044b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80044b8:	d108      	bne.n	80044cc <HAL_UART_Transmit+0x68>
				&& (huart->Init.Parity == UART_PARITY_NONE)) {
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	691b      	ldr	r3, [r3, #16]
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d104      	bne.n	80044cc <HAL_UART_Transmit+0x68>
			pdata8bits = NULL;
 80044c2:	2300      	movs	r3, #0
 80044c4:	61fb      	str	r3, [r7, #28]
			pdata16bits = (const uint16_t*) pData;
 80044c6:	68bb      	ldr	r3, [r7, #8]
 80044c8:	61bb      	str	r3, [r7, #24]
 80044ca:	e003      	b.n	80044d4 <HAL_UART_Transmit+0x70>
		} else {
			pdata8bits = pData;
 80044cc:	68bb      	ldr	r3, [r7, #8]
 80044ce:	61fb      	str	r3, [r7, #28]
			pdata16bits = NULL;
 80044d0:	2300      	movs	r3, #0
 80044d2:	61bb      	str	r3, [r7, #24]
		}

		while (huart->TxXferCount > 0U) {
 80044d4:	e02c      	b.n	8004530 <HAL_UART_Transmit+0xcc>
			if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET,
 80044d6:	683b      	ldr	r3, [r7, #0]
 80044d8:	9300      	str	r3, [sp, #0]
 80044da:	697b      	ldr	r3, [r7, #20]
 80044dc:	2200      	movs	r2, #0
 80044de:	2180      	movs	r1, #128	; 0x80
 80044e0:	68f8      	ldr	r0, [r7, #12]
 80044e2:	f000 fc5a 	bl	8004d9a <UART_WaitOnFlagUntilTimeout>
 80044e6:	4603      	mov	r3, r0
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d001      	beq.n	80044f0 <HAL_UART_Transmit+0x8c>
					tickstart, Timeout) != HAL_OK) {
				return HAL_TIMEOUT;
 80044ec:	2303      	movs	r3, #3
 80044ee:	e038      	b.n	8004562 <HAL_UART_Transmit+0xfe>
			}
			if (pdata8bits == NULL) {
 80044f0:	69fb      	ldr	r3, [r7, #28]
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d10b      	bne.n	800450e <HAL_UART_Transmit+0xaa>
				huart->Instance->TDR = (uint16_t) (*pdata16bits & 0x01FFU);
 80044f6:	69bb      	ldr	r3, [r7, #24]
 80044f8:	881b      	ldrh	r3, [r3, #0]
 80044fa:	461a      	mov	r2, r3
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004504:	629a      	str	r2, [r3, #40]	; 0x28
				pdata16bits++;
 8004506:	69bb      	ldr	r3, [r7, #24]
 8004508:	3302      	adds	r3, #2
 800450a:	61bb      	str	r3, [r7, #24]
 800450c:	e007      	b.n	800451e <HAL_UART_Transmit+0xba>
			} else {
				huart->Instance->TDR = (uint8_t) (*pdata8bits & 0xFFU);
 800450e:	69fb      	ldr	r3, [r7, #28]
 8004510:	781a      	ldrb	r2, [r3, #0]
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	629a      	str	r2, [r3, #40]	; 0x28
				pdata8bits++;
 8004518:	69fb      	ldr	r3, [r7, #28]
 800451a:	3301      	adds	r3, #1
 800451c:	61fb      	str	r3, [r7, #28]
			}
			huart->TxXferCount--;
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004524:	b29b      	uxth	r3, r3
 8004526:	3b01      	subs	r3, #1
 8004528:	b29a      	uxth	r2, r3
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
		while (huart->TxXferCount > 0U) {
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004536:	b29b      	uxth	r3, r3
 8004538:	2b00      	cmp	r3, #0
 800453a:	d1cc      	bne.n	80044d6 <HAL_UART_Transmit+0x72>
		}

		if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart,
 800453c:	683b      	ldr	r3, [r7, #0]
 800453e:	9300      	str	r3, [sp, #0]
 8004540:	697b      	ldr	r3, [r7, #20]
 8004542:	2200      	movs	r2, #0
 8004544:	2140      	movs	r1, #64	; 0x40
 8004546:	68f8      	ldr	r0, [r7, #12]
 8004548:	f000 fc27 	bl	8004d9a <UART_WaitOnFlagUntilTimeout>
 800454c:	4603      	mov	r3, r0
 800454e:	2b00      	cmp	r3, #0
 8004550:	d001      	beq.n	8004556 <HAL_UART_Transmit+0xf2>
				Timeout) != HAL_OK) {
			return HAL_TIMEOUT;
 8004552:	2303      	movs	r3, #3
 8004554:	e005      	b.n	8004562 <HAL_UART_Transmit+0xfe>
		}

		/* At end of Tx process, restore huart->gState to Ready */
		huart->gState = HAL_UART_STATE_READY;
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	2220      	movs	r2, #32
 800455a:	67da      	str	r2, [r3, #124]	; 0x7c

		return HAL_OK;
 800455c:	2300      	movs	r3, #0
 800455e:	e000      	b.n	8004562 <HAL_UART_Transmit+0xfe>
	} else {
		return HAL_BUSY;
 8004560:	2302      	movs	r3, #2
	}
}
 8004562:	4618      	mov	r0, r3
 8004564:	3720      	adds	r7, #32
 8004566:	46bd      	mov	sp, r7
 8004568:	bd80      	pop	{r7, pc}

0800456a <HAL_UART_Receive>:
 * @param Size    Amount of data elements (u8 or u16) to be received.
 * @param Timeout Timeout duration.
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData,
		uint16_t Size, uint32_t Timeout) {
 800456a:	b580      	push	{r7, lr}
 800456c:	b08a      	sub	sp, #40	; 0x28
 800456e:	af02      	add	r7, sp, #8
 8004570:	60f8      	str	r0, [r7, #12]
 8004572:	60b9      	str	r1, [r7, #8]
 8004574:	603b      	str	r3, [r7, #0]
 8004576:	4613      	mov	r3, r2
 8004578:	80fb      	strh	r3, [r7, #6]
	uint16_t *pdata16bits;
	uint16_t uhMask;
	uint32_t tickstart;

	/* Check that a Rx process is not already ongoing */
	if (huart->RxState == HAL_UART_STATE_READY) {
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004580:	2b20      	cmp	r3, #32
 8004582:	f040 80b1 	bne.w	80046e8 <HAL_UART_Receive+0x17e>
		if ((pData == NULL) || (Size == 0U)) {
 8004586:	68bb      	ldr	r3, [r7, #8]
 8004588:	2b00      	cmp	r3, #0
 800458a:	d002      	beq.n	8004592 <HAL_UART_Receive+0x28>
 800458c:	88fb      	ldrh	r3, [r7, #6]
 800458e:	2b00      	cmp	r3, #0
 8004590:	d101      	bne.n	8004596 <HAL_UART_Receive+0x2c>
			return HAL_ERROR;
 8004592:	2301      	movs	r3, #1
 8004594:	e0a9      	b.n	80046ea <HAL_UART_Receive+0x180>
		}

		huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	2200      	movs	r2, #0
 800459a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
		huart->RxState = HAL_UART_STATE_BUSY_RX;
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	2222      	movs	r2, #34	; 0x22
 80045a2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	2200      	movs	r2, #0
 80045aa:	661a      	str	r2, [r3, #96]	; 0x60

		/* Init tickstart for timeout management */
		tickstart = HAL_GetTick();
 80045ac:	f7fc fe0a 	bl	80011c4 <HAL_GetTick>
 80045b0:	6178      	str	r0, [r7, #20]

		huart->RxXferSize = Size;
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	88fa      	ldrh	r2, [r7, #6]
 80045b6:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
		huart->RxXferCount = Size;
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	88fa      	ldrh	r2, [r7, #6]
 80045be:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

		/* Computation of UART mask to apply to RDR register */
		UART_MASK_COMPUTATION(huart);
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	689b      	ldr	r3, [r3, #8]
 80045c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80045ca:	d10e      	bne.n	80045ea <HAL_UART_Receive+0x80>
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	691b      	ldr	r3, [r3, #16]
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d105      	bne.n	80045e0 <HAL_UART_Receive+0x76>
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	f240 12ff 	movw	r2, #511	; 0x1ff
 80045da:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80045de:	e02d      	b.n	800463c <HAL_UART_Receive+0xd2>
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	22ff      	movs	r2, #255	; 0xff
 80045e4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80045e8:	e028      	b.n	800463c <HAL_UART_Receive+0xd2>
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	689b      	ldr	r3, [r3, #8]
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d10d      	bne.n	800460e <HAL_UART_Receive+0xa4>
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	691b      	ldr	r3, [r3, #16]
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d104      	bne.n	8004604 <HAL_UART_Receive+0x9a>
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	22ff      	movs	r2, #255	; 0xff
 80045fe:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004602:	e01b      	b.n	800463c <HAL_UART_Receive+0xd2>
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	227f      	movs	r2, #127	; 0x7f
 8004608:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800460c:	e016      	b.n	800463c <HAL_UART_Receive+0xd2>
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	689b      	ldr	r3, [r3, #8]
 8004612:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004616:	d10d      	bne.n	8004634 <HAL_UART_Receive+0xca>
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	691b      	ldr	r3, [r3, #16]
 800461c:	2b00      	cmp	r3, #0
 800461e:	d104      	bne.n	800462a <HAL_UART_Receive+0xc0>
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	227f      	movs	r2, #127	; 0x7f
 8004624:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004628:	e008      	b.n	800463c <HAL_UART_Receive+0xd2>
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	223f      	movs	r2, #63	; 0x3f
 800462e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004632:	e003      	b.n	800463c <HAL_UART_Receive+0xd2>
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	2200      	movs	r2, #0
 8004638:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
		uhMask = huart->Mask;
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004642:	827b      	strh	r3, [r7, #18]

		/* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
		if ((huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	689b      	ldr	r3, [r3, #8]
 8004648:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800464c:	d108      	bne.n	8004660 <HAL_UART_Receive+0xf6>
				&& (huart->Init.Parity == UART_PARITY_NONE)) {
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	691b      	ldr	r3, [r3, #16]
 8004652:	2b00      	cmp	r3, #0
 8004654:	d104      	bne.n	8004660 <HAL_UART_Receive+0xf6>
			pdata8bits = NULL;
 8004656:	2300      	movs	r3, #0
 8004658:	61fb      	str	r3, [r7, #28]
			pdata16bits = (uint16_t*) pData;
 800465a:	68bb      	ldr	r3, [r7, #8]
 800465c:	61bb      	str	r3, [r7, #24]
 800465e:	e003      	b.n	8004668 <HAL_UART_Receive+0xfe>
		} else {
			pdata8bits = pData;
 8004660:	68bb      	ldr	r3, [r7, #8]
 8004662:	61fb      	str	r3, [r7, #28]
			pdata16bits = NULL;
 8004664:	2300      	movs	r3, #0
 8004666:	61bb      	str	r3, [r7, #24]
		}

		/* as long as data have to be received */
		while (huart->RxXferCount > 0U) {
 8004668:	e032      	b.n	80046d0 <HAL_UART_Receive+0x166>
			if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET,
 800466a:	683b      	ldr	r3, [r7, #0]
 800466c:	9300      	str	r3, [sp, #0]
 800466e:	697b      	ldr	r3, [r7, #20]
 8004670:	2200      	movs	r2, #0
 8004672:	2120      	movs	r1, #32
 8004674:	68f8      	ldr	r0, [r7, #12]
 8004676:	f000 fb90 	bl	8004d9a <UART_WaitOnFlagUntilTimeout>
 800467a:	4603      	mov	r3, r0
 800467c:	2b00      	cmp	r3, #0
 800467e:	d001      	beq.n	8004684 <HAL_UART_Receive+0x11a>
					tickstart, Timeout) != HAL_OK) {
				return HAL_TIMEOUT;
 8004680:	2303      	movs	r3, #3
 8004682:	e032      	b.n	80046ea <HAL_UART_Receive+0x180>
			}
			if (pdata8bits == NULL) {
 8004684:	69fb      	ldr	r3, [r7, #28]
 8004686:	2b00      	cmp	r3, #0
 8004688:	d10c      	bne.n	80046a4 <HAL_UART_Receive+0x13a>
				*pdata16bits = (uint16_t) (huart->Instance->RDR & uhMask);
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004690:	b29a      	uxth	r2, r3
 8004692:	8a7b      	ldrh	r3, [r7, #18]
 8004694:	4013      	ands	r3, r2
 8004696:	b29a      	uxth	r2, r3
 8004698:	69bb      	ldr	r3, [r7, #24]
 800469a:	801a      	strh	r2, [r3, #0]
				pdata16bits++;
 800469c:	69bb      	ldr	r3, [r7, #24]
 800469e:	3302      	adds	r3, #2
 80046a0:	61bb      	str	r3, [r7, #24]
 80046a2:	e00c      	b.n	80046be <HAL_UART_Receive+0x154>
			} else {
				*pdata8bits =
						(uint8_t) (huart->Instance->RDR & (uint8_t) uhMask);
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046aa:	b2da      	uxtb	r2, r3
 80046ac:	8a7b      	ldrh	r3, [r7, #18]
 80046ae:	b2db      	uxtb	r3, r3
 80046b0:	4013      	ands	r3, r2
 80046b2:	b2da      	uxtb	r2, r3
				*pdata8bits =
 80046b4:	69fb      	ldr	r3, [r7, #28]
 80046b6:	701a      	strb	r2, [r3, #0]
				pdata8bits++;
 80046b8:	69fb      	ldr	r3, [r7, #28]
 80046ba:	3301      	adds	r3, #1
 80046bc:	61fb      	str	r3, [r7, #28]
			}
			huart->RxXferCount--;
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80046c4:	b29b      	uxth	r3, r3
 80046c6:	3b01      	subs	r3, #1
 80046c8:	b29a      	uxth	r2, r3
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
		while (huart->RxXferCount > 0U) {
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80046d6:	b29b      	uxth	r3, r3
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d1c6      	bne.n	800466a <HAL_UART_Receive+0x100>
		}

		/* At end of Rx process, restore huart->RxState to Ready */
		huart->RxState = HAL_UART_STATE_READY;
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	2220      	movs	r2, #32
 80046e0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

		return HAL_OK;
 80046e4:	2300      	movs	r3, #0
 80046e6:	e000      	b.n	80046ea <HAL_UART_Receive+0x180>
	} else {
		return HAL_BUSY;
 80046e8:	2302      	movs	r3, #2
	}
}
 80046ea:	4618      	mov	r0, r3
 80046ec:	3720      	adds	r7, #32
 80046ee:	46bd      	mov	sp, r7
 80046f0:	bd80      	pop	{r7, pc}
	...

080046f4 <UART_SetConfig>:
/**
 * @brief Configure the UART peripheral.
 * @param huart UART handle.
 * @retval HAL status
 */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart) {
 80046f4:	b580      	push	{r7, lr}
 80046f6:	b088      	sub	sp, #32
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	6078      	str	r0, [r7, #4]
	uint32_t tmpreg;
	uint16_t brrtemp;
	UART_ClockSourceTypeDef clocksource;
	uint32_t usartdiv;
	HAL_StatusTypeDef ret = HAL_OK;
 80046fc:	2300      	movs	r3, #0
 80046fe:	77bb      	strb	r3, [r7, #30]
	 *  the UART Word Length, Parity, Mode and oversampling:
	 *  set the M bits according to huart->Init.WordLength value
	 *  set PCE and PS bits according to huart->Init.Parity value
	 *  set TE and RE bits according to huart->Init.Mode value
	 *  set OVER8 bit according to huart->Init.OverSampling value */
	tmpreg = (uint32_t) huart->Init.WordLength | huart->Init.Parity
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	689a      	ldr	r2, [r3, #8]
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	691b      	ldr	r3, [r3, #16]
 8004708:	431a      	orrs	r2, r3
			| huart->Init.Mode | huart->Init.OverSampling;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	695b      	ldr	r3, [r3, #20]
 800470e:	431a      	orrs	r2, r3
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	69db      	ldr	r3, [r3, #28]
	tmpreg = (uint32_t) huart->Init.WordLength | huart->Init.Parity
 8004714:	4313      	orrs	r3, r2
 8004716:	617b      	str	r3, [r7, #20]
	MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	681a      	ldr	r2, [r3, #0]
 800471e:	4ba6      	ldr	r3, [pc, #664]	; (80049b8 <UART_SetConfig+0x2c4>)
 8004720:	4013      	ands	r3, r2
 8004722:	687a      	ldr	r2, [r7, #4]
 8004724:	6812      	ldr	r2, [r2, #0]
 8004726:	6979      	ldr	r1, [r7, #20]
 8004728:	430b      	orrs	r3, r1
 800472a:	6013      	str	r3, [r2, #0]

	/*-------------------------- USART CR2 Configuration -----------------------*/
	/* Configure the UART Stop Bits: Set STOP[13:12] bits according
	 * to huart->Init.StopBits value */
	MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	685b      	ldr	r3, [r3, #4]
 8004732:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	68da      	ldr	r2, [r3, #12]
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	430a      	orrs	r2, r1
 8004740:	605a      	str	r2, [r3, #4]
	/* Configure
	 * - UART HardWare Flow Control: set CTSE and RTSE bits according
	 *   to huart->Init.HwFlowCtl value
	 * - one-bit sampling method versus three samples' majority rule according
	 *   to huart->Init.OneBitSampling (not applicable to LPUART) */
	tmpreg = (uint32_t) huart->Init.HwFlowCtl;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	699b      	ldr	r3, [r3, #24]
 8004746:	617b      	str	r3, [r7, #20]

	tmpreg |= huart->Init.OneBitSampling;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	6a1b      	ldr	r3, [r3, #32]
 800474c:	697a      	ldr	r2, [r7, #20]
 800474e:	4313      	orrs	r3, r2
 8004750:	617b      	str	r3, [r7, #20]
	MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	689b      	ldr	r3, [r3, #8]
 8004758:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	697a      	ldr	r2, [r7, #20]
 8004762:	430a      	orrs	r2, r1
 8004764:	609a      	str	r2, [r3, #8]

	/*-------------------------- USART BRR Configuration -----------------------*/
	UART_GETCLOCKSOURCE(huart, clocksource);
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	4a94      	ldr	r2, [pc, #592]	; (80049bc <UART_SetConfig+0x2c8>)
 800476c:	4293      	cmp	r3, r2
 800476e:	d120      	bne.n	80047b2 <UART_SetConfig+0xbe>
 8004770:	4b93      	ldr	r3, [pc, #588]	; (80049c0 <UART_SetConfig+0x2cc>)
 8004772:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004776:	f003 0303 	and.w	r3, r3, #3
 800477a:	2b03      	cmp	r3, #3
 800477c:	d816      	bhi.n	80047ac <UART_SetConfig+0xb8>
 800477e:	a201      	add	r2, pc, #4	; (adr r2, 8004784 <UART_SetConfig+0x90>)
 8004780:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004784:	08004795 	.word	0x08004795
 8004788:	080047a1 	.word	0x080047a1
 800478c:	0800479b 	.word	0x0800479b
 8004790:	080047a7 	.word	0x080047a7
 8004794:	2301      	movs	r3, #1
 8004796:	77fb      	strb	r3, [r7, #31]
 8004798:	e150      	b.n	8004a3c <UART_SetConfig+0x348>
 800479a:	2302      	movs	r3, #2
 800479c:	77fb      	strb	r3, [r7, #31]
 800479e:	e14d      	b.n	8004a3c <UART_SetConfig+0x348>
 80047a0:	2304      	movs	r3, #4
 80047a2:	77fb      	strb	r3, [r7, #31]
 80047a4:	e14a      	b.n	8004a3c <UART_SetConfig+0x348>
 80047a6:	2308      	movs	r3, #8
 80047a8:	77fb      	strb	r3, [r7, #31]
 80047aa:	e147      	b.n	8004a3c <UART_SetConfig+0x348>
 80047ac:	2310      	movs	r3, #16
 80047ae:	77fb      	strb	r3, [r7, #31]
 80047b0:	e144      	b.n	8004a3c <UART_SetConfig+0x348>
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	4a83      	ldr	r2, [pc, #524]	; (80049c4 <UART_SetConfig+0x2d0>)
 80047b8:	4293      	cmp	r3, r2
 80047ba:	d132      	bne.n	8004822 <UART_SetConfig+0x12e>
 80047bc:	4b80      	ldr	r3, [pc, #512]	; (80049c0 <UART_SetConfig+0x2cc>)
 80047be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047c2:	f003 030c 	and.w	r3, r3, #12
 80047c6:	2b0c      	cmp	r3, #12
 80047c8:	d828      	bhi.n	800481c <UART_SetConfig+0x128>
 80047ca:	a201      	add	r2, pc, #4	; (adr r2, 80047d0 <UART_SetConfig+0xdc>)
 80047cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047d0:	08004805 	.word	0x08004805
 80047d4:	0800481d 	.word	0x0800481d
 80047d8:	0800481d 	.word	0x0800481d
 80047dc:	0800481d 	.word	0x0800481d
 80047e0:	08004811 	.word	0x08004811
 80047e4:	0800481d 	.word	0x0800481d
 80047e8:	0800481d 	.word	0x0800481d
 80047ec:	0800481d 	.word	0x0800481d
 80047f0:	0800480b 	.word	0x0800480b
 80047f4:	0800481d 	.word	0x0800481d
 80047f8:	0800481d 	.word	0x0800481d
 80047fc:	0800481d 	.word	0x0800481d
 8004800:	08004817 	.word	0x08004817
 8004804:	2300      	movs	r3, #0
 8004806:	77fb      	strb	r3, [r7, #31]
 8004808:	e118      	b.n	8004a3c <UART_SetConfig+0x348>
 800480a:	2302      	movs	r3, #2
 800480c:	77fb      	strb	r3, [r7, #31]
 800480e:	e115      	b.n	8004a3c <UART_SetConfig+0x348>
 8004810:	2304      	movs	r3, #4
 8004812:	77fb      	strb	r3, [r7, #31]
 8004814:	e112      	b.n	8004a3c <UART_SetConfig+0x348>
 8004816:	2308      	movs	r3, #8
 8004818:	77fb      	strb	r3, [r7, #31]
 800481a:	e10f      	b.n	8004a3c <UART_SetConfig+0x348>
 800481c:	2310      	movs	r3, #16
 800481e:	77fb      	strb	r3, [r7, #31]
 8004820:	e10c      	b.n	8004a3c <UART_SetConfig+0x348>
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	4a68      	ldr	r2, [pc, #416]	; (80049c8 <UART_SetConfig+0x2d4>)
 8004828:	4293      	cmp	r3, r2
 800482a:	d120      	bne.n	800486e <UART_SetConfig+0x17a>
 800482c:	4b64      	ldr	r3, [pc, #400]	; (80049c0 <UART_SetConfig+0x2cc>)
 800482e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004832:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004836:	2b30      	cmp	r3, #48	; 0x30
 8004838:	d013      	beq.n	8004862 <UART_SetConfig+0x16e>
 800483a:	2b30      	cmp	r3, #48	; 0x30
 800483c:	d814      	bhi.n	8004868 <UART_SetConfig+0x174>
 800483e:	2b20      	cmp	r3, #32
 8004840:	d009      	beq.n	8004856 <UART_SetConfig+0x162>
 8004842:	2b20      	cmp	r3, #32
 8004844:	d810      	bhi.n	8004868 <UART_SetConfig+0x174>
 8004846:	2b00      	cmp	r3, #0
 8004848:	d002      	beq.n	8004850 <UART_SetConfig+0x15c>
 800484a:	2b10      	cmp	r3, #16
 800484c:	d006      	beq.n	800485c <UART_SetConfig+0x168>
 800484e:	e00b      	b.n	8004868 <UART_SetConfig+0x174>
 8004850:	2300      	movs	r3, #0
 8004852:	77fb      	strb	r3, [r7, #31]
 8004854:	e0f2      	b.n	8004a3c <UART_SetConfig+0x348>
 8004856:	2302      	movs	r3, #2
 8004858:	77fb      	strb	r3, [r7, #31]
 800485a:	e0ef      	b.n	8004a3c <UART_SetConfig+0x348>
 800485c:	2304      	movs	r3, #4
 800485e:	77fb      	strb	r3, [r7, #31]
 8004860:	e0ec      	b.n	8004a3c <UART_SetConfig+0x348>
 8004862:	2308      	movs	r3, #8
 8004864:	77fb      	strb	r3, [r7, #31]
 8004866:	e0e9      	b.n	8004a3c <UART_SetConfig+0x348>
 8004868:	2310      	movs	r3, #16
 800486a:	77fb      	strb	r3, [r7, #31]
 800486c:	e0e6      	b.n	8004a3c <UART_SetConfig+0x348>
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	4a56      	ldr	r2, [pc, #344]	; (80049cc <UART_SetConfig+0x2d8>)
 8004874:	4293      	cmp	r3, r2
 8004876:	d120      	bne.n	80048ba <UART_SetConfig+0x1c6>
 8004878:	4b51      	ldr	r3, [pc, #324]	; (80049c0 <UART_SetConfig+0x2cc>)
 800487a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800487e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004882:	2bc0      	cmp	r3, #192	; 0xc0
 8004884:	d013      	beq.n	80048ae <UART_SetConfig+0x1ba>
 8004886:	2bc0      	cmp	r3, #192	; 0xc0
 8004888:	d814      	bhi.n	80048b4 <UART_SetConfig+0x1c0>
 800488a:	2b80      	cmp	r3, #128	; 0x80
 800488c:	d009      	beq.n	80048a2 <UART_SetConfig+0x1ae>
 800488e:	2b80      	cmp	r3, #128	; 0x80
 8004890:	d810      	bhi.n	80048b4 <UART_SetConfig+0x1c0>
 8004892:	2b00      	cmp	r3, #0
 8004894:	d002      	beq.n	800489c <UART_SetConfig+0x1a8>
 8004896:	2b40      	cmp	r3, #64	; 0x40
 8004898:	d006      	beq.n	80048a8 <UART_SetConfig+0x1b4>
 800489a:	e00b      	b.n	80048b4 <UART_SetConfig+0x1c0>
 800489c:	2300      	movs	r3, #0
 800489e:	77fb      	strb	r3, [r7, #31]
 80048a0:	e0cc      	b.n	8004a3c <UART_SetConfig+0x348>
 80048a2:	2302      	movs	r3, #2
 80048a4:	77fb      	strb	r3, [r7, #31]
 80048a6:	e0c9      	b.n	8004a3c <UART_SetConfig+0x348>
 80048a8:	2304      	movs	r3, #4
 80048aa:	77fb      	strb	r3, [r7, #31]
 80048ac:	e0c6      	b.n	8004a3c <UART_SetConfig+0x348>
 80048ae:	2308      	movs	r3, #8
 80048b0:	77fb      	strb	r3, [r7, #31]
 80048b2:	e0c3      	b.n	8004a3c <UART_SetConfig+0x348>
 80048b4:	2310      	movs	r3, #16
 80048b6:	77fb      	strb	r3, [r7, #31]
 80048b8:	e0c0      	b.n	8004a3c <UART_SetConfig+0x348>
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	4a44      	ldr	r2, [pc, #272]	; (80049d0 <UART_SetConfig+0x2dc>)
 80048c0:	4293      	cmp	r3, r2
 80048c2:	d125      	bne.n	8004910 <UART_SetConfig+0x21c>
 80048c4:	4b3e      	ldr	r3, [pc, #248]	; (80049c0 <UART_SetConfig+0x2cc>)
 80048c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80048ce:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80048d2:	d017      	beq.n	8004904 <UART_SetConfig+0x210>
 80048d4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80048d8:	d817      	bhi.n	800490a <UART_SetConfig+0x216>
 80048da:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80048de:	d00b      	beq.n	80048f8 <UART_SetConfig+0x204>
 80048e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80048e4:	d811      	bhi.n	800490a <UART_SetConfig+0x216>
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d003      	beq.n	80048f2 <UART_SetConfig+0x1fe>
 80048ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80048ee:	d006      	beq.n	80048fe <UART_SetConfig+0x20a>
 80048f0:	e00b      	b.n	800490a <UART_SetConfig+0x216>
 80048f2:	2300      	movs	r3, #0
 80048f4:	77fb      	strb	r3, [r7, #31]
 80048f6:	e0a1      	b.n	8004a3c <UART_SetConfig+0x348>
 80048f8:	2302      	movs	r3, #2
 80048fa:	77fb      	strb	r3, [r7, #31]
 80048fc:	e09e      	b.n	8004a3c <UART_SetConfig+0x348>
 80048fe:	2304      	movs	r3, #4
 8004900:	77fb      	strb	r3, [r7, #31]
 8004902:	e09b      	b.n	8004a3c <UART_SetConfig+0x348>
 8004904:	2308      	movs	r3, #8
 8004906:	77fb      	strb	r3, [r7, #31]
 8004908:	e098      	b.n	8004a3c <UART_SetConfig+0x348>
 800490a:	2310      	movs	r3, #16
 800490c:	77fb      	strb	r3, [r7, #31]
 800490e:	e095      	b.n	8004a3c <UART_SetConfig+0x348>
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	4a2f      	ldr	r2, [pc, #188]	; (80049d4 <UART_SetConfig+0x2e0>)
 8004916:	4293      	cmp	r3, r2
 8004918:	d125      	bne.n	8004966 <UART_SetConfig+0x272>
 800491a:	4b29      	ldr	r3, [pc, #164]	; (80049c0 <UART_SetConfig+0x2cc>)
 800491c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004920:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004924:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004928:	d017      	beq.n	800495a <UART_SetConfig+0x266>
 800492a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800492e:	d817      	bhi.n	8004960 <UART_SetConfig+0x26c>
 8004930:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004934:	d00b      	beq.n	800494e <UART_SetConfig+0x25a>
 8004936:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800493a:	d811      	bhi.n	8004960 <UART_SetConfig+0x26c>
 800493c:	2b00      	cmp	r3, #0
 800493e:	d003      	beq.n	8004948 <UART_SetConfig+0x254>
 8004940:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004944:	d006      	beq.n	8004954 <UART_SetConfig+0x260>
 8004946:	e00b      	b.n	8004960 <UART_SetConfig+0x26c>
 8004948:	2301      	movs	r3, #1
 800494a:	77fb      	strb	r3, [r7, #31]
 800494c:	e076      	b.n	8004a3c <UART_SetConfig+0x348>
 800494e:	2302      	movs	r3, #2
 8004950:	77fb      	strb	r3, [r7, #31]
 8004952:	e073      	b.n	8004a3c <UART_SetConfig+0x348>
 8004954:	2304      	movs	r3, #4
 8004956:	77fb      	strb	r3, [r7, #31]
 8004958:	e070      	b.n	8004a3c <UART_SetConfig+0x348>
 800495a:	2308      	movs	r3, #8
 800495c:	77fb      	strb	r3, [r7, #31]
 800495e:	e06d      	b.n	8004a3c <UART_SetConfig+0x348>
 8004960:	2310      	movs	r3, #16
 8004962:	77fb      	strb	r3, [r7, #31]
 8004964:	e06a      	b.n	8004a3c <UART_SetConfig+0x348>
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	4a1b      	ldr	r2, [pc, #108]	; (80049d8 <UART_SetConfig+0x2e4>)
 800496c:	4293      	cmp	r3, r2
 800496e:	d138      	bne.n	80049e2 <UART_SetConfig+0x2ee>
 8004970:	4b13      	ldr	r3, [pc, #76]	; (80049c0 <UART_SetConfig+0x2cc>)
 8004972:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004976:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800497a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800497e:	d017      	beq.n	80049b0 <UART_SetConfig+0x2bc>
 8004980:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004984:	d82a      	bhi.n	80049dc <UART_SetConfig+0x2e8>
 8004986:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800498a:	d00b      	beq.n	80049a4 <UART_SetConfig+0x2b0>
 800498c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004990:	d824      	bhi.n	80049dc <UART_SetConfig+0x2e8>
 8004992:	2b00      	cmp	r3, #0
 8004994:	d003      	beq.n	800499e <UART_SetConfig+0x2aa>
 8004996:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800499a:	d006      	beq.n	80049aa <UART_SetConfig+0x2b6>
 800499c:	e01e      	b.n	80049dc <UART_SetConfig+0x2e8>
 800499e:	2300      	movs	r3, #0
 80049a0:	77fb      	strb	r3, [r7, #31]
 80049a2:	e04b      	b.n	8004a3c <UART_SetConfig+0x348>
 80049a4:	2302      	movs	r3, #2
 80049a6:	77fb      	strb	r3, [r7, #31]
 80049a8:	e048      	b.n	8004a3c <UART_SetConfig+0x348>
 80049aa:	2304      	movs	r3, #4
 80049ac:	77fb      	strb	r3, [r7, #31]
 80049ae:	e045      	b.n	8004a3c <UART_SetConfig+0x348>
 80049b0:	2308      	movs	r3, #8
 80049b2:	77fb      	strb	r3, [r7, #31]
 80049b4:	e042      	b.n	8004a3c <UART_SetConfig+0x348>
 80049b6:	bf00      	nop
 80049b8:	efff69f3 	.word	0xefff69f3
 80049bc:	40011000 	.word	0x40011000
 80049c0:	40023800 	.word	0x40023800
 80049c4:	40004400 	.word	0x40004400
 80049c8:	40004800 	.word	0x40004800
 80049cc:	40004c00 	.word	0x40004c00
 80049d0:	40005000 	.word	0x40005000
 80049d4:	40011400 	.word	0x40011400
 80049d8:	40007800 	.word	0x40007800
 80049dc:	2310      	movs	r3, #16
 80049de:	77fb      	strb	r3, [r7, #31]
 80049e0:	e02c      	b.n	8004a3c <UART_SetConfig+0x348>
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	4a72      	ldr	r2, [pc, #456]	; (8004bb0 <UART_SetConfig+0x4bc>)
 80049e8:	4293      	cmp	r3, r2
 80049ea:	d125      	bne.n	8004a38 <UART_SetConfig+0x344>
 80049ec:	4b71      	ldr	r3, [pc, #452]	; (8004bb4 <UART_SetConfig+0x4c0>)
 80049ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049f2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80049f6:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80049fa:	d017      	beq.n	8004a2c <UART_SetConfig+0x338>
 80049fc:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004a00:	d817      	bhi.n	8004a32 <UART_SetConfig+0x33e>
 8004a02:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004a06:	d00b      	beq.n	8004a20 <UART_SetConfig+0x32c>
 8004a08:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004a0c:	d811      	bhi.n	8004a32 <UART_SetConfig+0x33e>
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d003      	beq.n	8004a1a <UART_SetConfig+0x326>
 8004a12:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004a16:	d006      	beq.n	8004a26 <UART_SetConfig+0x332>
 8004a18:	e00b      	b.n	8004a32 <UART_SetConfig+0x33e>
 8004a1a:	2300      	movs	r3, #0
 8004a1c:	77fb      	strb	r3, [r7, #31]
 8004a1e:	e00d      	b.n	8004a3c <UART_SetConfig+0x348>
 8004a20:	2302      	movs	r3, #2
 8004a22:	77fb      	strb	r3, [r7, #31]
 8004a24:	e00a      	b.n	8004a3c <UART_SetConfig+0x348>
 8004a26:	2304      	movs	r3, #4
 8004a28:	77fb      	strb	r3, [r7, #31]
 8004a2a:	e007      	b.n	8004a3c <UART_SetConfig+0x348>
 8004a2c:	2308      	movs	r3, #8
 8004a2e:	77fb      	strb	r3, [r7, #31]
 8004a30:	e004      	b.n	8004a3c <UART_SetConfig+0x348>
 8004a32:	2310      	movs	r3, #16
 8004a34:	77fb      	strb	r3, [r7, #31]
 8004a36:	e001      	b.n	8004a3c <UART_SetConfig+0x348>
 8004a38:	2310      	movs	r3, #16
 8004a3a:	77fb      	strb	r3, [r7, #31]

	if (huart->Init.OverSampling == UART_OVERSAMPLING_8) {
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	69db      	ldr	r3, [r3, #28]
 8004a40:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004a44:	d15b      	bne.n	8004afe <UART_SetConfig+0x40a>
		switch (clocksource) {
 8004a46:	7ffb      	ldrb	r3, [r7, #31]
 8004a48:	2b08      	cmp	r3, #8
 8004a4a:	d828      	bhi.n	8004a9e <UART_SetConfig+0x3aa>
 8004a4c:	a201      	add	r2, pc, #4	; (adr r2, 8004a54 <UART_SetConfig+0x360>)
 8004a4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a52:	bf00      	nop
 8004a54:	08004a79 	.word	0x08004a79
 8004a58:	08004a81 	.word	0x08004a81
 8004a5c:	08004a89 	.word	0x08004a89
 8004a60:	08004a9f 	.word	0x08004a9f
 8004a64:	08004a8f 	.word	0x08004a8f
 8004a68:	08004a9f 	.word	0x08004a9f
 8004a6c:	08004a9f 	.word	0x08004a9f
 8004a70:	08004a9f 	.word	0x08004a9f
 8004a74:	08004a97 	.word	0x08004a97
		case UART_CLOCKSOURCE_PCLK1:
			pclk = HAL_RCC_GetPCLK1Freq();
 8004a78:	f7fd fffa 	bl	8002a70 <HAL_RCC_GetPCLK1Freq>
 8004a7c:	61b8      	str	r0, [r7, #24]
			break;
 8004a7e:	e013      	b.n	8004aa8 <UART_SetConfig+0x3b4>
		case UART_CLOCKSOURCE_PCLK2:
			pclk = HAL_RCC_GetPCLK2Freq();
 8004a80:	f7fe f80a 	bl	8002a98 <HAL_RCC_GetPCLK2Freq>
 8004a84:	61b8      	str	r0, [r7, #24]
			break;
 8004a86:	e00f      	b.n	8004aa8 <UART_SetConfig+0x3b4>
		case UART_CLOCKSOURCE_HSI:
			pclk = (uint32_t) HSI_VALUE;
 8004a88:	4b4b      	ldr	r3, [pc, #300]	; (8004bb8 <UART_SetConfig+0x4c4>)
 8004a8a:	61bb      	str	r3, [r7, #24]
			break;
 8004a8c:	e00c      	b.n	8004aa8 <UART_SetConfig+0x3b4>
		case UART_CLOCKSOURCE_SYSCLK:
			pclk = HAL_RCC_GetSysClockFreq();
 8004a8e:	f7fd fedd 	bl	800284c <HAL_RCC_GetSysClockFreq>
 8004a92:	61b8      	str	r0, [r7, #24]
			break;
 8004a94:	e008      	b.n	8004aa8 <UART_SetConfig+0x3b4>
		case UART_CLOCKSOURCE_LSE:
			pclk = (uint32_t) LSE_VALUE;
 8004a96:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004a9a:	61bb      	str	r3, [r7, #24]
			break;
 8004a9c:	e004      	b.n	8004aa8 <UART_SetConfig+0x3b4>
		default:
			pclk = 0U;
 8004a9e:	2300      	movs	r3, #0
 8004aa0:	61bb      	str	r3, [r7, #24]
			ret = HAL_ERROR;
 8004aa2:	2301      	movs	r3, #1
 8004aa4:	77bb      	strb	r3, [r7, #30]
			break;
 8004aa6:	bf00      	nop
		}

		/* USARTDIV must be greater than or equal to 0d16 */
		if (pclk != 0U) {
 8004aa8:	69bb      	ldr	r3, [r7, #24]
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d074      	beq.n	8004b98 <UART_SetConfig+0x4a4>
			usartdiv = (uint32_t) (UART_DIV_SAMPLING8(pclk,
 8004aae:	69bb      	ldr	r3, [r7, #24]
 8004ab0:	005a      	lsls	r2, r3, #1
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	685b      	ldr	r3, [r3, #4]
 8004ab6:	085b      	lsrs	r3, r3, #1
 8004ab8:	441a      	add	r2, r3
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	685b      	ldr	r3, [r3, #4]
 8004abe:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ac2:	613b      	str	r3, [r7, #16]
					huart->Init.BaudRate));
			if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX)) {
 8004ac4:	693b      	ldr	r3, [r7, #16]
 8004ac6:	2b0f      	cmp	r3, #15
 8004ac8:	d916      	bls.n	8004af8 <UART_SetConfig+0x404>
 8004aca:	693b      	ldr	r3, [r7, #16]
 8004acc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ad0:	d212      	bcs.n	8004af8 <UART_SetConfig+0x404>
				brrtemp = (uint16_t) (usartdiv & 0xFFF0U);
 8004ad2:	693b      	ldr	r3, [r7, #16]
 8004ad4:	b29b      	uxth	r3, r3
 8004ad6:	f023 030f 	bic.w	r3, r3, #15
 8004ada:	81fb      	strh	r3, [r7, #14]
				brrtemp |= (uint16_t) ((usartdiv & (uint16_t) 0x000FU) >> 1U);
 8004adc:	693b      	ldr	r3, [r7, #16]
 8004ade:	085b      	lsrs	r3, r3, #1
 8004ae0:	b29b      	uxth	r3, r3
 8004ae2:	f003 0307 	and.w	r3, r3, #7
 8004ae6:	b29a      	uxth	r2, r3
 8004ae8:	89fb      	ldrh	r3, [r7, #14]
 8004aea:	4313      	orrs	r3, r2
 8004aec:	81fb      	strh	r3, [r7, #14]
				huart->Instance->BRR = brrtemp;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	89fa      	ldrh	r2, [r7, #14]
 8004af4:	60da      	str	r2, [r3, #12]
 8004af6:	e04f      	b.n	8004b98 <UART_SetConfig+0x4a4>
			} else {
				ret = HAL_ERROR;
 8004af8:	2301      	movs	r3, #1
 8004afa:	77bb      	strb	r3, [r7, #30]
 8004afc:	e04c      	b.n	8004b98 <UART_SetConfig+0x4a4>
			}
		}
	} else {
		switch (clocksource) {
 8004afe:	7ffb      	ldrb	r3, [r7, #31]
 8004b00:	2b08      	cmp	r3, #8
 8004b02:	d828      	bhi.n	8004b56 <UART_SetConfig+0x462>
 8004b04:	a201      	add	r2, pc, #4	; (adr r2, 8004b0c <UART_SetConfig+0x418>)
 8004b06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b0a:	bf00      	nop
 8004b0c:	08004b31 	.word	0x08004b31
 8004b10:	08004b39 	.word	0x08004b39
 8004b14:	08004b41 	.word	0x08004b41
 8004b18:	08004b57 	.word	0x08004b57
 8004b1c:	08004b47 	.word	0x08004b47
 8004b20:	08004b57 	.word	0x08004b57
 8004b24:	08004b57 	.word	0x08004b57
 8004b28:	08004b57 	.word	0x08004b57
 8004b2c:	08004b4f 	.word	0x08004b4f
		case UART_CLOCKSOURCE_PCLK1:
			pclk = HAL_RCC_GetPCLK1Freq();
 8004b30:	f7fd ff9e 	bl	8002a70 <HAL_RCC_GetPCLK1Freq>
 8004b34:	61b8      	str	r0, [r7, #24]
			break;
 8004b36:	e013      	b.n	8004b60 <UART_SetConfig+0x46c>
		case UART_CLOCKSOURCE_PCLK2:
			pclk = HAL_RCC_GetPCLK2Freq();
 8004b38:	f7fd ffae 	bl	8002a98 <HAL_RCC_GetPCLK2Freq>
 8004b3c:	61b8      	str	r0, [r7, #24]
			break;
 8004b3e:	e00f      	b.n	8004b60 <UART_SetConfig+0x46c>
		case UART_CLOCKSOURCE_HSI:
			pclk = (uint32_t) HSI_VALUE;
 8004b40:	4b1d      	ldr	r3, [pc, #116]	; (8004bb8 <UART_SetConfig+0x4c4>)
 8004b42:	61bb      	str	r3, [r7, #24]
			break;
 8004b44:	e00c      	b.n	8004b60 <UART_SetConfig+0x46c>
		case UART_CLOCKSOURCE_SYSCLK:
			pclk = HAL_RCC_GetSysClockFreq();
 8004b46:	f7fd fe81 	bl	800284c <HAL_RCC_GetSysClockFreq>
 8004b4a:	61b8      	str	r0, [r7, #24]
			break;
 8004b4c:	e008      	b.n	8004b60 <UART_SetConfig+0x46c>
		case UART_CLOCKSOURCE_LSE:
			pclk = (uint32_t) LSE_VALUE;
 8004b4e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004b52:	61bb      	str	r3, [r7, #24]
			break;
 8004b54:	e004      	b.n	8004b60 <UART_SetConfig+0x46c>
		default:
			pclk = 0U;
 8004b56:	2300      	movs	r3, #0
 8004b58:	61bb      	str	r3, [r7, #24]
			ret = HAL_ERROR;
 8004b5a:	2301      	movs	r3, #1
 8004b5c:	77bb      	strb	r3, [r7, #30]
			break;
 8004b5e:	bf00      	nop
		}

		if (pclk != 0U) {
 8004b60:	69bb      	ldr	r3, [r7, #24]
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d018      	beq.n	8004b98 <UART_SetConfig+0x4a4>
			/* USARTDIV must be greater than or equal to 0d16 */
			usartdiv = (uint32_t) (UART_DIV_SAMPLING16(pclk,
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	685b      	ldr	r3, [r3, #4]
 8004b6a:	085a      	lsrs	r2, r3, #1
 8004b6c:	69bb      	ldr	r3, [r7, #24]
 8004b6e:	441a      	add	r2, r3
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	685b      	ldr	r3, [r3, #4]
 8004b74:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b78:	613b      	str	r3, [r7, #16]
					huart->Init.BaudRate));
			if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX)) {
 8004b7a:	693b      	ldr	r3, [r7, #16]
 8004b7c:	2b0f      	cmp	r3, #15
 8004b7e:	d909      	bls.n	8004b94 <UART_SetConfig+0x4a0>
 8004b80:	693b      	ldr	r3, [r7, #16]
 8004b82:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b86:	d205      	bcs.n	8004b94 <UART_SetConfig+0x4a0>
				huart->Instance->BRR = (uint16_t) usartdiv;
 8004b88:	693b      	ldr	r3, [r7, #16]
 8004b8a:	b29a      	uxth	r2, r3
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	60da      	str	r2, [r3, #12]
 8004b92:	e001      	b.n	8004b98 <UART_SetConfig+0x4a4>
			} else {
				ret = HAL_ERROR;
 8004b94:	2301      	movs	r3, #1
 8004b96:	77bb      	strb	r3, [r7, #30]
			}
		}
	}

	/* Clear ISR function pointers */
	huart->RxISR = NULL;
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	2200      	movs	r2, #0
 8004b9c:	669a      	str	r2, [r3, #104]	; 0x68
	huart->TxISR = NULL;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	2200      	movs	r2, #0
 8004ba2:	66da      	str	r2, [r3, #108]	; 0x6c

	return ret;
 8004ba4:	7fbb      	ldrb	r3, [r7, #30]
}
 8004ba6:	4618      	mov	r0, r3
 8004ba8:	3720      	adds	r7, #32
 8004baa:	46bd      	mov	sp, r7
 8004bac:	bd80      	pop	{r7, pc}
 8004bae:	bf00      	nop
 8004bb0:	40007c00 	.word	0x40007c00
 8004bb4:	40023800 	.word	0x40023800
 8004bb8:	00f42400 	.word	0x00f42400

08004bbc <UART_AdvFeatureConfig>:
/**
 * @brief Configure the UART peripheral advanced features.
 * @param huart UART handle.
 * @retval None
 */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart) {
 8004bbc:	b480      	push	{r7}
 8004bbe:	b083      	sub	sp, #12
 8004bc0:	af00      	add	r7, sp, #0
 8004bc2:	6078      	str	r0, [r7, #4]
	/* Check whether the set of advanced features to configure is properly set */
	assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

	/* if required, configure TX pin active level inversion */
	if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit,
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bc8:	f003 0301 	and.w	r3, r3, #1
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d00a      	beq.n	8004be6 <UART_AdvFeatureConfig+0x2a>
			UART_ADVFEATURE_TXINVERT_INIT)) {
		assert_param(
				IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
		MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV,
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	685b      	ldr	r3, [r3, #4]
 8004bd6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	430a      	orrs	r2, r1
 8004be4:	605a      	str	r2, [r3, #4]
				huart->AdvancedInit.TxPinLevelInvert);
	}

	/* if required, configure RX pin active level inversion */
	if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit,
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bea:	f003 0302 	and.w	r3, r3, #2
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d00a      	beq.n	8004c08 <UART_AdvFeatureConfig+0x4c>
			UART_ADVFEATURE_RXINVERT_INIT)) {
		assert_param(
				IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
		MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV,
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	685b      	ldr	r3, [r3, #4]
 8004bf8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	430a      	orrs	r2, r1
 8004c06:	605a      	str	r2, [r3, #4]
				huart->AdvancedInit.RxPinLevelInvert);
	}

	/* if required, configure data inversion */
	if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit,
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c0c:	f003 0304 	and.w	r3, r3, #4
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d00a      	beq.n	8004c2a <UART_AdvFeatureConfig+0x6e>
			UART_ADVFEATURE_DATAINVERT_INIT)) {
		assert_param(
				IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
		MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV,
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	685b      	ldr	r3, [r3, #4]
 8004c1a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	430a      	orrs	r2, r1
 8004c28:	605a      	str	r2, [r3, #4]
				huart->AdvancedInit.DataInvert);
	}

	/* if required, configure RX/TX pins swap */
	if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit,
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c2e:	f003 0308 	and.w	r3, r3, #8
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d00a      	beq.n	8004c4c <UART_AdvFeatureConfig+0x90>
			UART_ADVFEATURE_SWAP_INIT)) {
		assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
		MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP,
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	685b      	ldr	r3, [r3, #4]
 8004c3c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	430a      	orrs	r2, r1
 8004c4a:	605a      	str	r2, [r3, #4]
				huart->AdvancedInit.Swap);
	}

	/* if required, configure RX overrun detection disabling */
	if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit,
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c50:	f003 0310 	and.w	r3, r3, #16
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d00a      	beq.n	8004c6e <UART_AdvFeatureConfig+0xb2>
			UART_ADVFEATURE_RXOVERRUNDISABLE_INIT)) {
		assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
		MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS,
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	689b      	ldr	r3, [r3, #8]
 8004c5e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	430a      	orrs	r2, r1
 8004c6c:	609a      	str	r2, [r3, #8]
				huart->AdvancedInit.OverrunDisable);
	}

	/* if required, configure DMA disabling on reception error */
	if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit,
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c72:	f003 0320 	and.w	r3, r3, #32
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d00a      	beq.n	8004c90 <UART_AdvFeatureConfig+0xd4>
			UART_ADVFEATURE_DMADISABLEONERROR_INIT)) {
		assert_param(
				IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
		MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE,
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	689b      	ldr	r3, [r3, #8]
 8004c80:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	430a      	orrs	r2, r1
 8004c8e:	609a      	str	r2, [r3, #8]
				huart->AdvancedInit.DMADisableonRxError);
	}

	/* if required, configure auto Baud rate detection scheme */
	if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit,
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d01a      	beq.n	8004cd2 <UART_AdvFeatureConfig+0x116>
			UART_ADVFEATURE_AUTOBAUDRATE_INIT)) {
		assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
		assert_param(
				IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
		MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN,
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	685b      	ldr	r3, [r3, #4]
 8004ca2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	430a      	orrs	r2, r1
 8004cb0:	605a      	str	r2, [r3, #4]
				huart->AdvancedInit.AutoBaudRateEnable);
		/* set auto Baudrate detection parameters if detection is enabled */
		if (huart->AdvancedInit.AutoBaudRateEnable
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cb6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004cba:	d10a      	bne.n	8004cd2 <UART_AdvFeatureConfig+0x116>
				== UART_ADVFEATURE_AUTOBAUDRATE_ENABLE) {
			assert_param(
					IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
			MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE,
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	685b      	ldr	r3, [r3, #4]
 8004cc2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	430a      	orrs	r2, r1
 8004cd0:	605a      	str	r2, [r3, #4]
					huart->AdvancedInit.AutoBaudRateMode);
		}
	}

	/* if required, configure MSB first on communication line */
	if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit,
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cd6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d00a      	beq.n	8004cf4 <UART_AdvFeatureConfig+0x138>
			UART_ADVFEATURE_MSBFIRST_INIT)) {
		assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
		MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST,
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	685b      	ldr	r3, [r3, #4]
 8004ce4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	430a      	orrs	r2, r1
 8004cf2:	605a      	str	r2, [r3, #4]
				huart->AdvancedInit.MSBFirst);
	}
}
 8004cf4:	bf00      	nop
 8004cf6:	370c      	adds	r7, #12
 8004cf8:	46bd      	mov	sp, r7
 8004cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cfe:	4770      	bx	lr

08004d00 <UART_CheckIdleState>:
/**
 * @brief Check the UART Idle State.
 * @param huart UART handle.
 * @retval HAL status
 */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart) {
 8004d00:	b580      	push	{r7, lr}
 8004d02:	b086      	sub	sp, #24
 8004d04:	af02      	add	r7, sp, #8
 8004d06:	6078      	str	r0, [r7, #4]
	uint32_t tickstart;

	/* Initialize the UART ErrorCode */
	huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	2200      	movs	r2, #0
 8004d0c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

	/* Init tickstart for timeout management */
	tickstart = HAL_GetTick();
 8004d10:	f7fc fa58 	bl	80011c4 <HAL_GetTick>
 8004d14:	60f8      	str	r0, [r7, #12]

	/* Check if the Transmitter is enabled */
	if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE) {
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	f003 0308 	and.w	r3, r3, #8
 8004d20:	2b08      	cmp	r3, #8
 8004d22:	d10e      	bne.n	8004d42 <UART_CheckIdleState+0x42>
		/* Wait until TEACK flag is set */
		if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET,
 8004d24:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004d28:	9300      	str	r3, [sp, #0]
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	2200      	movs	r2, #0
 8004d2e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004d32:	6878      	ldr	r0, [r7, #4]
 8004d34:	f000 f831 	bl	8004d9a <UART_WaitOnFlagUntilTimeout>
 8004d38:	4603      	mov	r3, r0
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d001      	beq.n	8004d42 <UART_CheckIdleState+0x42>
				tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK) {
			/* Timeout occurred */
			return HAL_TIMEOUT;
 8004d3e:	2303      	movs	r3, #3
 8004d40:	e027      	b.n	8004d92 <UART_CheckIdleState+0x92>
		}
	}
#if defined(USART_ISR_REACK)

	/* Check if the Receiver is enabled */
	if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE) {
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	f003 0304 	and.w	r3, r3, #4
 8004d4c:	2b04      	cmp	r3, #4
 8004d4e:	d10e      	bne.n	8004d6e <UART_CheckIdleState+0x6e>
		/* Wait until REACK flag is set */
		if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET,
 8004d50:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004d54:	9300      	str	r3, [sp, #0]
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	2200      	movs	r2, #0
 8004d5a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004d5e:	6878      	ldr	r0, [r7, #4]
 8004d60:	f000 f81b 	bl	8004d9a <UART_WaitOnFlagUntilTimeout>
 8004d64:	4603      	mov	r3, r0
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d001      	beq.n	8004d6e <UART_CheckIdleState+0x6e>
				tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK) {
			/* Timeout occurred */
			return HAL_TIMEOUT;
 8004d6a:	2303      	movs	r3, #3
 8004d6c:	e011      	b.n	8004d92 <UART_CheckIdleState+0x92>
		}
	}
#endif /* USART_ISR_REACK */

	/* Initialize the UART State */
	huart->gState = HAL_UART_STATE_READY;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	2220      	movs	r2, #32
 8004d72:	67da      	str	r2, [r3, #124]	; 0x7c
	huart->RxState = HAL_UART_STATE_READY;
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	2220      	movs	r2, #32
 8004d78:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	2200      	movs	r2, #0
 8004d80:	661a      	str	r2, [r3, #96]	; 0x60
	huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	2200      	movs	r2, #0
 8004d86:	665a      	str	r2, [r3, #100]	; 0x64

	__HAL_UNLOCK(huart);
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	2200      	movs	r2, #0
 8004d8c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

	return HAL_OK;
 8004d90:	2300      	movs	r3, #0
}
 8004d92:	4618      	mov	r0, r3
 8004d94:	3710      	adds	r7, #16
 8004d96:	46bd      	mov	sp, r7
 8004d98:	bd80      	pop	{r7, pc}

08004d9a <UART_WaitOnFlagUntilTimeout>:
 * @param Tickstart Tick start value
 * @param Timeout   Timeout duration
 * @retval HAL status
 */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart,
		uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout) {
 8004d9a:	b580      	push	{r7, lr}
 8004d9c:	b09c      	sub	sp, #112	; 0x70
 8004d9e:	af00      	add	r7, sp, #0
 8004da0:	60f8      	str	r0, [r7, #12]
 8004da2:	60b9      	str	r1, [r7, #8]
 8004da4:	603b      	str	r3, [r7, #0]
 8004da6:	4613      	mov	r3, r2
 8004da8:	71fb      	strb	r3, [r7, #7]
	/* Wait until flag is set */
	while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) {
 8004daa:	e0a7      	b.n	8004efc <UART_WaitOnFlagUntilTimeout+0x162>
		/* Check for the Timeout */
		if (Timeout != HAL_MAX_DELAY) {
 8004dac:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004dae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004db2:	f000 80a3 	beq.w	8004efc <UART_WaitOnFlagUntilTimeout+0x162>
			if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) {
 8004db6:	f7fc fa05 	bl	80011c4 <HAL_GetTick>
 8004dba:	4602      	mov	r2, r0
 8004dbc:	683b      	ldr	r3, [r7, #0]
 8004dbe:	1ad3      	subs	r3, r2, r3
 8004dc0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004dc2:	429a      	cmp	r2, r3
 8004dc4:	d302      	bcc.n	8004dcc <UART_WaitOnFlagUntilTimeout+0x32>
 8004dc6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d13f      	bne.n	8004e4c <UART_WaitOnFlagUntilTimeout+0xb2>
				/* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
				 interrupts for the interrupt process */
				ATOMIC_CLEAR_BIT(huart->Instance->CR1,
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dd2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004dd4:	e853 3f00 	ldrex	r3, [r3]
 8004dd8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004dda:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ddc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004de0:	667b      	str	r3, [r7, #100]	; 0x64
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	461a      	mov	r2, r3
 8004de8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004dea:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004dec:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dee:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004df0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004df2:	e841 2300 	strex	r3, r2, [r1]
 8004df6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004df8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d1e6      	bne.n	8004dcc <UART_WaitOnFlagUntilTimeout+0x32>
						(USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
				ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	3308      	adds	r3, #8
 8004e04:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e08:	e853 3f00 	ldrex	r3, [r3]
 8004e0c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004e0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e10:	f023 0301 	bic.w	r3, r3, #1
 8004e14:	663b      	str	r3, [r7, #96]	; 0x60
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	3308      	adds	r3, #8
 8004e1c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004e1e:	64ba      	str	r2, [r7, #72]	; 0x48
 8004e20:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e22:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004e24:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004e26:	e841 2300 	strex	r3, r2, [r1]
 8004e2a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004e2c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d1e5      	bne.n	8004dfe <UART_WaitOnFlagUntilTimeout+0x64>

				huart->gState = HAL_UART_STATE_READY;
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	2220      	movs	r2, #32
 8004e36:	67da      	str	r2, [r3, #124]	; 0x7c
				huart->RxState = HAL_UART_STATE_READY;
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	2220      	movs	r2, #32
 8004e3c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

				__HAL_UNLOCK(huart);
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	2200      	movs	r2, #0
 8004e44:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

				return HAL_TIMEOUT;
 8004e48:	2303      	movs	r3, #3
 8004e4a:	e068      	b.n	8004f1e <UART_WaitOnFlagUntilTimeout+0x184>
			}

			if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) {
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	f003 0304 	and.w	r3, r3, #4
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d050      	beq.n	8004efc <UART_WaitOnFlagUntilTimeout+0x162>
				if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET) {
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	69db      	ldr	r3, [r3, #28]
 8004e60:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004e64:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004e68:	d148      	bne.n	8004efc <UART_WaitOnFlagUntilTimeout+0x162>
					/* Clear Receiver Timeout flag*/
					__HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004e72:	621a      	str	r2, [r3, #32]

					/* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
					 interrupts for the interrupt process */
					ATOMIC_CLEAR_BIT(huart->Instance->CR1,
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e7c:	e853 3f00 	ldrex	r3, [r3]
 8004e80:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004e82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e84:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004e88:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	461a      	mov	r2, r3
 8004e90:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e92:	637b      	str	r3, [r7, #52]	; 0x34
 8004e94:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e96:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004e98:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004e9a:	e841 2300 	strex	r3, r2, [r1]
 8004e9e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004ea0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d1e6      	bne.n	8004e74 <UART_WaitOnFlagUntilTimeout+0xda>
							(USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
					ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	3308      	adds	r3, #8
 8004eac:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004eae:	697b      	ldr	r3, [r7, #20]
 8004eb0:	e853 3f00 	ldrex	r3, [r3]
 8004eb4:	613b      	str	r3, [r7, #16]
   return(result);
 8004eb6:	693b      	ldr	r3, [r7, #16]
 8004eb8:	f023 0301 	bic.w	r3, r3, #1
 8004ebc:	66bb      	str	r3, [r7, #104]	; 0x68
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	3308      	adds	r3, #8
 8004ec4:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004ec6:	623a      	str	r2, [r7, #32]
 8004ec8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004eca:	69f9      	ldr	r1, [r7, #28]
 8004ecc:	6a3a      	ldr	r2, [r7, #32]
 8004ece:	e841 2300 	strex	r3, r2, [r1]
 8004ed2:	61bb      	str	r3, [r7, #24]
   return(result);
 8004ed4:	69bb      	ldr	r3, [r7, #24]
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d1e5      	bne.n	8004ea6 <UART_WaitOnFlagUntilTimeout+0x10c>

					huart->gState = HAL_UART_STATE_READY;
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	2220      	movs	r2, #32
 8004ede:	67da      	str	r2, [r3, #124]	; 0x7c
					huart->RxState = HAL_UART_STATE_READY;
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	2220      	movs	r2, #32
 8004ee4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
					huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	2220      	movs	r2, #32
 8004eec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

					/* Process Unlocked */
					__HAL_UNLOCK(huart);
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	2200      	movs	r2, #0
 8004ef4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

					return HAL_TIMEOUT;
 8004ef8:	2303      	movs	r3, #3
 8004efa:	e010      	b.n	8004f1e <UART_WaitOnFlagUntilTimeout+0x184>
	while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) {
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	69da      	ldr	r2, [r3, #28]
 8004f02:	68bb      	ldr	r3, [r7, #8]
 8004f04:	4013      	ands	r3, r2
 8004f06:	68ba      	ldr	r2, [r7, #8]
 8004f08:	429a      	cmp	r2, r3
 8004f0a:	bf0c      	ite	eq
 8004f0c:	2301      	moveq	r3, #1
 8004f0e:	2300      	movne	r3, #0
 8004f10:	b2db      	uxtb	r3, r3
 8004f12:	461a      	mov	r2, r3
 8004f14:	79fb      	ldrb	r3, [r7, #7]
 8004f16:	429a      	cmp	r2, r3
 8004f18:	f43f af48 	beq.w	8004dac <UART_WaitOnFlagUntilTimeout+0x12>
				}
			}
		}
	}
	return HAL_OK;
 8004f1c:	2300      	movs	r3, #0
}
 8004f1e:	4618      	mov	r0, r3
 8004f20:	3770      	adds	r7, #112	; 0x70
 8004f22:	46bd      	mov	sp, r7
 8004f24:	bd80      	pop	{r7, pc}
	...

08004f28 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004f28:	b084      	sub	sp, #16
 8004f2a:	b580      	push	{r7, lr}
 8004f2c:	b084      	sub	sp, #16
 8004f2e:	af00      	add	r7, sp, #0
 8004f30:	6078      	str	r0, [r7, #4]
 8004f32:	f107 001c 	add.w	r0, r7, #28
 8004f36:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004f3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f3c:	2b01      	cmp	r3, #1
 8004f3e:	d120      	bne.n	8004f82 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f44:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	68da      	ldr	r2, [r3, #12]
 8004f50:	4b20      	ldr	r3, [pc, #128]	; (8004fd4 <USB_CoreInit+0xac>)
 8004f52:	4013      	ands	r3, r2
 8004f54:	687a      	ldr	r2, [r7, #4]
 8004f56:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	68db      	ldr	r3, [r3, #12]
 8004f5c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004f64:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004f66:	2b01      	cmp	r3, #1
 8004f68:	d105      	bne.n	8004f76 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	68db      	ldr	r3, [r3, #12]
 8004f6e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004f76:	6878      	ldr	r0, [r7, #4]
 8004f78:	f000 fa96 	bl	80054a8 <USB_CoreReset>
 8004f7c:	4603      	mov	r3, r0
 8004f7e:	73fb      	strb	r3, [r7, #15]
 8004f80:	e010      	b.n	8004fa4 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	68db      	ldr	r3, [r3, #12]
 8004f86:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004f8e:	6878      	ldr	r0, [r7, #4]
 8004f90:	f000 fa8a 	bl	80054a8 <USB_CoreReset>
 8004f94:	4603      	mov	r3, r0
 8004f96:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f9c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8004fa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fa6:	2b01      	cmp	r3, #1
 8004fa8:	d10b      	bne.n	8004fc2 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	689b      	ldr	r3, [r3, #8]
 8004fae:	f043 0206 	orr.w	r2, r3, #6
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	689b      	ldr	r3, [r3, #8]
 8004fba:	f043 0220 	orr.w	r2, r3, #32
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004fc2:	7bfb      	ldrb	r3, [r7, #15]
}
 8004fc4:	4618      	mov	r0, r3
 8004fc6:	3710      	adds	r7, #16
 8004fc8:	46bd      	mov	sp, r7
 8004fca:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004fce:	b004      	add	sp, #16
 8004fd0:	4770      	bx	lr
 8004fd2:	bf00      	nop
 8004fd4:	ffbdffbf 	.word	0xffbdffbf

08004fd8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004fd8:	b480      	push	{r7}
 8004fda:	b083      	sub	sp, #12
 8004fdc:	af00      	add	r7, sp, #0
 8004fde:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	689b      	ldr	r3, [r3, #8]
 8004fe4:	f023 0201 	bic.w	r2, r3, #1
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004fec:	2300      	movs	r3, #0
}
 8004fee:	4618      	mov	r0, r3
 8004ff0:	370c      	adds	r7, #12
 8004ff2:	46bd      	mov	sp, r7
 8004ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff8:	4770      	bx	lr

08004ffa <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004ffa:	b580      	push	{r7, lr}
 8004ffc:	b084      	sub	sp, #16
 8004ffe:	af00      	add	r7, sp, #0
 8005000:	6078      	str	r0, [r7, #4]
 8005002:	460b      	mov	r3, r1
 8005004:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005006:	2300      	movs	r3, #0
 8005008:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	68db      	ldr	r3, [r3, #12]
 800500e:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005016:	78fb      	ldrb	r3, [r7, #3]
 8005018:	2b01      	cmp	r3, #1
 800501a:	d115      	bne.n	8005048 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	68db      	ldr	r3, [r3, #12]
 8005020:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005028:	2001      	movs	r0, #1
 800502a:	f7fc f8d7 	bl	80011dc <HAL_Delay>
      ms++;
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	3301      	adds	r3, #1
 8005032:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8005034:	6878      	ldr	r0, [r7, #4]
 8005036:	f000 fa29 	bl	800548c <USB_GetMode>
 800503a:	4603      	mov	r3, r0
 800503c:	2b01      	cmp	r3, #1
 800503e:	d01e      	beq.n	800507e <USB_SetCurrentMode+0x84>
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	2b31      	cmp	r3, #49	; 0x31
 8005044:	d9f0      	bls.n	8005028 <USB_SetCurrentMode+0x2e>
 8005046:	e01a      	b.n	800507e <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005048:	78fb      	ldrb	r3, [r7, #3]
 800504a:	2b00      	cmp	r3, #0
 800504c:	d115      	bne.n	800507a <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	68db      	ldr	r3, [r3, #12]
 8005052:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800505a:	2001      	movs	r0, #1
 800505c:	f7fc f8be 	bl	80011dc <HAL_Delay>
      ms++;
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	3301      	adds	r3, #1
 8005064:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8005066:	6878      	ldr	r0, [r7, #4]
 8005068:	f000 fa10 	bl	800548c <USB_GetMode>
 800506c:	4603      	mov	r3, r0
 800506e:	2b00      	cmp	r3, #0
 8005070:	d005      	beq.n	800507e <USB_SetCurrentMode+0x84>
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	2b31      	cmp	r3, #49	; 0x31
 8005076:	d9f0      	bls.n	800505a <USB_SetCurrentMode+0x60>
 8005078:	e001      	b.n	800507e <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800507a:	2301      	movs	r3, #1
 800507c:	e005      	b.n	800508a <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	2b32      	cmp	r3, #50	; 0x32
 8005082:	d101      	bne.n	8005088 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005084:	2301      	movs	r3, #1
 8005086:	e000      	b.n	800508a <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005088:	2300      	movs	r3, #0
}
 800508a:	4618      	mov	r0, r3
 800508c:	3710      	adds	r7, #16
 800508e:	46bd      	mov	sp, r7
 8005090:	bd80      	pop	{r7, pc}
	...

08005094 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005094:	b084      	sub	sp, #16
 8005096:	b580      	push	{r7, lr}
 8005098:	b086      	sub	sp, #24
 800509a:	af00      	add	r7, sp, #0
 800509c:	6078      	str	r0, [r7, #4]
 800509e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80050a2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80050a6:	2300      	movs	r3, #0
 80050a8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80050ae:	2300      	movs	r3, #0
 80050b0:	613b      	str	r3, [r7, #16]
 80050b2:	e009      	b.n	80050c8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80050b4:	687a      	ldr	r2, [r7, #4]
 80050b6:	693b      	ldr	r3, [r7, #16]
 80050b8:	3340      	adds	r3, #64	; 0x40
 80050ba:	009b      	lsls	r3, r3, #2
 80050bc:	4413      	add	r3, r2
 80050be:	2200      	movs	r2, #0
 80050c0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80050c2:	693b      	ldr	r3, [r7, #16]
 80050c4:	3301      	adds	r3, #1
 80050c6:	613b      	str	r3, [r7, #16]
 80050c8:	693b      	ldr	r3, [r7, #16]
 80050ca:	2b0e      	cmp	r3, #14
 80050cc:	d9f2      	bls.n	80050b4 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80050ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d11c      	bne.n	800510e <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050da:	685b      	ldr	r3, [r3, #4]
 80050dc:	68fa      	ldr	r2, [r7, #12]
 80050de:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80050e2:	f043 0302 	orr.w	r3, r3, #2
 80050e6:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050ec:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	601a      	str	r2, [r3, #0]
 800510c:	e005      	b.n	800511a <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005112:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005120:	461a      	mov	r2, r3
 8005122:	2300      	movs	r3, #0
 8005124:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800512c:	4619      	mov	r1, r3
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005134:	461a      	mov	r2, r3
 8005136:	680b      	ldr	r3, [r1, #0]
 8005138:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800513a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800513c:	2b01      	cmp	r3, #1
 800513e:	d10c      	bne.n	800515a <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005140:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005142:	2b00      	cmp	r3, #0
 8005144:	d104      	bne.n	8005150 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005146:	2100      	movs	r1, #0
 8005148:	6878      	ldr	r0, [r7, #4]
 800514a:	f000 f965 	bl	8005418 <USB_SetDevSpeed>
 800514e:	e008      	b.n	8005162 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005150:	2101      	movs	r1, #1
 8005152:	6878      	ldr	r0, [r7, #4]
 8005154:	f000 f960 	bl	8005418 <USB_SetDevSpeed>
 8005158:	e003      	b.n	8005162 <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800515a:	2103      	movs	r1, #3
 800515c:	6878      	ldr	r0, [r7, #4]
 800515e:	f000 f95b 	bl	8005418 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005162:	2110      	movs	r1, #16
 8005164:	6878      	ldr	r0, [r7, #4]
 8005166:	f000 f8f3 	bl	8005350 <USB_FlushTxFifo>
 800516a:	4603      	mov	r3, r0
 800516c:	2b00      	cmp	r3, #0
 800516e:	d001      	beq.n	8005174 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8005170:	2301      	movs	r3, #1
 8005172:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005174:	6878      	ldr	r0, [r7, #4]
 8005176:	f000 f91f 	bl	80053b8 <USB_FlushRxFifo>
 800517a:	4603      	mov	r3, r0
 800517c:	2b00      	cmp	r3, #0
 800517e:	d001      	beq.n	8005184 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8005180:	2301      	movs	r3, #1
 8005182:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800518a:	461a      	mov	r2, r3
 800518c:	2300      	movs	r3, #0
 800518e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005196:	461a      	mov	r2, r3
 8005198:	2300      	movs	r3, #0
 800519a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80051a2:	461a      	mov	r2, r3
 80051a4:	2300      	movs	r3, #0
 80051a6:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80051a8:	2300      	movs	r3, #0
 80051aa:	613b      	str	r3, [r7, #16]
 80051ac:	e043      	b.n	8005236 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80051ae:	693b      	ldr	r3, [r7, #16]
 80051b0:	015a      	lsls	r2, r3, #5
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	4413      	add	r3, r2
 80051b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80051c0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80051c4:	d118      	bne.n	80051f8 <USB_DevInit+0x164>
    {
      if (i == 0U)
 80051c6:	693b      	ldr	r3, [r7, #16]
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d10a      	bne.n	80051e2 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80051cc:	693b      	ldr	r3, [r7, #16]
 80051ce:	015a      	lsls	r2, r3, #5
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	4413      	add	r3, r2
 80051d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051d8:	461a      	mov	r2, r3
 80051da:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80051de:	6013      	str	r3, [r2, #0]
 80051e0:	e013      	b.n	800520a <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80051e2:	693b      	ldr	r3, [r7, #16]
 80051e4:	015a      	lsls	r2, r3, #5
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	4413      	add	r3, r2
 80051ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051ee:	461a      	mov	r2, r3
 80051f0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80051f4:	6013      	str	r3, [r2, #0]
 80051f6:	e008      	b.n	800520a <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80051f8:	693b      	ldr	r3, [r7, #16]
 80051fa:	015a      	lsls	r2, r3, #5
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	4413      	add	r3, r2
 8005200:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005204:	461a      	mov	r2, r3
 8005206:	2300      	movs	r3, #0
 8005208:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800520a:	693b      	ldr	r3, [r7, #16]
 800520c:	015a      	lsls	r2, r3, #5
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	4413      	add	r3, r2
 8005212:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005216:	461a      	mov	r2, r3
 8005218:	2300      	movs	r3, #0
 800521a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800521c:	693b      	ldr	r3, [r7, #16]
 800521e:	015a      	lsls	r2, r3, #5
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	4413      	add	r3, r2
 8005224:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005228:	461a      	mov	r2, r3
 800522a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800522e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005230:	693b      	ldr	r3, [r7, #16]
 8005232:	3301      	adds	r3, #1
 8005234:	613b      	str	r3, [r7, #16]
 8005236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005238:	693a      	ldr	r2, [r7, #16]
 800523a:	429a      	cmp	r2, r3
 800523c:	d3b7      	bcc.n	80051ae <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800523e:	2300      	movs	r3, #0
 8005240:	613b      	str	r3, [r7, #16]
 8005242:	e043      	b.n	80052cc <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005244:	693b      	ldr	r3, [r7, #16]
 8005246:	015a      	lsls	r2, r3, #5
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	4413      	add	r3, r2
 800524c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005256:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800525a:	d118      	bne.n	800528e <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800525c:	693b      	ldr	r3, [r7, #16]
 800525e:	2b00      	cmp	r3, #0
 8005260:	d10a      	bne.n	8005278 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005262:	693b      	ldr	r3, [r7, #16]
 8005264:	015a      	lsls	r2, r3, #5
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	4413      	add	r3, r2
 800526a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800526e:	461a      	mov	r2, r3
 8005270:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005274:	6013      	str	r3, [r2, #0]
 8005276:	e013      	b.n	80052a0 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005278:	693b      	ldr	r3, [r7, #16]
 800527a:	015a      	lsls	r2, r3, #5
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	4413      	add	r3, r2
 8005280:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005284:	461a      	mov	r2, r3
 8005286:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800528a:	6013      	str	r3, [r2, #0]
 800528c:	e008      	b.n	80052a0 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800528e:	693b      	ldr	r3, [r7, #16]
 8005290:	015a      	lsls	r2, r3, #5
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	4413      	add	r3, r2
 8005296:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800529a:	461a      	mov	r2, r3
 800529c:	2300      	movs	r3, #0
 800529e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80052a0:	693b      	ldr	r3, [r7, #16]
 80052a2:	015a      	lsls	r2, r3, #5
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	4413      	add	r3, r2
 80052a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052ac:	461a      	mov	r2, r3
 80052ae:	2300      	movs	r3, #0
 80052b0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80052b2:	693b      	ldr	r3, [r7, #16]
 80052b4:	015a      	lsls	r2, r3, #5
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	4413      	add	r3, r2
 80052ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052be:	461a      	mov	r2, r3
 80052c0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80052c4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80052c6:	693b      	ldr	r3, [r7, #16]
 80052c8:	3301      	adds	r3, #1
 80052ca:	613b      	str	r3, [r7, #16]
 80052cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052ce:	693a      	ldr	r2, [r7, #16]
 80052d0:	429a      	cmp	r2, r3
 80052d2:	d3b7      	bcc.n	8005244 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052da:	691b      	ldr	r3, [r3, #16]
 80052dc:	68fa      	ldr	r2, [r7, #12]
 80052de:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80052e2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80052e6:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	2200      	movs	r2, #0
 80052ec:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80052f4:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80052f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d105      	bne.n	8005308 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	699b      	ldr	r3, [r3, #24]
 8005300:	f043 0210 	orr.w	r2, r3, #16
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	699a      	ldr	r2, [r3, #24]
 800530c:	4b0e      	ldr	r3, [pc, #56]	; (8005348 <USB_DevInit+0x2b4>)
 800530e:	4313      	orrs	r3, r2
 8005310:	687a      	ldr	r2, [r7, #4]
 8005312:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005314:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005316:	2b00      	cmp	r3, #0
 8005318:	d005      	beq.n	8005326 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	699b      	ldr	r3, [r3, #24]
 800531e:	f043 0208 	orr.w	r2, r3, #8
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005326:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005328:	2b01      	cmp	r3, #1
 800532a:	d105      	bne.n	8005338 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	699a      	ldr	r2, [r3, #24]
 8005330:	4b06      	ldr	r3, [pc, #24]	; (800534c <USB_DevInit+0x2b8>)
 8005332:	4313      	orrs	r3, r2
 8005334:	687a      	ldr	r2, [r7, #4]
 8005336:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005338:	7dfb      	ldrb	r3, [r7, #23]
}
 800533a:	4618      	mov	r0, r3
 800533c:	3718      	adds	r7, #24
 800533e:	46bd      	mov	sp, r7
 8005340:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005344:	b004      	add	sp, #16
 8005346:	4770      	bx	lr
 8005348:	803c3800 	.word	0x803c3800
 800534c:	40000004 	.word	0x40000004

08005350 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005350:	b480      	push	{r7}
 8005352:	b085      	sub	sp, #20
 8005354:	af00      	add	r7, sp, #0
 8005356:	6078      	str	r0, [r7, #4]
 8005358:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800535a:	2300      	movs	r3, #0
 800535c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	3301      	adds	r3, #1
 8005362:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	4a13      	ldr	r2, [pc, #76]	; (80053b4 <USB_FlushTxFifo+0x64>)
 8005368:	4293      	cmp	r3, r2
 800536a:	d901      	bls.n	8005370 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800536c:	2303      	movs	r3, #3
 800536e:	e01b      	b.n	80053a8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	691b      	ldr	r3, [r3, #16]
 8005374:	2b00      	cmp	r3, #0
 8005376:	daf2      	bge.n	800535e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005378:	2300      	movs	r3, #0
 800537a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800537c:	683b      	ldr	r3, [r7, #0]
 800537e:	019b      	lsls	r3, r3, #6
 8005380:	f043 0220 	orr.w	r2, r3, #32
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	3301      	adds	r3, #1
 800538c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	4a08      	ldr	r2, [pc, #32]	; (80053b4 <USB_FlushTxFifo+0x64>)
 8005392:	4293      	cmp	r3, r2
 8005394:	d901      	bls.n	800539a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005396:	2303      	movs	r3, #3
 8005398:	e006      	b.n	80053a8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	691b      	ldr	r3, [r3, #16]
 800539e:	f003 0320 	and.w	r3, r3, #32
 80053a2:	2b20      	cmp	r3, #32
 80053a4:	d0f0      	beq.n	8005388 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80053a6:	2300      	movs	r3, #0
}
 80053a8:	4618      	mov	r0, r3
 80053aa:	3714      	adds	r7, #20
 80053ac:	46bd      	mov	sp, r7
 80053ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b2:	4770      	bx	lr
 80053b4:	00030d40 	.word	0x00030d40

080053b8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80053b8:	b480      	push	{r7}
 80053ba:	b085      	sub	sp, #20
 80053bc:	af00      	add	r7, sp, #0
 80053be:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80053c0:	2300      	movs	r3, #0
 80053c2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	3301      	adds	r3, #1
 80053c8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	4a11      	ldr	r2, [pc, #68]	; (8005414 <USB_FlushRxFifo+0x5c>)
 80053ce:	4293      	cmp	r3, r2
 80053d0:	d901      	bls.n	80053d6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80053d2:	2303      	movs	r3, #3
 80053d4:	e018      	b.n	8005408 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	691b      	ldr	r3, [r3, #16]
 80053da:	2b00      	cmp	r3, #0
 80053dc:	daf2      	bge.n	80053c4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80053de:	2300      	movs	r3, #0
 80053e0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	2210      	movs	r2, #16
 80053e6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	3301      	adds	r3, #1
 80053ec:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	4a08      	ldr	r2, [pc, #32]	; (8005414 <USB_FlushRxFifo+0x5c>)
 80053f2:	4293      	cmp	r3, r2
 80053f4:	d901      	bls.n	80053fa <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80053f6:	2303      	movs	r3, #3
 80053f8:	e006      	b.n	8005408 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	691b      	ldr	r3, [r3, #16]
 80053fe:	f003 0310 	and.w	r3, r3, #16
 8005402:	2b10      	cmp	r3, #16
 8005404:	d0f0      	beq.n	80053e8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005406:	2300      	movs	r3, #0
}
 8005408:	4618      	mov	r0, r3
 800540a:	3714      	adds	r7, #20
 800540c:	46bd      	mov	sp, r7
 800540e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005412:	4770      	bx	lr
 8005414:	00030d40 	.word	0x00030d40

08005418 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005418:	b480      	push	{r7}
 800541a:	b085      	sub	sp, #20
 800541c:	af00      	add	r7, sp, #0
 800541e:	6078      	str	r0, [r7, #4]
 8005420:	460b      	mov	r3, r1
 8005422:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800542e:	681a      	ldr	r2, [r3, #0]
 8005430:	78fb      	ldrb	r3, [r7, #3]
 8005432:	68f9      	ldr	r1, [r7, #12]
 8005434:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005438:	4313      	orrs	r3, r2
 800543a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800543c:	2300      	movs	r3, #0
}
 800543e:	4618      	mov	r0, r3
 8005440:	3714      	adds	r7, #20
 8005442:	46bd      	mov	sp, r7
 8005444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005448:	4770      	bx	lr

0800544a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800544a:	b480      	push	{r7}
 800544c:	b085      	sub	sp, #20
 800544e:	af00      	add	r7, sp, #0
 8005450:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	68fa      	ldr	r2, [r7, #12]
 8005460:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005464:	f023 0303 	bic.w	r3, r3, #3
 8005468:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005470:	685b      	ldr	r3, [r3, #4]
 8005472:	68fa      	ldr	r2, [r7, #12]
 8005474:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005478:	f043 0302 	orr.w	r3, r3, #2
 800547c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800547e:	2300      	movs	r3, #0
}
 8005480:	4618      	mov	r0, r3
 8005482:	3714      	adds	r7, #20
 8005484:	46bd      	mov	sp, r7
 8005486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800548a:	4770      	bx	lr

0800548c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800548c:	b480      	push	{r7}
 800548e:	b083      	sub	sp, #12
 8005490:	af00      	add	r7, sp, #0
 8005492:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	695b      	ldr	r3, [r3, #20]
 8005498:	f003 0301 	and.w	r3, r3, #1
}
 800549c:	4618      	mov	r0, r3
 800549e:	370c      	adds	r7, #12
 80054a0:	46bd      	mov	sp, r7
 80054a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a6:	4770      	bx	lr

080054a8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80054a8:	b480      	push	{r7}
 80054aa:	b085      	sub	sp, #20
 80054ac:	af00      	add	r7, sp, #0
 80054ae:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80054b0:	2300      	movs	r3, #0
 80054b2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	3301      	adds	r3, #1
 80054b8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	4a13      	ldr	r2, [pc, #76]	; (800550c <USB_CoreReset+0x64>)
 80054be:	4293      	cmp	r3, r2
 80054c0:	d901      	bls.n	80054c6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80054c2:	2303      	movs	r3, #3
 80054c4:	e01b      	b.n	80054fe <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	691b      	ldr	r3, [r3, #16]
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	daf2      	bge.n	80054b4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80054ce:	2300      	movs	r3, #0
 80054d0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	691b      	ldr	r3, [r3, #16]
 80054d6:	f043 0201 	orr.w	r2, r3, #1
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	3301      	adds	r3, #1
 80054e2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	4a09      	ldr	r2, [pc, #36]	; (800550c <USB_CoreReset+0x64>)
 80054e8:	4293      	cmp	r3, r2
 80054ea:	d901      	bls.n	80054f0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80054ec:	2303      	movs	r3, #3
 80054ee:	e006      	b.n	80054fe <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	691b      	ldr	r3, [r3, #16]
 80054f4:	f003 0301 	and.w	r3, r3, #1
 80054f8:	2b01      	cmp	r3, #1
 80054fa:	d0f0      	beq.n	80054de <USB_CoreReset+0x36>

  return HAL_OK;
 80054fc:	2300      	movs	r3, #0
}
 80054fe:	4618      	mov	r0, r3
 8005500:	3714      	adds	r7, #20
 8005502:	46bd      	mov	sp, r7
 8005504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005508:	4770      	bx	lr
 800550a:	bf00      	nop
 800550c:	00030d40 	.word	0x00030d40

08005510 <__libc_init_array>:
 8005510:	b570      	push	{r4, r5, r6, lr}
 8005512:	4d0d      	ldr	r5, [pc, #52]	; (8005548 <__libc_init_array+0x38>)
 8005514:	4c0d      	ldr	r4, [pc, #52]	; (800554c <__libc_init_array+0x3c>)
 8005516:	1b64      	subs	r4, r4, r5
 8005518:	10a4      	asrs	r4, r4, #2
 800551a:	2600      	movs	r6, #0
 800551c:	42a6      	cmp	r6, r4
 800551e:	d109      	bne.n	8005534 <__libc_init_array+0x24>
 8005520:	4d0b      	ldr	r5, [pc, #44]	; (8005550 <__libc_init_array+0x40>)
 8005522:	4c0c      	ldr	r4, [pc, #48]	; (8005554 <__libc_init_array+0x44>)
 8005524:	f000 f820 	bl	8005568 <_init>
 8005528:	1b64      	subs	r4, r4, r5
 800552a:	10a4      	asrs	r4, r4, #2
 800552c:	2600      	movs	r6, #0
 800552e:	42a6      	cmp	r6, r4
 8005530:	d105      	bne.n	800553e <__libc_init_array+0x2e>
 8005532:	bd70      	pop	{r4, r5, r6, pc}
 8005534:	f855 3b04 	ldr.w	r3, [r5], #4
 8005538:	4798      	blx	r3
 800553a:	3601      	adds	r6, #1
 800553c:	e7ee      	b.n	800551c <__libc_init_array+0xc>
 800553e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005542:	4798      	blx	r3
 8005544:	3601      	adds	r6, #1
 8005546:	e7f2      	b.n	800552e <__libc_init_array+0x1e>
 8005548:	080055a4 	.word	0x080055a4
 800554c:	080055a4 	.word	0x080055a4
 8005550:	080055a4 	.word	0x080055a4
 8005554:	080055a8 	.word	0x080055a8

08005558 <memset>:
 8005558:	4402      	add	r2, r0
 800555a:	4603      	mov	r3, r0
 800555c:	4293      	cmp	r3, r2
 800555e:	d100      	bne.n	8005562 <memset+0xa>
 8005560:	4770      	bx	lr
 8005562:	f803 1b01 	strb.w	r1, [r3], #1
 8005566:	e7f9      	b.n	800555c <memset+0x4>

08005568 <_init>:
 8005568:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800556a:	bf00      	nop
 800556c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800556e:	bc08      	pop	{r3}
 8005570:	469e      	mov	lr, r3
 8005572:	4770      	bx	lr

08005574 <_fini>:
 8005574:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005576:	bf00      	nop
 8005578:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800557a:	bc08      	pop	{r3}
 800557c:	469e      	mov	lr, r3
 800557e:	4770      	bx	lr
