
Lab03.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002cc0  080001f8  080001f8  000101f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000bc  08002eb8  08002eb8  00012eb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002f74  08002f74  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08002f74  08002f74  00012f74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002f7c  08002f7c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002f7c  08002f7c  00012f7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002f80  08002f80  00012f80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002f84  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000a8  2000000c  08002f90  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000b4  08002f90  000200b4  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003a  2**0
                  CONTENTS, READONLY
 13 .debug_info   00009349  00000000  00000000  0002007d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000016dc  00000000  00000000  000293c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000006d8  00000000  00000000  0002aaa8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000535  00000000  00000000  0002b180  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026013  00000000  00000000  0002b6b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000a12f  00000000  00000000  000516c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ed019  00000000  00000000  0005b7f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00001a84  00000000  00000000  00148810  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000059  00000000  00000000  0014a294  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	2000000c 	.word	0x2000000c
 8000214:	00000000 	.word	0x00000000
 8000218:	08002ea0 	.word	0x08002ea0

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000010 	.word	0x20000010
 8000234:	08002ea0 	.word	0x08002ea0

08000238 <strlen>:
 8000238:	4603      	mov	r3, r0
 800023a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800023e:	2a00      	cmp	r2, #0
 8000240:	d1fb      	bne.n	800023a <strlen+0x2>
 8000242:	1a18      	subs	r0, r3, r0
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr

08000248 <__aeabi_uldivmod>:
 8000248:	b953      	cbnz	r3, 8000260 <__aeabi_uldivmod+0x18>
 800024a:	b94a      	cbnz	r2, 8000260 <__aeabi_uldivmod+0x18>
 800024c:	2900      	cmp	r1, #0
 800024e:	bf08      	it	eq
 8000250:	2800      	cmpeq	r0, #0
 8000252:	bf1c      	itt	ne
 8000254:	f04f 31ff 	movne.w	r1, #4294967295
 8000258:	f04f 30ff 	movne.w	r0, #4294967295
 800025c:	f000 b970 	b.w	8000540 <__aeabi_idiv0>
 8000260:	f1ad 0c08 	sub.w	ip, sp, #8
 8000264:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000268:	f000 f806 	bl	8000278 <__udivmoddi4>
 800026c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000270:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000274:	b004      	add	sp, #16
 8000276:	4770      	bx	lr

08000278 <__udivmoddi4>:
 8000278:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800027c:	9e08      	ldr	r6, [sp, #32]
 800027e:	460d      	mov	r5, r1
 8000280:	4604      	mov	r4, r0
 8000282:	460f      	mov	r7, r1
 8000284:	2b00      	cmp	r3, #0
 8000286:	d14a      	bne.n	800031e <__udivmoddi4+0xa6>
 8000288:	428a      	cmp	r2, r1
 800028a:	4694      	mov	ip, r2
 800028c:	d965      	bls.n	800035a <__udivmoddi4+0xe2>
 800028e:	fab2 f382 	clz	r3, r2
 8000292:	b143      	cbz	r3, 80002a6 <__udivmoddi4+0x2e>
 8000294:	fa02 fc03 	lsl.w	ip, r2, r3
 8000298:	f1c3 0220 	rsb	r2, r3, #32
 800029c:	409f      	lsls	r7, r3
 800029e:	fa20 f202 	lsr.w	r2, r0, r2
 80002a2:	4317      	orrs	r7, r2
 80002a4:	409c      	lsls	r4, r3
 80002a6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002aa:	fa1f f58c 	uxth.w	r5, ip
 80002ae:	fbb7 f1fe 	udiv	r1, r7, lr
 80002b2:	0c22      	lsrs	r2, r4, #16
 80002b4:	fb0e 7711 	mls	r7, lr, r1, r7
 80002b8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002bc:	fb01 f005 	mul.w	r0, r1, r5
 80002c0:	4290      	cmp	r0, r2
 80002c2:	d90a      	bls.n	80002da <__udivmoddi4+0x62>
 80002c4:	eb1c 0202 	adds.w	r2, ip, r2
 80002c8:	f101 37ff 	add.w	r7, r1, #4294967295
 80002cc:	f080 811c 	bcs.w	8000508 <__udivmoddi4+0x290>
 80002d0:	4290      	cmp	r0, r2
 80002d2:	f240 8119 	bls.w	8000508 <__udivmoddi4+0x290>
 80002d6:	3902      	subs	r1, #2
 80002d8:	4462      	add	r2, ip
 80002da:	1a12      	subs	r2, r2, r0
 80002dc:	b2a4      	uxth	r4, r4
 80002de:	fbb2 f0fe 	udiv	r0, r2, lr
 80002e2:	fb0e 2210 	mls	r2, lr, r0, r2
 80002e6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002ea:	fb00 f505 	mul.w	r5, r0, r5
 80002ee:	42a5      	cmp	r5, r4
 80002f0:	d90a      	bls.n	8000308 <__udivmoddi4+0x90>
 80002f2:	eb1c 0404 	adds.w	r4, ip, r4
 80002f6:	f100 32ff 	add.w	r2, r0, #4294967295
 80002fa:	f080 8107 	bcs.w	800050c <__udivmoddi4+0x294>
 80002fe:	42a5      	cmp	r5, r4
 8000300:	f240 8104 	bls.w	800050c <__udivmoddi4+0x294>
 8000304:	4464      	add	r4, ip
 8000306:	3802      	subs	r0, #2
 8000308:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800030c:	1b64      	subs	r4, r4, r5
 800030e:	2100      	movs	r1, #0
 8000310:	b11e      	cbz	r6, 800031a <__udivmoddi4+0xa2>
 8000312:	40dc      	lsrs	r4, r3
 8000314:	2300      	movs	r3, #0
 8000316:	e9c6 4300 	strd	r4, r3, [r6]
 800031a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800031e:	428b      	cmp	r3, r1
 8000320:	d908      	bls.n	8000334 <__udivmoddi4+0xbc>
 8000322:	2e00      	cmp	r6, #0
 8000324:	f000 80ed 	beq.w	8000502 <__udivmoddi4+0x28a>
 8000328:	2100      	movs	r1, #0
 800032a:	e9c6 0500 	strd	r0, r5, [r6]
 800032e:	4608      	mov	r0, r1
 8000330:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000334:	fab3 f183 	clz	r1, r3
 8000338:	2900      	cmp	r1, #0
 800033a:	d149      	bne.n	80003d0 <__udivmoddi4+0x158>
 800033c:	42ab      	cmp	r3, r5
 800033e:	d302      	bcc.n	8000346 <__udivmoddi4+0xce>
 8000340:	4282      	cmp	r2, r0
 8000342:	f200 80f8 	bhi.w	8000536 <__udivmoddi4+0x2be>
 8000346:	1a84      	subs	r4, r0, r2
 8000348:	eb65 0203 	sbc.w	r2, r5, r3
 800034c:	2001      	movs	r0, #1
 800034e:	4617      	mov	r7, r2
 8000350:	2e00      	cmp	r6, #0
 8000352:	d0e2      	beq.n	800031a <__udivmoddi4+0xa2>
 8000354:	e9c6 4700 	strd	r4, r7, [r6]
 8000358:	e7df      	b.n	800031a <__udivmoddi4+0xa2>
 800035a:	b902      	cbnz	r2, 800035e <__udivmoddi4+0xe6>
 800035c:	deff      	udf	#255	; 0xff
 800035e:	fab2 f382 	clz	r3, r2
 8000362:	2b00      	cmp	r3, #0
 8000364:	f040 8090 	bne.w	8000488 <__udivmoddi4+0x210>
 8000368:	1a8a      	subs	r2, r1, r2
 800036a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800036e:	fa1f fe8c 	uxth.w	lr, ip
 8000372:	2101      	movs	r1, #1
 8000374:	fbb2 f5f7 	udiv	r5, r2, r7
 8000378:	fb07 2015 	mls	r0, r7, r5, r2
 800037c:	0c22      	lsrs	r2, r4, #16
 800037e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000382:	fb0e f005 	mul.w	r0, lr, r5
 8000386:	4290      	cmp	r0, r2
 8000388:	d908      	bls.n	800039c <__udivmoddi4+0x124>
 800038a:	eb1c 0202 	adds.w	r2, ip, r2
 800038e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000392:	d202      	bcs.n	800039a <__udivmoddi4+0x122>
 8000394:	4290      	cmp	r0, r2
 8000396:	f200 80cb 	bhi.w	8000530 <__udivmoddi4+0x2b8>
 800039a:	4645      	mov	r5, r8
 800039c:	1a12      	subs	r2, r2, r0
 800039e:	b2a4      	uxth	r4, r4
 80003a0:	fbb2 f0f7 	udiv	r0, r2, r7
 80003a4:	fb07 2210 	mls	r2, r7, r0, r2
 80003a8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003ac:	fb0e fe00 	mul.w	lr, lr, r0
 80003b0:	45a6      	cmp	lr, r4
 80003b2:	d908      	bls.n	80003c6 <__udivmoddi4+0x14e>
 80003b4:	eb1c 0404 	adds.w	r4, ip, r4
 80003b8:	f100 32ff 	add.w	r2, r0, #4294967295
 80003bc:	d202      	bcs.n	80003c4 <__udivmoddi4+0x14c>
 80003be:	45a6      	cmp	lr, r4
 80003c0:	f200 80bb 	bhi.w	800053a <__udivmoddi4+0x2c2>
 80003c4:	4610      	mov	r0, r2
 80003c6:	eba4 040e 	sub.w	r4, r4, lr
 80003ca:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003ce:	e79f      	b.n	8000310 <__udivmoddi4+0x98>
 80003d0:	f1c1 0720 	rsb	r7, r1, #32
 80003d4:	408b      	lsls	r3, r1
 80003d6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003da:	ea4c 0c03 	orr.w	ip, ip, r3
 80003de:	fa05 f401 	lsl.w	r4, r5, r1
 80003e2:	fa20 f307 	lsr.w	r3, r0, r7
 80003e6:	40fd      	lsrs	r5, r7
 80003e8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003ec:	4323      	orrs	r3, r4
 80003ee:	fbb5 f8f9 	udiv	r8, r5, r9
 80003f2:	fa1f fe8c 	uxth.w	lr, ip
 80003f6:	fb09 5518 	mls	r5, r9, r8, r5
 80003fa:	0c1c      	lsrs	r4, r3, #16
 80003fc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000400:	fb08 f50e 	mul.w	r5, r8, lr
 8000404:	42a5      	cmp	r5, r4
 8000406:	fa02 f201 	lsl.w	r2, r2, r1
 800040a:	fa00 f001 	lsl.w	r0, r0, r1
 800040e:	d90b      	bls.n	8000428 <__udivmoddi4+0x1b0>
 8000410:	eb1c 0404 	adds.w	r4, ip, r4
 8000414:	f108 3aff 	add.w	sl, r8, #4294967295
 8000418:	f080 8088 	bcs.w	800052c <__udivmoddi4+0x2b4>
 800041c:	42a5      	cmp	r5, r4
 800041e:	f240 8085 	bls.w	800052c <__udivmoddi4+0x2b4>
 8000422:	f1a8 0802 	sub.w	r8, r8, #2
 8000426:	4464      	add	r4, ip
 8000428:	1b64      	subs	r4, r4, r5
 800042a:	b29d      	uxth	r5, r3
 800042c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000430:	fb09 4413 	mls	r4, r9, r3, r4
 8000434:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000438:	fb03 fe0e 	mul.w	lr, r3, lr
 800043c:	45a6      	cmp	lr, r4
 800043e:	d908      	bls.n	8000452 <__udivmoddi4+0x1da>
 8000440:	eb1c 0404 	adds.w	r4, ip, r4
 8000444:	f103 35ff 	add.w	r5, r3, #4294967295
 8000448:	d26c      	bcs.n	8000524 <__udivmoddi4+0x2ac>
 800044a:	45a6      	cmp	lr, r4
 800044c:	d96a      	bls.n	8000524 <__udivmoddi4+0x2ac>
 800044e:	3b02      	subs	r3, #2
 8000450:	4464      	add	r4, ip
 8000452:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000456:	fba3 9502 	umull	r9, r5, r3, r2
 800045a:	eba4 040e 	sub.w	r4, r4, lr
 800045e:	42ac      	cmp	r4, r5
 8000460:	46c8      	mov	r8, r9
 8000462:	46ae      	mov	lr, r5
 8000464:	d356      	bcc.n	8000514 <__udivmoddi4+0x29c>
 8000466:	d053      	beq.n	8000510 <__udivmoddi4+0x298>
 8000468:	b156      	cbz	r6, 8000480 <__udivmoddi4+0x208>
 800046a:	ebb0 0208 	subs.w	r2, r0, r8
 800046e:	eb64 040e 	sbc.w	r4, r4, lr
 8000472:	fa04 f707 	lsl.w	r7, r4, r7
 8000476:	40ca      	lsrs	r2, r1
 8000478:	40cc      	lsrs	r4, r1
 800047a:	4317      	orrs	r7, r2
 800047c:	e9c6 7400 	strd	r7, r4, [r6]
 8000480:	4618      	mov	r0, r3
 8000482:	2100      	movs	r1, #0
 8000484:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000488:	f1c3 0120 	rsb	r1, r3, #32
 800048c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000490:	fa20 f201 	lsr.w	r2, r0, r1
 8000494:	fa25 f101 	lsr.w	r1, r5, r1
 8000498:	409d      	lsls	r5, r3
 800049a:	432a      	orrs	r2, r5
 800049c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004a0:	fa1f fe8c 	uxth.w	lr, ip
 80004a4:	fbb1 f0f7 	udiv	r0, r1, r7
 80004a8:	fb07 1510 	mls	r5, r7, r0, r1
 80004ac:	0c11      	lsrs	r1, r2, #16
 80004ae:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004b2:	fb00 f50e 	mul.w	r5, r0, lr
 80004b6:	428d      	cmp	r5, r1
 80004b8:	fa04 f403 	lsl.w	r4, r4, r3
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x258>
 80004be:	eb1c 0101 	adds.w	r1, ip, r1
 80004c2:	f100 38ff 	add.w	r8, r0, #4294967295
 80004c6:	d22f      	bcs.n	8000528 <__udivmoddi4+0x2b0>
 80004c8:	428d      	cmp	r5, r1
 80004ca:	d92d      	bls.n	8000528 <__udivmoddi4+0x2b0>
 80004cc:	3802      	subs	r0, #2
 80004ce:	4461      	add	r1, ip
 80004d0:	1b49      	subs	r1, r1, r5
 80004d2:	b292      	uxth	r2, r2
 80004d4:	fbb1 f5f7 	udiv	r5, r1, r7
 80004d8:	fb07 1115 	mls	r1, r7, r5, r1
 80004dc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004e0:	fb05 f10e 	mul.w	r1, r5, lr
 80004e4:	4291      	cmp	r1, r2
 80004e6:	d908      	bls.n	80004fa <__udivmoddi4+0x282>
 80004e8:	eb1c 0202 	adds.w	r2, ip, r2
 80004ec:	f105 38ff 	add.w	r8, r5, #4294967295
 80004f0:	d216      	bcs.n	8000520 <__udivmoddi4+0x2a8>
 80004f2:	4291      	cmp	r1, r2
 80004f4:	d914      	bls.n	8000520 <__udivmoddi4+0x2a8>
 80004f6:	3d02      	subs	r5, #2
 80004f8:	4462      	add	r2, ip
 80004fa:	1a52      	subs	r2, r2, r1
 80004fc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000500:	e738      	b.n	8000374 <__udivmoddi4+0xfc>
 8000502:	4631      	mov	r1, r6
 8000504:	4630      	mov	r0, r6
 8000506:	e708      	b.n	800031a <__udivmoddi4+0xa2>
 8000508:	4639      	mov	r1, r7
 800050a:	e6e6      	b.n	80002da <__udivmoddi4+0x62>
 800050c:	4610      	mov	r0, r2
 800050e:	e6fb      	b.n	8000308 <__udivmoddi4+0x90>
 8000510:	4548      	cmp	r0, r9
 8000512:	d2a9      	bcs.n	8000468 <__udivmoddi4+0x1f0>
 8000514:	ebb9 0802 	subs.w	r8, r9, r2
 8000518:	eb65 0e0c 	sbc.w	lr, r5, ip
 800051c:	3b01      	subs	r3, #1
 800051e:	e7a3      	b.n	8000468 <__udivmoddi4+0x1f0>
 8000520:	4645      	mov	r5, r8
 8000522:	e7ea      	b.n	80004fa <__udivmoddi4+0x282>
 8000524:	462b      	mov	r3, r5
 8000526:	e794      	b.n	8000452 <__udivmoddi4+0x1da>
 8000528:	4640      	mov	r0, r8
 800052a:	e7d1      	b.n	80004d0 <__udivmoddi4+0x258>
 800052c:	46d0      	mov	r8, sl
 800052e:	e77b      	b.n	8000428 <__udivmoddi4+0x1b0>
 8000530:	3d02      	subs	r5, #2
 8000532:	4462      	add	r2, ip
 8000534:	e732      	b.n	800039c <__udivmoddi4+0x124>
 8000536:	4608      	mov	r0, r1
 8000538:	e70a      	b.n	8000350 <__udivmoddi4+0xd8>
 800053a:	4464      	add	r4, ip
 800053c:	3802      	subs	r0, #2
 800053e:	e742      	b.n	80003c6 <__udivmoddi4+0x14e>

08000540 <__aeabi_idiv0>:
 8000540:	4770      	bx	lr
 8000542:	bf00      	nop

08000544 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	b088      	sub	sp, #32
 8000548:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800054a:	f107 030c 	add.w	r3, r7, #12
 800054e:	2200      	movs	r2, #0
 8000550:	601a      	str	r2, [r3, #0]
 8000552:	605a      	str	r2, [r3, #4]
 8000554:	609a      	str	r2, [r3, #8]
 8000556:	60da      	str	r2, [r3, #12]
 8000558:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800055a:	4b18      	ldr	r3, [pc, #96]	; (80005bc <MX_GPIO_Init+0x78>)
 800055c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800055e:	4a17      	ldr	r2, [pc, #92]	; (80005bc <MX_GPIO_Init+0x78>)
 8000560:	f043 0308 	orr.w	r3, r3, #8
 8000564:	6313      	str	r3, [r2, #48]	; 0x30
 8000566:	4b15      	ldr	r3, [pc, #84]	; (80005bc <MX_GPIO_Init+0x78>)
 8000568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800056a:	f003 0308 	and.w	r3, r3, #8
 800056e:	60bb      	str	r3, [r7, #8]
 8000570:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000572:	4b12      	ldr	r3, [pc, #72]	; (80005bc <MX_GPIO_Init+0x78>)
 8000574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000576:	4a11      	ldr	r2, [pc, #68]	; (80005bc <MX_GPIO_Init+0x78>)
 8000578:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800057c:	6313      	str	r3, [r2, #48]	; 0x30
 800057e:	4b0f      	ldr	r3, [pc, #60]	; (80005bc <MX_GPIO_Init+0x78>)
 8000580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000582:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000586:	607b      	str	r3, [r7, #4]
 8000588:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_9|GPIO_PIN_14, GPIO_PIN_RESET);
 800058a:	2200      	movs	r2, #0
 800058c:	f44f 4184 	mov.w	r1, #16896	; 0x4200
 8000590:	480b      	ldr	r0, [pc, #44]	; (80005c0 <MX_GPIO_Init+0x7c>)
 8000592:	f000 fdc5 	bl	8001120 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PG9 PG14 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_14;
 8000596:	f44f 4384 	mov.w	r3, #16896	; 0x4200
 800059a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800059c:	2301      	movs	r3, #1
 800059e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005a0:	2300      	movs	r3, #0
 80005a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005a4:	2300      	movs	r3, #0
 80005a6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80005a8:	f107 030c 	add.w	r3, r7, #12
 80005ac:	4619      	mov	r1, r3
 80005ae:	4804      	ldr	r0, [pc, #16]	; (80005c0 <MX_GPIO_Init+0x7c>)
 80005b0:	f000 fc0a 	bl	8000dc8 <HAL_GPIO_Init>

}
 80005b4:	bf00      	nop
 80005b6:	3720      	adds	r7, #32
 80005b8:	46bd      	mov	sp, r7
 80005ba:	bd80      	pop	{r7, pc}
 80005bc:	40023800 	.word	0x40023800
 80005c0:	40021800 	.word	0x40021800

080005c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005c4:	b5b0      	push	{r4, r5, r7, lr}
 80005c6:	b0a6      	sub	sp, #152	; 0x98
 80005c8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005ca:	f000 fa96 	bl	8000afa <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005ce:	f000 f919 	bl	8000804 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005d2:	f7ff ffb7 	bl	8000544 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80005d6:	f000 f9d7 	bl	8000988 <MX_USART3_UART_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
char text[]="Display Blinking LED PRESS (1,2)\n\rDisplay Group Members PRESS m\n\rQuit PRESS q";
 80005da:	4a83      	ldr	r2, [pc, #524]	; (80007e8 <main+0x224>)
 80005dc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80005e0:	4611      	mov	r1, r2
 80005e2:	224e      	movs	r2, #78	; 0x4e
 80005e4:	4618      	mov	r0, r3
 80005e6:	f002 fc4d 	bl	8002e84 <memcpy>
char inputText[]="\n\r\t\t Input => ";
 80005ea:	4b80      	ldr	r3, [pc, #512]	; (80007ec <main+0x228>)
 80005ec:	f107 0430 	add.w	r4, r7, #48	; 0x30
 80005f0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80005f2:	c407      	stmia	r4!, {r0, r1, r2}
 80005f4:	8023      	strh	r3, [r4, #0]
 80005f6:	3402      	adds	r4, #2
 80005f8:	0c1b      	lsrs	r3, r3, #16
 80005fa:	7023      	strb	r3, [r4, #0]
char inputAlpha;
char memberData[]="64011041 \n\r\t\t\t  Kittaporn Buriyameathakul";
 80005fc:	4b7c      	ldr	r3, [pc, #496]	; (80007f0 <main+0x22c>)
 80005fe:	1d3c      	adds	r4, r7, #4
 8000600:	461d      	mov	r5, r3
 8000602:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000604:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000606:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000608:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800060a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800060e:	c403      	stmia	r4!, {r0, r1}
 8000610:	8022      	strh	r2, [r4, #0]

while(__HAL_UART_GET_FLAG(&huart3,UART_FLAG_TC)==RESET){}
 8000612:	bf00      	nop
 8000614:	4b77      	ldr	r3, [pc, #476]	; (80007f4 <main+0x230>)
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	69db      	ldr	r3, [r3, #28]
 800061a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800061e:	2b40      	cmp	r3, #64	; 0x40
 8000620:	d1f8      	bne.n	8000614 <main+0x50>
HAL_UART_Transmit(&huart3,(uint8_t*)text, strlen(text), 1000);
 8000622:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000626:	4618      	mov	r0, r3
 8000628:	f7ff fe06 	bl	8000238 <strlen>
 800062c:	4603      	mov	r3, r0
 800062e:	b29a      	uxth	r2, r3
 8000630:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8000634:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000638:	486e      	ldr	r0, [pc, #440]	; (80007f4 <main+0x230>)
 800063a:	f001 fe95 	bl	8002368 <HAL_UART_Transmit>
//	  	  HAL_UART_Transmit(&huart3,(uint8_t*)"QUIT", 4,1000);
//	  	  break;
//	   }


	while(__HAL_UART_GET_FLAG(&huart3,UART_FLAG_TC)==RESET){}
 800063e:	bf00      	nop
 8000640:	4b6c      	ldr	r3, [pc, #432]	; (80007f4 <main+0x230>)
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	69db      	ldr	r3, [r3, #28]
 8000646:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800064a:	2b40      	cmp	r3, #64	; 0x40
 800064c:	d1f8      	bne.n	8000640 <main+0x7c>
	HAL_UART_Transmit(&huart3,(uint8_t*)inputText,strlen(inputText),1000);
 800064e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000652:	4618      	mov	r0, r3
 8000654:	f7ff fdf0 	bl	8000238 <strlen>
 8000658:	4603      	mov	r3, r0
 800065a:	b29a      	uxth	r2, r3
 800065c:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8000660:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000664:	4863      	ldr	r0, [pc, #396]	; (80007f4 <main+0x230>)
 8000666:	f001 fe7f 	bl	8002368 <HAL_UART_Transmit>
	while(__HAL_UART_GET_FLAG(&huart3,UART_FLAG_RXNE)==RESET){}
 800066a:	bf00      	nop
 800066c:	4b61      	ldr	r3, [pc, #388]	; (80007f4 <main+0x230>)
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	69db      	ldr	r3, [r3, #28]
 8000672:	f003 0320 	and.w	r3, r3, #32
 8000676:	2b20      	cmp	r3, #32
 8000678:	d1f8      	bne.n	800066c <main+0xa8>
	HAL_UART_Receive(&huart3, (uint8_t*)&inputAlpha, 1, 1000);
 800067a:	f107 012f 	add.w	r1, r7, #47	; 0x2f
 800067e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000682:	2201      	movs	r2, #1
 8000684:	485b      	ldr	r0, [pc, #364]	; (80007f4 <main+0x230>)
 8000686:	f001 fef2 	bl	800246e <HAL_UART_Receive>
	if(inputAlpha=='1'){
 800068a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800068e:	2b31      	cmp	r3, #49	; 0x31
 8000690:	d131      	bne.n	80006f6 <main+0x132>
		while(__HAL_UART_GET_FLAG(&huart3,UART_FLAG_TC)==RESET){}
 8000692:	bf00      	nop
 8000694:	4b57      	ldr	r3, [pc, #348]	; (80007f4 <main+0x230>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	69db      	ldr	r3, [r3, #28]
 800069a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800069e:	2b40      	cmp	r3, #64	; 0x40
 80006a0:	d1f8      	bne.n	8000694 <main+0xd0>
		HAL_UART_Transmit(&huart3,(uint8_t*)&inputAlpha,1,1000);
 80006a2:	f107 012f 	add.w	r1, r7, #47	; 0x2f
 80006a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006aa:	2201      	movs	r2, #1
 80006ac:	4851      	ldr	r0, [pc, #324]	; (80007f4 <main+0x230>)
 80006ae:	f001 fe5b 	bl	8002368 <HAL_UART_Transmit>
		for(int i=0;i<3;i++){
 80006b2:	2300      	movs	r3, #0
 80006b4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80006b8:	e018      	b.n	80006ec <main+0x128>
			HAL_GPIO_WritePin(GPIOG, GPIO_PIN_9, SET);
 80006ba:	2201      	movs	r2, #1
 80006bc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80006c0:	484d      	ldr	r0, [pc, #308]	; (80007f8 <main+0x234>)
 80006c2:	f000 fd2d 	bl	8001120 <HAL_GPIO_WritePin>
			HAL_Delay(300);
 80006c6:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80006ca:	f000 fa73 	bl	8000bb4 <HAL_Delay>
			HAL_GPIO_WritePin(GPIOG, GPIO_PIN_9, RESET);
 80006ce:	2200      	movs	r2, #0
 80006d0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80006d4:	4848      	ldr	r0, [pc, #288]	; (80007f8 <main+0x234>)
 80006d6:	f000 fd23 	bl	8001120 <HAL_GPIO_WritePin>
			HAL_Delay(300);
 80006da:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80006de:	f000 fa69 	bl	8000bb4 <HAL_Delay>
		for(int i=0;i<3;i++){
 80006e2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80006e6:	3301      	adds	r3, #1
 80006e8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80006ec:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80006f0:	2b02      	cmp	r3, #2
 80006f2:	dde2      	ble.n	80006ba <main+0xf6>
 80006f4:	e7a3      	b.n	800063e <main+0x7a>
		}
	}
	else if(inputAlpha=='2'){
 80006f6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80006fa:	2b32      	cmp	r3, #50	; 0x32
 80006fc:	d131      	bne.n	8000762 <main+0x19e>
		while(__HAL_UART_GET_FLAG(&huart3,UART_FLAG_TC)==RESET){}
 80006fe:	bf00      	nop
 8000700:	4b3c      	ldr	r3, [pc, #240]	; (80007f4 <main+0x230>)
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	69db      	ldr	r3, [r3, #28]
 8000706:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800070a:	2b40      	cmp	r3, #64	; 0x40
 800070c:	d1f8      	bne.n	8000700 <main+0x13c>
		HAL_UART_Transmit(&huart3,(uint8_t*)&inputAlpha,1,1000);
 800070e:	f107 012f 	add.w	r1, r7, #47	; 0x2f
 8000712:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000716:	2201      	movs	r2, #1
 8000718:	4836      	ldr	r0, [pc, #216]	; (80007f4 <main+0x230>)
 800071a:	f001 fe25 	bl	8002368 <HAL_UART_Transmit>
		for(int i=0;i<3;i++){
 800071e:	2300      	movs	r3, #0
 8000720:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8000724:	e018      	b.n	8000758 <main+0x194>
			HAL_GPIO_WritePin(GPIOG, GPIO_PIN_14, SET);
 8000726:	2201      	movs	r2, #1
 8000728:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800072c:	4832      	ldr	r0, [pc, #200]	; (80007f8 <main+0x234>)
 800072e:	f000 fcf7 	bl	8001120 <HAL_GPIO_WritePin>
			HAL_Delay(300);
 8000732:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000736:	f000 fa3d 	bl	8000bb4 <HAL_Delay>
			HAL_GPIO_WritePin(GPIOG, GPIO_PIN_14, RESET);
 800073a:	2200      	movs	r2, #0
 800073c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000740:	482d      	ldr	r0, [pc, #180]	; (80007f8 <main+0x234>)
 8000742:	f000 fced 	bl	8001120 <HAL_GPIO_WritePin>
			HAL_Delay(300);
 8000746:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800074a:	f000 fa33 	bl	8000bb4 <HAL_Delay>
		for(int i=0;i<3;i++){
 800074e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8000752:	3301      	adds	r3, #1
 8000754:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8000758:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800075c:	2b02      	cmp	r3, #2
 800075e:	dde2      	ble.n	8000726 <main+0x162>
 8000760:	e76d      	b.n	800063e <main+0x7a>
		}
	}
	else if(inputAlpha=='m'){
 8000762:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000766:	2b6d      	cmp	r3, #109	; 0x6d
 8000768:	d114      	bne.n	8000794 <main+0x1d0>
		while(__HAL_UART_GET_FLAG(&huart3,UART_FLAG_TC)==RESET){}
 800076a:	bf00      	nop
 800076c:	4b21      	ldr	r3, [pc, #132]	; (80007f4 <main+0x230>)
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	69db      	ldr	r3, [r3, #28]
 8000772:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000776:	2b40      	cmp	r3, #64	; 0x40
 8000778:	d1f8      	bne.n	800076c <main+0x1a8>
		HAL_UART_Transmit(&huart3,(uint8_t*)memberData,strlen(memberData),1000);
 800077a:	1d3b      	adds	r3, r7, #4
 800077c:	4618      	mov	r0, r3
 800077e:	f7ff fd5b 	bl	8000238 <strlen>
 8000782:	4603      	mov	r3, r0
 8000784:	b29a      	uxth	r2, r3
 8000786:	1d39      	adds	r1, r7, #4
 8000788:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800078c:	4819      	ldr	r0, [pc, #100]	; (80007f4 <main+0x230>)
 800078e:	f001 fdeb 	bl	8002368 <HAL_UART_Transmit>
 8000792:	e754      	b.n	800063e <main+0x7a>
	}
	else if(inputAlpha=='q'){
 8000794:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000798:	2b71      	cmp	r3, #113	; 0x71
 800079a:	d10f      	bne.n	80007bc <main+0x1f8>
		while(__HAL_UART_GET_FLAG(&huart3,UART_FLAG_TC)==RESET){}
 800079c:	bf00      	nop
 800079e:	4b15      	ldr	r3, [pc, #84]	; (80007f4 <main+0x230>)
 80007a0:	681b      	ldr	r3, [r3, #0]
 80007a2:	69db      	ldr	r3, [r3, #28]
 80007a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80007a8:	2b40      	cmp	r3, #64	; 0x40
 80007aa:	d1f8      	bne.n	800079e <main+0x1da>
		HAL_UART_Transmit(&huart3,(uint8_t*)"QUIT",4,1000);
 80007ac:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007b0:	2204      	movs	r2, #4
 80007b2:	4912      	ldr	r1, [pc, #72]	; (80007fc <main+0x238>)
 80007b4:	480f      	ldr	r0, [pc, #60]	; (80007f4 <main+0x230>)
 80007b6:	f001 fdd7 	bl	8002368 <HAL_UART_Transmit>
		break;
 80007ba:	e00f      	b.n	80007dc <main+0x218>
	}
	else{
		while(__HAL_UART_GET_FLAG(&huart3,UART_FLAG_TC)==RESET){}
 80007bc:	bf00      	nop
 80007be:	4b0d      	ldr	r3, [pc, #52]	; (80007f4 <main+0x230>)
 80007c0:	681b      	ldr	r3, [r3, #0]
 80007c2:	69db      	ldr	r3, [r3, #28]
 80007c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80007c8:	2b40      	cmp	r3, #64	; 0x40
 80007ca:	d1f8      	bne.n	80007be <main+0x1fa>
		HAL_UART_Transmit(&huart3, (uint8_t*)"Unknown Command", 15, 1000);
 80007cc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007d0:	220f      	movs	r2, #15
 80007d2:	490b      	ldr	r1, [pc, #44]	; (8000800 <main+0x23c>)
 80007d4:	4807      	ldr	r0, [pc, #28]	; (80007f4 <main+0x230>)
 80007d6:	f001 fdc7 	bl	8002368 <HAL_UART_Transmit>
	while(__HAL_UART_GET_FLAG(&huart3,UART_FLAG_TC)==RESET){}
 80007da:	e730      	b.n	800063e <main+0x7a>
 80007dc:	2300      	movs	r3, #0

  }


  /* USER CODE END 3 */
}
 80007de:	4618      	mov	r0, r3
 80007e0:	3798      	adds	r7, #152	; 0x98
 80007e2:	46bd      	mov	sp, r7
 80007e4:	bdb0      	pop	{r4, r5, r7, pc}
 80007e6:	bf00      	nop
 80007e8:	08002ed0 	.word	0x08002ed0
 80007ec:	08002f20 	.word	0x08002f20
 80007f0:	08002f30 	.word	0x08002f30
 80007f4:	20000028 	.word	0x20000028
 80007f8:	40021800 	.word	0x40021800
 80007fc:	08002eb8 	.word	0x08002eb8
 8000800:	08002ec0 	.word	0x08002ec0

08000804 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b094      	sub	sp, #80	; 0x50
 8000808:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800080a:	f107 031c 	add.w	r3, r7, #28
 800080e:	2234      	movs	r2, #52	; 0x34
 8000810:	2100      	movs	r1, #0
 8000812:	4618      	mov	r0, r3
 8000814:	f002 fb09 	bl	8002e2a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000818:	f107 0308 	add.w	r3, r7, #8
 800081c:	2200      	movs	r2, #0
 800081e:	601a      	str	r2, [r3, #0]
 8000820:	605a      	str	r2, [r3, #4]
 8000822:	609a      	str	r2, [r3, #8]
 8000824:	60da      	str	r2, [r3, #12]
 8000826:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000828:	4b22      	ldr	r3, [pc, #136]	; (80008b4 <SystemClock_Config+0xb0>)
 800082a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800082c:	4a21      	ldr	r2, [pc, #132]	; (80008b4 <SystemClock_Config+0xb0>)
 800082e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000832:	6413      	str	r3, [r2, #64]	; 0x40
 8000834:	4b1f      	ldr	r3, [pc, #124]	; (80008b4 <SystemClock_Config+0xb0>)
 8000836:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000838:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800083c:	607b      	str	r3, [r7, #4]
 800083e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000840:	4b1d      	ldr	r3, [pc, #116]	; (80008b8 <SystemClock_Config+0xb4>)
 8000842:	681b      	ldr	r3, [r3, #0]
 8000844:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000848:	4a1b      	ldr	r2, [pc, #108]	; (80008b8 <SystemClock_Config+0xb4>)
 800084a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800084e:	6013      	str	r3, [r2, #0]
 8000850:	4b19      	ldr	r3, [pc, #100]	; (80008b8 <SystemClock_Config+0xb4>)
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000858:	603b      	str	r3, [r7, #0]
 800085a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800085c:	2302      	movs	r3, #2
 800085e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000860:	2301      	movs	r3, #1
 8000862:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000864:	2310      	movs	r3, #16
 8000866:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000868:	2300      	movs	r3, #0
 800086a:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800086c:	f107 031c 	add.w	r3, r7, #28
 8000870:	4618      	mov	r0, r3
 8000872:	f000 fc6f 	bl	8001154 <HAL_RCC_OscConfig>
 8000876:	4603      	mov	r3, r0
 8000878:	2b00      	cmp	r3, #0
 800087a:	d001      	beq.n	8000880 <SystemClock_Config+0x7c>
  {
    Error_Handler();
 800087c:	f000 f81e 	bl	80008bc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000880:	230f      	movs	r3, #15
 8000882:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000884:	2300      	movs	r3, #0
 8000886:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000888:	2300      	movs	r3, #0
 800088a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800088c:	2300      	movs	r3, #0
 800088e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000890:	2300      	movs	r3, #0
 8000892:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000894:	f107 0308 	add.w	r3, r7, #8
 8000898:	2100      	movs	r1, #0
 800089a:	4618      	mov	r0, r3
 800089c:	f000 ff08 	bl	80016b0 <HAL_RCC_ClockConfig>
 80008a0:	4603      	mov	r3, r0
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d001      	beq.n	80008aa <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80008a6:	f000 f809 	bl	80008bc <Error_Handler>
  }
}
 80008aa:	bf00      	nop
 80008ac:	3750      	adds	r7, #80	; 0x50
 80008ae:	46bd      	mov	sp, r7
 80008b0:	bd80      	pop	{r7, pc}
 80008b2:	bf00      	nop
 80008b4:	40023800 	.word	0x40023800
 80008b8:	40007000 	.word	0x40007000

080008bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008bc:	b480      	push	{r7}
 80008be:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008c0:	b672      	cpsid	i
}
 80008c2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008c4:	e7fe      	b.n	80008c4 <Error_Handler+0x8>
	...

080008c8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008c8:	b480      	push	{r7}
 80008ca:	b083      	sub	sp, #12
 80008cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80008ce:	4b0f      	ldr	r3, [pc, #60]	; (800090c <HAL_MspInit+0x44>)
 80008d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008d2:	4a0e      	ldr	r2, [pc, #56]	; (800090c <HAL_MspInit+0x44>)
 80008d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008d8:	6413      	str	r3, [r2, #64]	; 0x40
 80008da:	4b0c      	ldr	r3, [pc, #48]	; (800090c <HAL_MspInit+0x44>)
 80008dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008e2:	607b      	str	r3, [r7, #4]
 80008e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008e6:	4b09      	ldr	r3, [pc, #36]	; (800090c <HAL_MspInit+0x44>)
 80008e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008ea:	4a08      	ldr	r2, [pc, #32]	; (800090c <HAL_MspInit+0x44>)
 80008ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008f0:	6453      	str	r3, [r2, #68]	; 0x44
 80008f2:	4b06      	ldr	r3, [pc, #24]	; (800090c <HAL_MspInit+0x44>)
 80008f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008fa:	603b      	str	r3, [r7, #0]
 80008fc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008fe:	bf00      	nop
 8000900:	370c      	adds	r7, #12
 8000902:	46bd      	mov	sp, r7
 8000904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000908:	4770      	bx	lr
 800090a:	bf00      	nop
 800090c:	40023800 	.word	0x40023800

08000910 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000910:	b480      	push	{r7}
 8000912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000914:	e7fe      	b.n	8000914 <NMI_Handler+0x4>

08000916 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000916:	b480      	push	{r7}
 8000918:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800091a:	e7fe      	b.n	800091a <HardFault_Handler+0x4>

0800091c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800091c:	b480      	push	{r7}
 800091e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000920:	e7fe      	b.n	8000920 <MemManage_Handler+0x4>

08000922 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000922:	b480      	push	{r7}
 8000924:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000926:	e7fe      	b.n	8000926 <BusFault_Handler+0x4>

08000928 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000928:	b480      	push	{r7}
 800092a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800092c:	e7fe      	b.n	800092c <UsageFault_Handler+0x4>

0800092e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800092e:	b480      	push	{r7}
 8000930:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000932:	bf00      	nop
 8000934:	46bd      	mov	sp, r7
 8000936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800093a:	4770      	bx	lr

0800093c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800093c:	b480      	push	{r7}
 800093e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000940:	bf00      	nop
 8000942:	46bd      	mov	sp, r7
 8000944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000948:	4770      	bx	lr

0800094a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800094a:	b480      	push	{r7}
 800094c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800094e:	bf00      	nop
 8000950:	46bd      	mov	sp, r7
 8000952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000956:	4770      	bx	lr

08000958 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800095c:	f000 f90a 	bl	8000b74 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000960:	bf00      	nop
 8000962:	bd80      	pop	{r7, pc}

08000964 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000964:	b480      	push	{r7}
 8000966:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000968:	4b06      	ldr	r3, [pc, #24]	; (8000984 <SystemInit+0x20>)
 800096a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800096e:	4a05      	ldr	r2, [pc, #20]	; (8000984 <SystemInit+0x20>)
 8000970:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000974:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000978:	bf00      	nop
 800097a:	46bd      	mov	sp, r7
 800097c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000980:	4770      	bx	lr
 8000982:	bf00      	nop
 8000984:	e000ed00 	.word	0xe000ed00

08000988 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800098c:	4b14      	ldr	r3, [pc, #80]	; (80009e0 <MX_USART3_UART_Init+0x58>)
 800098e:	4a15      	ldr	r2, [pc, #84]	; (80009e4 <MX_USART3_UART_Init+0x5c>)
 8000990:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000992:	4b13      	ldr	r3, [pc, #76]	; (80009e0 <MX_USART3_UART_Init+0x58>)
 8000994:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000998:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800099a:	4b11      	ldr	r3, [pc, #68]	; (80009e0 <MX_USART3_UART_Init+0x58>)
 800099c:	2200      	movs	r2, #0
 800099e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80009a0:	4b0f      	ldr	r3, [pc, #60]	; (80009e0 <MX_USART3_UART_Init+0x58>)
 80009a2:	2200      	movs	r2, #0
 80009a4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80009a6:	4b0e      	ldr	r3, [pc, #56]	; (80009e0 <MX_USART3_UART_Init+0x58>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80009ac:	4b0c      	ldr	r3, [pc, #48]	; (80009e0 <MX_USART3_UART_Init+0x58>)
 80009ae:	220c      	movs	r2, #12
 80009b0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009b2:	4b0b      	ldr	r3, [pc, #44]	; (80009e0 <MX_USART3_UART_Init+0x58>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80009b8:	4b09      	ldr	r3, [pc, #36]	; (80009e0 <MX_USART3_UART_Init+0x58>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009be:	4b08      	ldr	r3, [pc, #32]	; (80009e0 <MX_USART3_UART_Init+0x58>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009c4:	4b06      	ldr	r3, [pc, #24]	; (80009e0 <MX_USART3_UART_Init+0x58>)
 80009c6:	2200      	movs	r2, #0
 80009c8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80009ca:	4805      	ldr	r0, [pc, #20]	; (80009e0 <MX_USART3_UART_Init+0x58>)
 80009cc:	f001 fc7e 	bl	80022cc <HAL_UART_Init>
 80009d0:	4603      	mov	r3, r0
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d001      	beq.n	80009da <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80009d6:	f7ff ff71 	bl	80008bc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80009da:	bf00      	nop
 80009dc:	bd80      	pop	{r7, pc}
 80009de:	bf00      	nop
 80009e0:	20000028 	.word	0x20000028
 80009e4:	40004800 	.word	0x40004800

080009e8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b0ae      	sub	sp, #184	; 0xb8
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009f0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80009f4:	2200      	movs	r2, #0
 80009f6:	601a      	str	r2, [r3, #0]
 80009f8:	605a      	str	r2, [r3, #4]
 80009fa:	609a      	str	r2, [r3, #8]
 80009fc:	60da      	str	r2, [r3, #12]
 80009fe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000a00:	f107 0314 	add.w	r3, r7, #20
 8000a04:	2290      	movs	r2, #144	; 0x90
 8000a06:	2100      	movs	r1, #0
 8000a08:	4618      	mov	r0, r3
 8000a0a:	f002 fa0e 	bl	8002e2a <memset>
  if(uartHandle->Instance==USART3)
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	681b      	ldr	r3, [r3, #0]
 8000a12:	4a22      	ldr	r2, [pc, #136]	; (8000a9c <HAL_UART_MspInit+0xb4>)
 8000a14:	4293      	cmp	r3, r2
 8000a16:	d13c      	bne.n	8000a92 <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000a18:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a1c:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000a1e:	2300      	movs	r3, #0
 8000a20:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000a22:	f107 0314 	add.w	r3, r7, #20
 8000a26:	4618      	mov	r0, r3
 8000a28:	f001 f828 	bl	8001a7c <HAL_RCCEx_PeriphCLKConfig>
 8000a2c:	4603      	mov	r3, r0
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d001      	beq.n	8000a36 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000a32:	f7ff ff43 	bl	80008bc <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000a36:	4b1a      	ldr	r3, [pc, #104]	; (8000aa0 <HAL_UART_MspInit+0xb8>)
 8000a38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a3a:	4a19      	ldr	r2, [pc, #100]	; (8000aa0 <HAL_UART_MspInit+0xb8>)
 8000a3c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000a40:	6413      	str	r3, [r2, #64]	; 0x40
 8000a42:	4b17      	ldr	r3, [pc, #92]	; (8000aa0 <HAL_UART_MspInit+0xb8>)
 8000a44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a46:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000a4a:	613b      	str	r3, [r7, #16]
 8000a4c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a4e:	4b14      	ldr	r3, [pc, #80]	; (8000aa0 <HAL_UART_MspInit+0xb8>)
 8000a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a52:	4a13      	ldr	r2, [pc, #76]	; (8000aa0 <HAL_UART_MspInit+0xb8>)
 8000a54:	f043 0308 	orr.w	r3, r3, #8
 8000a58:	6313      	str	r3, [r2, #48]	; 0x30
 8000a5a:	4b11      	ldr	r3, [pc, #68]	; (8000aa0 <HAL_UART_MspInit+0xb8>)
 8000a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a5e:	f003 0308 	and.w	r3, r3, #8
 8000a62:	60fb      	str	r3, [r7, #12]
 8000a64:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000a66:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000a6a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a6e:	2302      	movs	r3, #2
 8000a70:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a74:	2300      	movs	r3, #0
 8000a76:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a7a:	2303      	movs	r3, #3
 8000a7c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000a80:	2307      	movs	r3, #7
 8000a82:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a86:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000a8a:	4619      	mov	r1, r3
 8000a8c:	4805      	ldr	r0, [pc, #20]	; (8000aa4 <HAL_UART_MspInit+0xbc>)
 8000a8e:	f000 f99b 	bl	8000dc8 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8000a92:	bf00      	nop
 8000a94:	37b8      	adds	r7, #184	; 0xb8
 8000a96:	46bd      	mov	sp, r7
 8000a98:	bd80      	pop	{r7, pc}
 8000a9a:	bf00      	nop
 8000a9c:	40004800 	.word	0x40004800
 8000aa0:	40023800 	.word	0x40023800
 8000aa4:	40020c00 	.word	0x40020c00

08000aa8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000aa8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ae0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000aac:	480d      	ldr	r0, [pc, #52]	; (8000ae4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000aae:	490e      	ldr	r1, [pc, #56]	; (8000ae8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000ab0:	4a0e      	ldr	r2, [pc, #56]	; (8000aec <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000ab2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ab4:	e002      	b.n	8000abc <LoopCopyDataInit>

08000ab6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ab6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ab8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000aba:	3304      	adds	r3, #4

08000abc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000abc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000abe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ac0:	d3f9      	bcc.n	8000ab6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ac2:	4a0b      	ldr	r2, [pc, #44]	; (8000af0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000ac4:	4c0b      	ldr	r4, [pc, #44]	; (8000af4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000ac6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ac8:	e001      	b.n	8000ace <LoopFillZerobss>

08000aca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000aca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000acc:	3204      	adds	r2, #4

08000ace <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ace:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ad0:	d3fb      	bcc.n	8000aca <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000ad2:	f7ff ff47 	bl	8000964 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000ad6:	f002 f9b1 	bl	8002e3c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ada:	f7ff fd73 	bl	80005c4 <main>
  bx  lr    
 8000ade:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000ae0:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8000ae4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ae8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000aec:	08002f84 	.word	0x08002f84
  ldr r2, =_sbss
 8000af0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000af4:	200000b4 	.word	0x200000b4

08000af8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000af8:	e7fe      	b.n	8000af8 <ADC_IRQHandler>

08000afa <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000afa:	b580      	push	{r7, lr}
 8000afc:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000afe:	2003      	movs	r0, #3
 8000b00:	f000 f92e 	bl	8000d60 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b04:	200f      	movs	r0, #15
 8000b06:	f000 f805 	bl	8000b14 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b0a:	f7ff fedd 	bl	80008c8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b0e:	2300      	movs	r3, #0
}
 8000b10:	4618      	mov	r0, r3
 8000b12:	bd80      	pop	{r7, pc}

08000b14 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b082      	sub	sp, #8
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b1c:	4b12      	ldr	r3, [pc, #72]	; (8000b68 <HAL_InitTick+0x54>)
 8000b1e:	681a      	ldr	r2, [r3, #0]
 8000b20:	4b12      	ldr	r3, [pc, #72]	; (8000b6c <HAL_InitTick+0x58>)
 8000b22:	781b      	ldrb	r3, [r3, #0]
 8000b24:	4619      	mov	r1, r3
 8000b26:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b2a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b32:	4618      	mov	r0, r3
 8000b34:	f000 f93b 	bl	8000dae <HAL_SYSTICK_Config>
 8000b38:	4603      	mov	r3, r0
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d001      	beq.n	8000b42 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b3e:	2301      	movs	r3, #1
 8000b40:	e00e      	b.n	8000b60 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	2b0f      	cmp	r3, #15
 8000b46:	d80a      	bhi.n	8000b5e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b48:	2200      	movs	r2, #0
 8000b4a:	6879      	ldr	r1, [r7, #4]
 8000b4c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b50:	f000 f911 	bl	8000d76 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b54:	4a06      	ldr	r2, [pc, #24]	; (8000b70 <HAL_InitTick+0x5c>)
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	e000      	b.n	8000b60 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b5e:	2301      	movs	r3, #1
}
 8000b60:	4618      	mov	r0, r3
 8000b62:	3708      	adds	r7, #8
 8000b64:	46bd      	mov	sp, r7
 8000b66:	bd80      	pop	{r7, pc}
 8000b68:	20000000 	.word	0x20000000
 8000b6c:	20000008 	.word	0x20000008
 8000b70:	20000004 	.word	0x20000004

08000b74 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b74:	b480      	push	{r7}
 8000b76:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b78:	4b06      	ldr	r3, [pc, #24]	; (8000b94 <HAL_IncTick+0x20>)
 8000b7a:	781b      	ldrb	r3, [r3, #0]
 8000b7c:	461a      	mov	r2, r3
 8000b7e:	4b06      	ldr	r3, [pc, #24]	; (8000b98 <HAL_IncTick+0x24>)
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	4413      	add	r3, r2
 8000b84:	4a04      	ldr	r2, [pc, #16]	; (8000b98 <HAL_IncTick+0x24>)
 8000b86:	6013      	str	r3, [r2, #0]
}
 8000b88:	bf00      	nop
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b90:	4770      	bx	lr
 8000b92:	bf00      	nop
 8000b94:	20000008 	.word	0x20000008
 8000b98:	200000b0 	.word	0x200000b0

08000b9c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	af00      	add	r7, sp, #0
  return uwTick;
 8000ba0:	4b03      	ldr	r3, [pc, #12]	; (8000bb0 <HAL_GetTick+0x14>)
 8000ba2:	681b      	ldr	r3, [r3, #0]
}
 8000ba4:	4618      	mov	r0, r3
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bac:	4770      	bx	lr
 8000bae:	bf00      	nop
 8000bb0:	200000b0 	.word	0x200000b0

08000bb4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b084      	sub	sp, #16
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000bbc:	f7ff ffee 	bl	8000b9c <HAL_GetTick>
 8000bc0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000bc6:	68fb      	ldr	r3, [r7, #12]
 8000bc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000bcc:	d005      	beq.n	8000bda <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000bce:	4b0a      	ldr	r3, [pc, #40]	; (8000bf8 <HAL_Delay+0x44>)
 8000bd0:	781b      	ldrb	r3, [r3, #0]
 8000bd2:	461a      	mov	r2, r3
 8000bd4:	68fb      	ldr	r3, [r7, #12]
 8000bd6:	4413      	add	r3, r2
 8000bd8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000bda:	bf00      	nop
 8000bdc:	f7ff ffde 	bl	8000b9c <HAL_GetTick>
 8000be0:	4602      	mov	r2, r0
 8000be2:	68bb      	ldr	r3, [r7, #8]
 8000be4:	1ad3      	subs	r3, r2, r3
 8000be6:	68fa      	ldr	r2, [r7, #12]
 8000be8:	429a      	cmp	r2, r3
 8000bea:	d8f7      	bhi.n	8000bdc <HAL_Delay+0x28>
  {
  }
}
 8000bec:	bf00      	nop
 8000bee:	bf00      	nop
 8000bf0:	3710      	adds	r7, #16
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	bd80      	pop	{r7, pc}
 8000bf6:	bf00      	nop
 8000bf8:	20000008 	.word	0x20000008

08000bfc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	b085      	sub	sp, #20
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	f003 0307 	and.w	r3, r3, #7
 8000c0a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c0c:	4b0b      	ldr	r3, [pc, #44]	; (8000c3c <__NVIC_SetPriorityGrouping+0x40>)
 8000c0e:	68db      	ldr	r3, [r3, #12]
 8000c10:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c12:	68ba      	ldr	r2, [r7, #8]
 8000c14:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c18:	4013      	ands	r3, r2
 8000c1a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c1c:	68fb      	ldr	r3, [r7, #12]
 8000c1e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c20:	68bb      	ldr	r3, [r7, #8]
 8000c22:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000c24:	4b06      	ldr	r3, [pc, #24]	; (8000c40 <__NVIC_SetPriorityGrouping+0x44>)
 8000c26:	4313      	orrs	r3, r2
 8000c28:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c2a:	4a04      	ldr	r2, [pc, #16]	; (8000c3c <__NVIC_SetPriorityGrouping+0x40>)
 8000c2c:	68bb      	ldr	r3, [r7, #8]
 8000c2e:	60d3      	str	r3, [r2, #12]
}
 8000c30:	bf00      	nop
 8000c32:	3714      	adds	r7, #20
 8000c34:	46bd      	mov	sp, r7
 8000c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3a:	4770      	bx	lr
 8000c3c:	e000ed00 	.word	0xe000ed00
 8000c40:	05fa0000 	.word	0x05fa0000

08000c44 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c44:	b480      	push	{r7}
 8000c46:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c48:	4b04      	ldr	r3, [pc, #16]	; (8000c5c <__NVIC_GetPriorityGrouping+0x18>)
 8000c4a:	68db      	ldr	r3, [r3, #12]
 8000c4c:	0a1b      	lsrs	r3, r3, #8
 8000c4e:	f003 0307 	and.w	r3, r3, #7
}
 8000c52:	4618      	mov	r0, r3
 8000c54:	46bd      	mov	sp, r7
 8000c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5a:	4770      	bx	lr
 8000c5c:	e000ed00 	.word	0xe000ed00

08000c60 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c60:	b480      	push	{r7}
 8000c62:	b083      	sub	sp, #12
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	4603      	mov	r3, r0
 8000c68:	6039      	str	r1, [r7, #0]
 8000c6a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	db0a      	blt.n	8000c8a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c74:	683b      	ldr	r3, [r7, #0]
 8000c76:	b2da      	uxtb	r2, r3
 8000c78:	490c      	ldr	r1, [pc, #48]	; (8000cac <__NVIC_SetPriority+0x4c>)
 8000c7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c7e:	0112      	lsls	r2, r2, #4
 8000c80:	b2d2      	uxtb	r2, r2
 8000c82:	440b      	add	r3, r1
 8000c84:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c88:	e00a      	b.n	8000ca0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c8a:	683b      	ldr	r3, [r7, #0]
 8000c8c:	b2da      	uxtb	r2, r3
 8000c8e:	4908      	ldr	r1, [pc, #32]	; (8000cb0 <__NVIC_SetPriority+0x50>)
 8000c90:	79fb      	ldrb	r3, [r7, #7]
 8000c92:	f003 030f 	and.w	r3, r3, #15
 8000c96:	3b04      	subs	r3, #4
 8000c98:	0112      	lsls	r2, r2, #4
 8000c9a:	b2d2      	uxtb	r2, r2
 8000c9c:	440b      	add	r3, r1
 8000c9e:	761a      	strb	r2, [r3, #24]
}
 8000ca0:	bf00      	nop
 8000ca2:	370c      	adds	r7, #12
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000caa:	4770      	bx	lr
 8000cac:	e000e100 	.word	0xe000e100
 8000cb0:	e000ed00 	.word	0xe000ed00

08000cb4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	b089      	sub	sp, #36	; 0x24
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	60f8      	str	r0, [r7, #12]
 8000cbc:	60b9      	str	r1, [r7, #8]
 8000cbe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000cc0:	68fb      	ldr	r3, [r7, #12]
 8000cc2:	f003 0307 	and.w	r3, r3, #7
 8000cc6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000cc8:	69fb      	ldr	r3, [r7, #28]
 8000cca:	f1c3 0307 	rsb	r3, r3, #7
 8000cce:	2b04      	cmp	r3, #4
 8000cd0:	bf28      	it	cs
 8000cd2:	2304      	movcs	r3, #4
 8000cd4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000cd6:	69fb      	ldr	r3, [r7, #28]
 8000cd8:	3304      	adds	r3, #4
 8000cda:	2b06      	cmp	r3, #6
 8000cdc:	d902      	bls.n	8000ce4 <NVIC_EncodePriority+0x30>
 8000cde:	69fb      	ldr	r3, [r7, #28]
 8000ce0:	3b03      	subs	r3, #3
 8000ce2:	e000      	b.n	8000ce6 <NVIC_EncodePriority+0x32>
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ce8:	f04f 32ff 	mov.w	r2, #4294967295
 8000cec:	69bb      	ldr	r3, [r7, #24]
 8000cee:	fa02 f303 	lsl.w	r3, r2, r3
 8000cf2:	43da      	mvns	r2, r3
 8000cf4:	68bb      	ldr	r3, [r7, #8]
 8000cf6:	401a      	ands	r2, r3
 8000cf8:	697b      	ldr	r3, [r7, #20]
 8000cfa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000cfc:	f04f 31ff 	mov.w	r1, #4294967295
 8000d00:	697b      	ldr	r3, [r7, #20]
 8000d02:	fa01 f303 	lsl.w	r3, r1, r3
 8000d06:	43d9      	mvns	r1, r3
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d0c:	4313      	orrs	r3, r2
         );
}
 8000d0e:	4618      	mov	r0, r3
 8000d10:	3724      	adds	r7, #36	; 0x24
 8000d12:	46bd      	mov	sp, r7
 8000d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d18:	4770      	bx	lr
	...

08000d1c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b082      	sub	sp, #8
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	3b01      	subs	r3, #1
 8000d28:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d2c:	d301      	bcc.n	8000d32 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d2e:	2301      	movs	r3, #1
 8000d30:	e00f      	b.n	8000d52 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d32:	4a0a      	ldr	r2, [pc, #40]	; (8000d5c <SysTick_Config+0x40>)
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	3b01      	subs	r3, #1
 8000d38:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d3a:	210f      	movs	r1, #15
 8000d3c:	f04f 30ff 	mov.w	r0, #4294967295
 8000d40:	f7ff ff8e 	bl	8000c60 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d44:	4b05      	ldr	r3, [pc, #20]	; (8000d5c <SysTick_Config+0x40>)
 8000d46:	2200      	movs	r2, #0
 8000d48:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d4a:	4b04      	ldr	r3, [pc, #16]	; (8000d5c <SysTick_Config+0x40>)
 8000d4c:	2207      	movs	r2, #7
 8000d4e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d50:	2300      	movs	r3, #0
}
 8000d52:	4618      	mov	r0, r3
 8000d54:	3708      	adds	r7, #8
 8000d56:	46bd      	mov	sp, r7
 8000d58:	bd80      	pop	{r7, pc}
 8000d5a:	bf00      	nop
 8000d5c:	e000e010 	.word	0xe000e010

08000d60 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b082      	sub	sp, #8
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d68:	6878      	ldr	r0, [r7, #4]
 8000d6a:	f7ff ff47 	bl	8000bfc <__NVIC_SetPriorityGrouping>
}
 8000d6e:	bf00      	nop
 8000d70:	3708      	adds	r7, #8
 8000d72:	46bd      	mov	sp, r7
 8000d74:	bd80      	pop	{r7, pc}

08000d76 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d76:	b580      	push	{r7, lr}
 8000d78:	b086      	sub	sp, #24
 8000d7a:	af00      	add	r7, sp, #0
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	60b9      	str	r1, [r7, #8]
 8000d80:	607a      	str	r2, [r7, #4]
 8000d82:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000d84:	2300      	movs	r3, #0
 8000d86:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d88:	f7ff ff5c 	bl	8000c44 <__NVIC_GetPriorityGrouping>
 8000d8c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d8e:	687a      	ldr	r2, [r7, #4]
 8000d90:	68b9      	ldr	r1, [r7, #8]
 8000d92:	6978      	ldr	r0, [r7, #20]
 8000d94:	f7ff ff8e 	bl	8000cb4 <NVIC_EncodePriority>
 8000d98:	4602      	mov	r2, r0
 8000d9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d9e:	4611      	mov	r1, r2
 8000da0:	4618      	mov	r0, r3
 8000da2:	f7ff ff5d 	bl	8000c60 <__NVIC_SetPriority>
}
 8000da6:	bf00      	nop
 8000da8:	3718      	adds	r7, #24
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bd80      	pop	{r7, pc}

08000dae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000dae:	b580      	push	{r7, lr}
 8000db0:	b082      	sub	sp, #8
 8000db2:	af00      	add	r7, sp, #0
 8000db4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000db6:	6878      	ldr	r0, [r7, #4]
 8000db8:	f7ff ffb0 	bl	8000d1c <SysTick_Config>
 8000dbc:	4603      	mov	r3, r0
}
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	3708      	adds	r7, #8
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	bd80      	pop	{r7, pc}
	...

08000dc8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	b089      	sub	sp, #36	; 0x24
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
 8000dd0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8000dda:	2300      	movs	r3, #0
 8000ddc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8000dde:	2300      	movs	r3, #0
 8000de0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8000de2:	2300      	movs	r3, #0
 8000de4:	61fb      	str	r3, [r7, #28]
 8000de6:	e175      	b.n	80010d4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8000de8:	2201      	movs	r2, #1
 8000dea:	69fb      	ldr	r3, [r7, #28]
 8000dec:	fa02 f303 	lsl.w	r3, r2, r3
 8000df0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000df2:	683b      	ldr	r3, [r7, #0]
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	697a      	ldr	r2, [r7, #20]
 8000df8:	4013      	ands	r3, r2
 8000dfa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000dfc:	693a      	ldr	r2, [r7, #16]
 8000dfe:	697b      	ldr	r3, [r7, #20]
 8000e00:	429a      	cmp	r2, r3
 8000e02:	f040 8164 	bne.w	80010ce <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000e06:	683b      	ldr	r3, [r7, #0]
 8000e08:	685b      	ldr	r3, [r3, #4]
 8000e0a:	f003 0303 	and.w	r3, r3, #3
 8000e0e:	2b01      	cmp	r3, #1
 8000e10:	d005      	beq.n	8000e1e <HAL_GPIO_Init+0x56>
 8000e12:	683b      	ldr	r3, [r7, #0]
 8000e14:	685b      	ldr	r3, [r3, #4]
 8000e16:	f003 0303 	and.w	r3, r3, #3
 8000e1a:	2b02      	cmp	r3, #2
 8000e1c:	d130      	bne.n	8000e80 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	689b      	ldr	r3, [r3, #8]
 8000e22:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000e24:	69fb      	ldr	r3, [r7, #28]
 8000e26:	005b      	lsls	r3, r3, #1
 8000e28:	2203      	movs	r2, #3
 8000e2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e2e:	43db      	mvns	r3, r3
 8000e30:	69ba      	ldr	r2, [r7, #24]
 8000e32:	4013      	ands	r3, r2
 8000e34:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8000e36:	683b      	ldr	r3, [r7, #0]
 8000e38:	68da      	ldr	r2, [r3, #12]
 8000e3a:	69fb      	ldr	r3, [r7, #28]
 8000e3c:	005b      	lsls	r3, r3, #1
 8000e3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e42:	69ba      	ldr	r2, [r7, #24]
 8000e44:	4313      	orrs	r3, r2
 8000e46:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	69ba      	ldr	r2, [r7, #24]
 8000e4c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	685b      	ldr	r3, [r3, #4]
 8000e52:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e54:	2201      	movs	r2, #1
 8000e56:	69fb      	ldr	r3, [r7, #28]
 8000e58:	fa02 f303 	lsl.w	r3, r2, r3
 8000e5c:	43db      	mvns	r3, r3
 8000e5e:	69ba      	ldr	r2, [r7, #24]
 8000e60:	4013      	ands	r3, r2
 8000e62:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e64:	683b      	ldr	r3, [r7, #0]
 8000e66:	685b      	ldr	r3, [r3, #4]
 8000e68:	091b      	lsrs	r3, r3, #4
 8000e6a:	f003 0201 	and.w	r2, r3, #1
 8000e6e:	69fb      	ldr	r3, [r7, #28]
 8000e70:	fa02 f303 	lsl.w	r3, r2, r3
 8000e74:	69ba      	ldr	r2, [r7, #24]
 8000e76:	4313      	orrs	r3, r2
 8000e78:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	69ba      	ldr	r2, [r7, #24]
 8000e7e:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e80:	683b      	ldr	r3, [r7, #0]
 8000e82:	685b      	ldr	r3, [r3, #4]
 8000e84:	f003 0303 	and.w	r3, r3, #3
 8000e88:	2b03      	cmp	r3, #3
 8000e8a:	d017      	beq.n	8000ebc <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	68db      	ldr	r3, [r3, #12]
 8000e90:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8000e92:	69fb      	ldr	r3, [r7, #28]
 8000e94:	005b      	lsls	r3, r3, #1
 8000e96:	2203      	movs	r2, #3
 8000e98:	fa02 f303 	lsl.w	r3, r2, r3
 8000e9c:	43db      	mvns	r3, r3
 8000e9e:	69ba      	ldr	r2, [r7, #24]
 8000ea0:	4013      	ands	r3, r2
 8000ea2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8000ea4:	683b      	ldr	r3, [r7, #0]
 8000ea6:	689a      	ldr	r2, [r3, #8]
 8000ea8:	69fb      	ldr	r3, [r7, #28]
 8000eaa:	005b      	lsls	r3, r3, #1
 8000eac:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb0:	69ba      	ldr	r2, [r7, #24]
 8000eb2:	4313      	orrs	r3, r2
 8000eb4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	69ba      	ldr	r2, [r7, #24]
 8000eba:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ebc:	683b      	ldr	r3, [r7, #0]
 8000ebe:	685b      	ldr	r3, [r3, #4]
 8000ec0:	f003 0303 	and.w	r3, r3, #3
 8000ec4:	2b02      	cmp	r3, #2
 8000ec6:	d123      	bne.n	8000f10 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8000ec8:	69fb      	ldr	r3, [r7, #28]
 8000eca:	08da      	lsrs	r2, r3, #3
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	3208      	adds	r2, #8
 8000ed0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ed4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8000ed6:	69fb      	ldr	r3, [r7, #28]
 8000ed8:	f003 0307 	and.w	r3, r3, #7
 8000edc:	009b      	lsls	r3, r3, #2
 8000ede:	220f      	movs	r2, #15
 8000ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee4:	43db      	mvns	r3, r3
 8000ee6:	69ba      	ldr	r2, [r7, #24]
 8000ee8:	4013      	ands	r3, r2
 8000eea:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8000eec:	683b      	ldr	r3, [r7, #0]
 8000eee:	691a      	ldr	r2, [r3, #16]
 8000ef0:	69fb      	ldr	r3, [r7, #28]
 8000ef2:	f003 0307 	and.w	r3, r3, #7
 8000ef6:	009b      	lsls	r3, r3, #2
 8000ef8:	fa02 f303 	lsl.w	r3, r2, r3
 8000efc:	69ba      	ldr	r2, [r7, #24]
 8000efe:	4313      	orrs	r3, r2
 8000f00:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8000f02:	69fb      	ldr	r3, [r7, #28]
 8000f04:	08da      	lsrs	r2, r3, #3
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	3208      	adds	r2, #8
 8000f0a:	69b9      	ldr	r1, [r7, #24]
 8000f0c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000f16:	69fb      	ldr	r3, [r7, #28]
 8000f18:	005b      	lsls	r3, r3, #1
 8000f1a:	2203      	movs	r2, #3
 8000f1c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f20:	43db      	mvns	r3, r3
 8000f22:	69ba      	ldr	r2, [r7, #24]
 8000f24:	4013      	ands	r3, r2
 8000f26:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000f28:	683b      	ldr	r3, [r7, #0]
 8000f2a:	685b      	ldr	r3, [r3, #4]
 8000f2c:	f003 0203 	and.w	r2, r3, #3
 8000f30:	69fb      	ldr	r3, [r7, #28]
 8000f32:	005b      	lsls	r3, r3, #1
 8000f34:	fa02 f303 	lsl.w	r3, r2, r3
 8000f38:	69ba      	ldr	r2, [r7, #24]
 8000f3a:	4313      	orrs	r3, r2
 8000f3c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	69ba      	ldr	r2, [r7, #24]
 8000f42:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000f44:	683b      	ldr	r3, [r7, #0]
 8000f46:	685b      	ldr	r3, [r3, #4]
 8000f48:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	f000 80be 	beq.w	80010ce <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f52:	4b66      	ldr	r3, [pc, #408]	; (80010ec <HAL_GPIO_Init+0x324>)
 8000f54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f56:	4a65      	ldr	r2, [pc, #404]	; (80010ec <HAL_GPIO_Init+0x324>)
 8000f58:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f5c:	6453      	str	r3, [r2, #68]	; 0x44
 8000f5e:	4b63      	ldr	r3, [pc, #396]	; (80010ec <HAL_GPIO_Init+0x324>)
 8000f60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f62:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f66:	60fb      	str	r3, [r7, #12]
 8000f68:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8000f6a:	4a61      	ldr	r2, [pc, #388]	; (80010f0 <HAL_GPIO_Init+0x328>)
 8000f6c:	69fb      	ldr	r3, [r7, #28]
 8000f6e:	089b      	lsrs	r3, r3, #2
 8000f70:	3302      	adds	r3, #2
 8000f72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f76:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000f78:	69fb      	ldr	r3, [r7, #28]
 8000f7a:	f003 0303 	and.w	r3, r3, #3
 8000f7e:	009b      	lsls	r3, r3, #2
 8000f80:	220f      	movs	r2, #15
 8000f82:	fa02 f303 	lsl.w	r3, r2, r3
 8000f86:	43db      	mvns	r3, r3
 8000f88:	69ba      	ldr	r2, [r7, #24]
 8000f8a:	4013      	ands	r3, r2
 8000f8c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	4a58      	ldr	r2, [pc, #352]	; (80010f4 <HAL_GPIO_Init+0x32c>)
 8000f92:	4293      	cmp	r3, r2
 8000f94:	d037      	beq.n	8001006 <HAL_GPIO_Init+0x23e>
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	4a57      	ldr	r2, [pc, #348]	; (80010f8 <HAL_GPIO_Init+0x330>)
 8000f9a:	4293      	cmp	r3, r2
 8000f9c:	d031      	beq.n	8001002 <HAL_GPIO_Init+0x23a>
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	4a56      	ldr	r2, [pc, #344]	; (80010fc <HAL_GPIO_Init+0x334>)
 8000fa2:	4293      	cmp	r3, r2
 8000fa4:	d02b      	beq.n	8000ffe <HAL_GPIO_Init+0x236>
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	4a55      	ldr	r2, [pc, #340]	; (8001100 <HAL_GPIO_Init+0x338>)
 8000faa:	4293      	cmp	r3, r2
 8000fac:	d025      	beq.n	8000ffa <HAL_GPIO_Init+0x232>
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	4a54      	ldr	r2, [pc, #336]	; (8001104 <HAL_GPIO_Init+0x33c>)
 8000fb2:	4293      	cmp	r3, r2
 8000fb4:	d01f      	beq.n	8000ff6 <HAL_GPIO_Init+0x22e>
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	4a53      	ldr	r2, [pc, #332]	; (8001108 <HAL_GPIO_Init+0x340>)
 8000fba:	4293      	cmp	r3, r2
 8000fbc:	d019      	beq.n	8000ff2 <HAL_GPIO_Init+0x22a>
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	4a52      	ldr	r2, [pc, #328]	; (800110c <HAL_GPIO_Init+0x344>)
 8000fc2:	4293      	cmp	r3, r2
 8000fc4:	d013      	beq.n	8000fee <HAL_GPIO_Init+0x226>
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	4a51      	ldr	r2, [pc, #324]	; (8001110 <HAL_GPIO_Init+0x348>)
 8000fca:	4293      	cmp	r3, r2
 8000fcc:	d00d      	beq.n	8000fea <HAL_GPIO_Init+0x222>
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	4a50      	ldr	r2, [pc, #320]	; (8001114 <HAL_GPIO_Init+0x34c>)
 8000fd2:	4293      	cmp	r3, r2
 8000fd4:	d007      	beq.n	8000fe6 <HAL_GPIO_Init+0x21e>
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	4a4f      	ldr	r2, [pc, #316]	; (8001118 <HAL_GPIO_Init+0x350>)
 8000fda:	4293      	cmp	r3, r2
 8000fdc:	d101      	bne.n	8000fe2 <HAL_GPIO_Init+0x21a>
 8000fde:	2309      	movs	r3, #9
 8000fe0:	e012      	b.n	8001008 <HAL_GPIO_Init+0x240>
 8000fe2:	230a      	movs	r3, #10
 8000fe4:	e010      	b.n	8001008 <HAL_GPIO_Init+0x240>
 8000fe6:	2308      	movs	r3, #8
 8000fe8:	e00e      	b.n	8001008 <HAL_GPIO_Init+0x240>
 8000fea:	2307      	movs	r3, #7
 8000fec:	e00c      	b.n	8001008 <HAL_GPIO_Init+0x240>
 8000fee:	2306      	movs	r3, #6
 8000ff0:	e00a      	b.n	8001008 <HAL_GPIO_Init+0x240>
 8000ff2:	2305      	movs	r3, #5
 8000ff4:	e008      	b.n	8001008 <HAL_GPIO_Init+0x240>
 8000ff6:	2304      	movs	r3, #4
 8000ff8:	e006      	b.n	8001008 <HAL_GPIO_Init+0x240>
 8000ffa:	2303      	movs	r3, #3
 8000ffc:	e004      	b.n	8001008 <HAL_GPIO_Init+0x240>
 8000ffe:	2302      	movs	r3, #2
 8001000:	e002      	b.n	8001008 <HAL_GPIO_Init+0x240>
 8001002:	2301      	movs	r3, #1
 8001004:	e000      	b.n	8001008 <HAL_GPIO_Init+0x240>
 8001006:	2300      	movs	r3, #0
 8001008:	69fa      	ldr	r2, [r7, #28]
 800100a:	f002 0203 	and.w	r2, r2, #3
 800100e:	0092      	lsls	r2, r2, #2
 8001010:	4093      	lsls	r3, r2
 8001012:	69ba      	ldr	r2, [r7, #24]
 8001014:	4313      	orrs	r3, r2
 8001016:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001018:	4935      	ldr	r1, [pc, #212]	; (80010f0 <HAL_GPIO_Init+0x328>)
 800101a:	69fb      	ldr	r3, [r7, #28]
 800101c:	089b      	lsrs	r3, r3, #2
 800101e:	3302      	adds	r3, #2
 8001020:	69ba      	ldr	r2, [r7, #24]
 8001022:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001026:	4b3d      	ldr	r3, [pc, #244]	; (800111c <HAL_GPIO_Init+0x354>)
 8001028:	689b      	ldr	r3, [r3, #8]
 800102a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800102c:	693b      	ldr	r3, [r7, #16]
 800102e:	43db      	mvns	r3, r3
 8001030:	69ba      	ldr	r2, [r7, #24]
 8001032:	4013      	ands	r3, r2
 8001034:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001036:	683b      	ldr	r3, [r7, #0]
 8001038:	685b      	ldr	r3, [r3, #4]
 800103a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800103e:	2b00      	cmp	r3, #0
 8001040:	d003      	beq.n	800104a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001042:	69ba      	ldr	r2, [r7, #24]
 8001044:	693b      	ldr	r3, [r7, #16]
 8001046:	4313      	orrs	r3, r2
 8001048:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800104a:	4a34      	ldr	r2, [pc, #208]	; (800111c <HAL_GPIO_Init+0x354>)
 800104c:	69bb      	ldr	r3, [r7, #24]
 800104e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001050:	4b32      	ldr	r3, [pc, #200]	; (800111c <HAL_GPIO_Init+0x354>)
 8001052:	68db      	ldr	r3, [r3, #12]
 8001054:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001056:	693b      	ldr	r3, [r7, #16]
 8001058:	43db      	mvns	r3, r3
 800105a:	69ba      	ldr	r2, [r7, #24]
 800105c:	4013      	ands	r3, r2
 800105e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001060:	683b      	ldr	r3, [r7, #0]
 8001062:	685b      	ldr	r3, [r3, #4]
 8001064:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001068:	2b00      	cmp	r3, #0
 800106a:	d003      	beq.n	8001074 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800106c:	69ba      	ldr	r2, [r7, #24]
 800106e:	693b      	ldr	r3, [r7, #16]
 8001070:	4313      	orrs	r3, r2
 8001072:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001074:	4a29      	ldr	r2, [pc, #164]	; (800111c <HAL_GPIO_Init+0x354>)
 8001076:	69bb      	ldr	r3, [r7, #24]
 8001078:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800107a:	4b28      	ldr	r3, [pc, #160]	; (800111c <HAL_GPIO_Init+0x354>)
 800107c:	685b      	ldr	r3, [r3, #4]
 800107e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001080:	693b      	ldr	r3, [r7, #16]
 8001082:	43db      	mvns	r3, r3
 8001084:	69ba      	ldr	r2, [r7, #24]
 8001086:	4013      	ands	r3, r2
 8001088:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800108a:	683b      	ldr	r3, [r7, #0]
 800108c:	685b      	ldr	r3, [r3, #4]
 800108e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001092:	2b00      	cmp	r3, #0
 8001094:	d003      	beq.n	800109e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001096:	69ba      	ldr	r2, [r7, #24]
 8001098:	693b      	ldr	r3, [r7, #16]
 800109a:	4313      	orrs	r3, r2
 800109c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800109e:	4a1f      	ldr	r2, [pc, #124]	; (800111c <HAL_GPIO_Init+0x354>)
 80010a0:	69bb      	ldr	r3, [r7, #24]
 80010a2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80010a4:	4b1d      	ldr	r3, [pc, #116]	; (800111c <HAL_GPIO_Init+0x354>)
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010aa:	693b      	ldr	r3, [r7, #16]
 80010ac:	43db      	mvns	r3, r3
 80010ae:	69ba      	ldr	r2, [r7, #24]
 80010b0:	4013      	ands	r3, r2
 80010b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80010b4:	683b      	ldr	r3, [r7, #0]
 80010b6:	685b      	ldr	r3, [r3, #4]
 80010b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d003      	beq.n	80010c8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80010c0:	69ba      	ldr	r2, [r7, #24]
 80010c2:	693b      	ldr	r3, [r7, #16]
 80010c4:	4313      	orrs	r3, r2
 80010c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80010c8:	4a14      	ldr	r2, [pc, #80]	; (800111c <HAL_GPIO_Init+0x354>)
 80010ca:	69bb      	ldr	r3, [r7, #24]
 80010cc:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80010ce:	69fb      	ldr	r3, [r7, #28]
 80010d0:	3301      	adds	r3, #1
 80010d2:	61fb      	str	r3, [r7, #28]
 80010d4:	69fb      	ldr	r3, [r7, #28]
 80010d6:	2b0f      	cmp	r3, #15
 80010d8:	f67f ae86 	bls.w	8000de8 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80010dc:	bf00      	nop
 80010de:	bf00      	nop
 80010e0:	3724      	adds	r7, #36	; 0x24
 80010e2:	46bd      	mov	sp, r7
 80010e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e8:	4770      	bx	lr
 80010ea:	bf00      	nop
 80010ec:	40023800 	.word	0x40023800
 80010f0:	40013800 	.word	0x40013800
 80010f4:	40020000 	.word	0x40020000
 80010f8:	40020400 	.word	0x40020400
 80010fc:	40020800 	.word	0x40020800
 8001100:	40020c00 	.word	0x40020c00
 8001104:	40021000 	.word	0x40021000
 8001108:	40021400 	.word	0x40021400
 800110c:	40021800 	.word	0x40021800
 8001110:	40021c00 	.word	0x40021c00
 8001114:	40022000 	.word	0x40022000
 8001118:	40022400 	.word	0x40022400
 800111c:	40013c00 	.word	0x40013c00

08001120 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001120:	b480      	push	{r7}
 8001122:	b083      	sub	sp, #12
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
 8001128:	460b      	mov	r3, r1
 800112a:	807b      	strh	r3, [r7, #2]
 800112c:	4613      	mov	r3, r2
 800112e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001130:	787b      	ldrb	r3, [r7, #1]
 8001132:	2b00      	cmp	r3, #0
 8001134:	d003      	beq.n	800113e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001136:	887a      	ldrh	r2, [r7, #2]
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 800113c:	e003      	b.n	8001146 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800113e:	887b      	ldrh	r3, [r7, #2]
 8001140:	041a      	lsls	r2, r3, #16
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	619a      	str	r2, [r3, #24]
}
 8001146:	bf00      	nop
 8001148:	370c      	adds	r7, #12
 800114a:	46bd      	mov	sp, r7
 800114c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001150:	4770      	bx	lr
	...

08001154 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b086      	sub	sp, #24
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800115c:	2300      	movs	r3, #0
 800115e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	2b00      	cmp	r3, #0
 8001164:	d101      	bne.n	800116a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8001166:	2301      	movs	r3, #1
 8001168:	e29b      	b.n	80016a2 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	f003 0301 	and.w	r3, r3, #1
 8001172:	2b00      	cmp	r3, #0
 8001174:	f000 8087 	beq.w	8001286 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001178:	4b96      	ldr	r3, [pc, #600]	; (80013d4 <HAL_RCC_OscConfig+0x280>)
 800117a:	689b      	ldr	r3, [r3, #8]
 800117c:	f003 030c 	and.w	r3, r3, #12
 8001180:	2b04      	cmp	r3, #4
 8001182:	d00c      	beq.n	800119e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001184:	4b93      	ldr	r3, [pc, #588]	; (80013d4 <HAL_RCC_OscConfig+0x280>)
 8001186:	689b      	ldr	r3, [r3, #8]
 8001188:	f003 030c 	and.w	r3, r3, #12
 800118c:	2b08      	cmp	r3, #8
 800118e:	d112      	bne.n	80011b6 <HAL_RCC_OscConfig+0x62>
 8001190:	4b90      	ldr	r3, [pc, #576]	; (80013d4 <HAL_RCC_OscConfig+0x280>)
 8001192:	685b      	ldr	r3, [r3, #4]
 8001194:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001198:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800119c:	d10b      	bne.n	80011b6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800119e:	4b8d      	ldr	r3, [pc, #564]	; (80013d4 <HAL_RCC_OscConfig+0x280>)
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d06c      	beq.n	8001284 <HAL_RCC_OscConfig+0x130>
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	685b      	ldr	r3, [r3, #4]
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d168      	bne.n	8001284 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80011b2:	2301      	movs	r3, #1
 80011b4:	e275      	b.n	80016a2 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	685b      	ldr	r3, [r3, #4]
 80011ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80011be:	d106      	bne.n	80011ce <HAL_RCC_OscConfig+0x7a>
 80011c0:	4b84      	ldr	r3, [pc, #528]	; (80013d4 <HAL_RCC_OscConfig+0x280>)
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	4a83      	ldr	r2, [pc, #524]	; (80013d4 <HAL_RCC_OscConfig+0x280>)
 80011c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011ca:	6013      	str	r3, [r2, #0]
 80011cc:	e02e      	b.n	800122c <HAL_RCC_OscConfig+0xd8>
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	685b      	ldr	r3, [r3, #4]
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d10c      	bne.n	80011f0 <HAL_RCC_OscConfig+0x9c>
 80011d6:	4b7f      	ldr	r3, [pc, #508]	; (80013d4 <HAL_RCC_OscConfig+0x280>)
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	4a7e      	ldr	r2, [pc, #504]	; (80013d4 <HAL_RCC_OscConfig+0x280>)
 80011dc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80011e0:	6013      	str	r3, [r2, #0]
 80011e2:	4b7c      	ldr	r3, [pc, #496]	; (80013d4 <HAL_RCC_OscConfig+0x280>)
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	4a7b      	ldr	r2, [pc, #492]	; (80013d4 <HAL_RCC_OscConfig+0x280>)
 80011e8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80011ec:	6013      	str	r3, [r2, #0]
 80011ee:	e01d      	b.n	800122c <HAL_RCC_OscConfig+0xd8>
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	685b      	ldr	r3, [r3, #4]
 80011f4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80011f8:	d10c      	bne.n	8001214 <HAL_RCC_OscConfig+0xc0>
 80011fa:	4b76      	ldr	r3, [pc, #472]	; (80013d4 <HAL_RCC_OscConfig+0x280>)
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	4a75      	ldr	r2, [pc, #468]	; (80013d4 <HAL_RCC_OscConfig+0x280>)
 8001200:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001204:	6013      	str	r3, [r2, #0]
 8001206:	4b73      	ldr	r3, [pc, #460]	; (80013d4 <HAL_RCC_OscConfig+0x280>)
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	4a72      	ldr	r2, [pc, #456]	; (80013d4 <HAL_RCC_OscConfig+0x280>)
 800120c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001210:	6013      	str	r3, [r2, #0]
 8001212:	e00b      	b.n	800122c <HAL_RCC_OscConfig+0xd8>
 8001214:	4b6f      	ldr	r3, [pc, #444]	; (80013d4 <HAL_RCC_OscConfig+0x280>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	4a6e      	ldr	r2, [pc, #440]	; (80013d4 <HAL_RCC_OscConfig+0x280>)
 800121a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800121e:	6013      	str	r3, [r2, #0]
 8001220:	4b6c      	ldr	r3, [pc, #432]	; (80013d4 <HAL_RCC_OscConfig+0x280>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	4a6b      	ldr	r2, [pc, #428]	; (80013d4 <HAL_RCC_OscConfig+0x280>)
 8001226:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800122a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	685b      	ldr	r3, [r3, #4]
 8001230:	2b00      	cmp	r3, #0
 8001232:	d013      	beq.n	800125c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001234:	f7ff fcb2 	bl	8000b9c <HAL_GetTick>
 8001238:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800123a:	e008      	b.n	800124e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800123c:	f7ff fcae 	bl	8000b9c <HAL_GetTick>
 8001240:	4602      	mov	r2, r0
 8001242:	693b      	ldr	r3, [r7, #16]
 8001244:	1ad3      	subs	r3, r2, r3
 8001246:	2b64      	cmp	r3, #100	; 0x64
 8001248:	d901      	bls.n	800124e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800124a:	2303      	movs	r3, #3
 800124c:	e229      	b.n	80016a2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800124e:	4b61      	ldr	r3, [pc, #388]	; (80013d4 <HAL_RCC_OscConfig+0x280>)
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001256:	2b00      	cmp	r3, #0
 8001258:	d0f0      	beq.n	800123c <HAL_RCC_OscConfig+0xe8>
 800125a:	e014      	b.n	8001286 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800125c:	f7ff fc9e 	bl	8000b9c <HAL_GetTick>
 8001260:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001262:	e008      	b.n	8001276 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001264:	f7ff fc9a 	bl	8000b9c <HAL_GetTick>
 8001268:	4602      	mov	r2, r0
 800126a:	693b      	ldr	r3, [r7, #16]
 800126c:	1ad3      	subs	r3, r2, r3
 800126e:	2b64      	cmp	r3, #100	; 0x64
 8001270:	d901      	bls.n	8001276 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001272:	2303      	movs	r3, #3
 8001274:	e215      	b.n	80016a2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001276:	4b57      	ldr	r3, [pc, #348]	; (80013d4 <HAL_RCC_OscConfig+0x280>)
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800127e:	2b00      	cmp	r3, #0
 8001280:	d1f0      	bne.n	8001264 <HAL_RCC_OscConfig+0x110>
 8001282:	e000      	b.n	8001286 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001284:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	f003 0302 	and.w	r3, r3, #2
 800128e:	2b00      	cmp	r3, #0
 8001290:	d069      	beq.n	8001366 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001292:	4b50      	ldr	r3, [pc, #320]	; (80013d4 <HAL_RCC_OscConfig+0x280>)
 8001294:	689b      	ldr	r3, [r3, #8]
 8001296:	f003 030c 	and.w	r3, r3, #12
 800129a:	2b00      	cmp	r3, #0
 800129c:	d00b      	beq.n	80012b6 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800129e:	4b4d      	ldr	r3, [pc, #308]	; (80013d4 <HAL_RCC_OscConfig+0x280>)
 80012a0:	689b      	ldr	r3, [r3, #8]
 80012a2:	f003 030c 	and.w	r3, r3, #12
 80012a6:	2b08      	cmp	r3, #8
 80012a8:	d11c      	bne.n	80012e4 <HAL_RCC_OscConfig+0x190>
 80012aa:	4b4a      	ldr	r3, [pc, #296]	; (80013d4 <HAL_RCC_OscConfig+0x280>)
 80012ac:	685b      	ldr	r3, [r3, #4]
 80012ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d116      	bne.n	80012e4 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012b6:	4b47      	ldr	r3, [pc, #284]	; (80013d4 <HAL_RCC_OscConfig+0x280>)
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	f003 0302 	and.w	r3, r3, #2
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d005      	beq.n	80012ce <HAL_RCC_OscConfig+0x17a>
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	68db      	ldr	r3, [r3, #12]
 80012c6:	2b01      	cmp	r3, #1
 80012c8:	d001      	beq.n	80012ce <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80012ca:	2301      	movs	r3, #1
 80012cc:	e1e9      	b.n	80016a2 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012ce:	4b41      	ldr	r3, [pc, #260]	; (80013d4 <HAL_RCC_OscConfig+0x280>)
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	691b      	ldr	r3, [r3, #16]
 80012da:	00db      	lsls	r3, r3, #3
 80012dc:	493d      	ldr	r1, [pc, #244]	; (80013d4 <HAL_RCC_OscConfig+0x280>)
 80012de:	4313      	orrs	r3, r2
 80012e0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012e2:	e040      	b.n	8001366 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	68db      	ldr	r3, [r3, #12]
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d023      	beq.n	8001334 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80012ec:	4b39      	ldr	r3, [pc, #228]	; (80013d4 <HAL_RCC_OscConfig+0x280>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	4a38      	ldr	r2, [pc, #224]	; (80013d4 <HAL_RCC_OscConfig+0x280>)
 80012f2:	f043 0301 	orr.w	r3, r3, #1
 80012f6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012f8:	f7ff fc50 	bl	8000b9c <HAL_GetTick>
 80012fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012fe:	e008      	b.n	8001312 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001300:	f7ff fc4c 	bl	8000b9c <HAL_GetTick>
 8001304:	4602      	mov	r2, r0
 8001306:	693b      	ldr	r3, [r7, #16]
 8001308:	1ad3      	subs	r3, r2, r3
 800130a:	2b02      	cmp	r3, #2
 800130c:	d901      	bls.n	8001312 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800130e:	2303      	movs	r3, #3
 8001310:	e1c7      	b.n	80016a2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001312:	4b30      	ldr	r3, [pc, #192]	; (80013d4 <HAL_RCC_OscConfig+0x280>)
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	f003 0302 	and.w	r3, r3, #2
 800131a:	2b00      	cmp	r3, #0
 800131c:	d0f0      	beq.n	8001300 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800131e:	4b2d      	ldr	r3, [pc, #180]	; (80013d4 <HAL_RCC_OscConfig+0x280>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	691b      	ldr	r3, [r3, #16]
 800132a:	00db      	lsls	r3, r3, #3
 800132c:	4929      	ldr	r1, [pc, #164]	; (80013d4 <HAL_RCC_OscConfig+0x280>)
 800132e:	4313      	orrs	r3, r2
 8001330:	600b      	str	r3, [r1, #0]
 8001332:	e018      	b.n	8001366 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001334:	4b27      	ldr	r3, [pc, #156]	; (80013d4 <HAL_RCC_OscConfig+0x280>)
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	4a26      	ldr	r2, [pc, #152]	; (80013d4 <HAL_RCC_OscConfig+0x280>)
 800133a:	f023 0301 	bic.w	r3, r3, #1
 800133e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001340:	f7ff fc2c 	bl	8000b9c <HAL_GetTick>
 8001344:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001346:	e008      	b.n	800135a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001348:	f7ff fc28 	bl	8000b9c <HAL_GetTick>
 800134c:	4602      	mov	r2, r0
 800134e:	693b      	ldr	r3, [r7, #16]
 8001350:	1ad3      	subs	r3, r2, r3
 8001352:	2b02      	cmp	r3, #2
 8001354:	d901      	bls.n	800135a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001356:	2303      	movs	r3, #3
 8001358:	e1a3      	b.n	80016a2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800135a:	4b1e      	ldr	r3, [pc, #120]	; (80013d4 <HAL_RCC_OscConfig+0x280>)
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	f003 0302 	and.w	r3, r3, #2
 8001362:	2b00      	cmp	r3, #0
 8001364:	d1f0      	bne.n	8001348 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	f003 0308 	and.w	r3, r3, #8
 800136e:	2b00      	cmp	r3, #0
 8001370:	d038      	beq.n	80013e4 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	695b      	ldr	r3, [r3, #20]
 8001376:	2b00      	cmp	r3, #0
 8001378:	d019      	beq.n	80013ae <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800137a:	4b16      	ldr	r3, [pc, #88]	; (80013d4 <HAL_RCC_OscConfig+0x280>)
 800137c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800137e:	4a15      	ldr	r2, [pc, #84]	; (80013d4 <HAL_RCC_OscConfig+0x280>)
 8001380:	f043 0301 	orr.w	r3, r3, #1
 8001384:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001386:	f7ff fc09 	bl	8000b9c <HAL_GetTick>
 800138a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800138c:	e008      	b.n	80013a0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800138e:	f7ff fc05 	bl	8000b9c <HAL_GetTick>
 8001392:	4602      	mov	r2, r0
 8001394:	693b      	ldr	r3, [r7, #16]
 8001396:	1ad3      	subs	r3, r2, r3
 8001398:	2b02      	cmp	r3, #2
 800139a:	d901      	bls.n	80013a0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800139c:	2303      	movs	r3, #3
 800139e:	e180      	b.n	80016a2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013a0:	4b0c      	ldr	r3, [pc, #48]	; (80013d4 <HAL_RCC_OscConfig+0x280>)
 80013a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80013a4:	f003 0302 	and.w	r3, r3, #2
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d0f0      	beq.n	800138e <HAL_RCC_OscConfig+0x23a>
 80013ac:	e01a      	b.n	80013e4 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80013ae:	4b09      	ldr	r3, [pc, #36]	; (80013d4 <HAL_RCC_OscConfig+0x280>)
 80013b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80013b2:	4a08      	ldr	r2, [pc, #32]	; (80013d4 <HAL_RCC_OscConfig+0x280>)
 80013b4:	f023 0301 	bic.w	r3, r3, #1
 80013b8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013ba:	f7ff fbef 	bl	8000b9c <HAL_GetTick>
 80013be:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013c0:	e00a      	b.n	80013d8 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80013c2:	f7ff fbeb 	bl	8000b9c <HAL_GetTick>
 80013c6:	4602      	mov	r2, r0
 80013c8:	693b      	ldr	r3, [r7, #16]
 80013ca:	1ad3      	subs	r3, r2, r3
 80013cc:	2b02      	cmp	r3, #2
 80013ce:	d903      	bls.n	80013d8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80013d0:	2303      	movs	r3, #3
 80013d2:	e166      	b.n	80016a2 <HAL_RCC_OscConfig+0x54e>
 80013d4:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013d8:	4b92      	ldr	r3, [pc, #584]	; (8001624 <HAL_RCC_OscConfig+0x4d0>)
 80013da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80013dc:	f003 0302 	and.w	r3, r3, #2
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d1ee      	bne.n	80013c2 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	f003 0304 	and.w	r3, r3, #4
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	f000 80a4 	beq.w	800153a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80013f2:	4b8c      	ldr	r3, [pc, #560]	; (8001624 <HAL_RCC_OscConfig+0x4d0>)
 80013f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d10d      	bne.n	800141a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80013fe:	4b89      	ldr	r3, [pc, #548]	; (8001624 <HAL_RCC_OscConfig+0x4d0>)
 8001400:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001402:	4a88      	ldr	r2, [pc, #544]	; (8001624 <HAL_RCC_OscConfig+0x4d0>)
 8001404:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001408:	6413      	str	r3, [r2, #64]	; 0x40
 800140a:	4b86      	ldr	r3, [pc, #536]	; (8001624 <HAL_RCC_OscConfig+0x4d0>)
 800140c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800140e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001412:	60bb      	str	r3, [r7, #8]
 8001414:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001416:	2301      	movs	r3, #1
 8001418:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800141a:	4b83      	ldr	r3, [pc, #524]	; (8001628 <HAL_RCC_OscConfig+0x4d4>)
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001422:	2b00      	cmp	r3, #0
 8001424:	d118      	bne.n	8001458 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8001426:	4b80      	ldr	r3, [pc, #512]	; (8001628 <HAL_RCC_OscConfig+0x4d4>)
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	4a7f      	ldr	r2, [pc, #508]	; (8001628 <HAL_RCC_OscConfig+0x4d4>)
 800142c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001430:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001432:	f7ff fbb3 	bl	8000b9c <HAL_GetTick>
 8001436:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001438:	e008      	b.n	800144c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800143a:	f7ff fbaf 	bl	8000b9c <HAL_GetTick>
 800143e:	4602      	mov	r2, r0
 8001440:	693b      	ldr	r3, [r7, #16]
 8001442:	1ad3      	subs	r3, r2, r3
 8001444:	2b64      	cmp	r3, #100	; 0x64
 8001446:	d901      	bls.n	800144c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001448:	2303      	movs	r3, #3
 800144a:	e12a      	b.n	80016a2 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800144c:	4b76      	ldr	r3, [pc, #472]	; (8001628 <HAL_RCC_OscConfig+0x4d4>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001454:	2b00      	cmp	r3, #0
 8001456:	d0f0      	beq.n	800143a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	689b      	ldr	r3, [r3, #8]
 800145c:	2b01      	cmp	r3, #1
 800145e:	d106      	bne.n	800146e <HAL_RCC_OscConfig+0x31a>
 8001460:	4b70      	ldr	r3, [pc, #448]	; (8001624 <HAL_RCC_OscConfig+0x4d0>)
 8001462:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001464:	4a6f      	ldr	r2, [pc, #444]	; (8001624 <HAL_RCC_OscConfig+0x4d0>)
 8001466:	f043 0301 	orr.w	r3, r3, #1
 800146a:	6713      	str	r3, [r2, #112]	; 0x70
 800146c:	e02d      	b.n	80014ca <HAL_RCC_OscConfig+0x376>
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	689b      	ldr	r3, [r3, #8]
 8001472:	2b00      	cmp	r3, #0
 8001474:	d10c      	bne.n	8001490 <HAL_RCC_OscConfig+0x33c>
 8001476:	4b6b      	ldr	r3, [pc, #428]	; (8001624 <HAL_RCC_OscConfig+0x4d0>)
 8001478:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800147a:	4a6a      	ldr	r2, [pc, #424]	; (8001624 <HAL_RCC_OscConfig+0x4d0>)
 800147c:	f023 0301 	bic.w	r3, r3, #1
 8001480:	6713      	str	r3, [r2, #112]	; 0x70
 8001482:	4b68      	ldr	r3, [pc, #416]	; (8001624 <HAL_RCC_OscConfig+0x4d0>)
 8001484:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001486:	4a67      	ldr	r2, [pc, #412]	; (8001624 <HAL_RCC_OscConfig+0x4d0>)
 8001488:	f023 0304 	bic.w	r3, r3, #4
 800148c:	6713      	str	r3, [r2, #112]	; 0x70
 800148e:	e01c      	b.n	80014ca <HAL_RCC_OscConfig+0x376>
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	689b      	ldr	r3, [r3, #8]
 8001494:	2b05      	cmp	r3, #5
 8001496:	d10c      	bne.n	80014b2 <HAL_RCC_OscConfig+0x35e>
 8001498:	4b62      	ldr	r3, [pc, #392]	; (8001624 <HAL_RCC_OscConfig+0x4d0>)
 800149a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800149c:	4a61      	ldr	r2, [pc, #388]	; (8001624 <HAL_RCC_OscConfig+0x4d0>)
 800149e:	f043 0304 	orr.w	r3, r3, #4
 80014a2:	6713      	str	r3, [r2, #112]	; 0x70
 80014a4:	4b5f      	ldr	r3, [pc, #380]	; (8001624 <HAL_RCC_OscConfig+0x4d0>)
 80014a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014a8:	4a5e      	ldr	r2, [pc, #376]	; (8001624 <HAL_RCC_OscConfig+0x4d0>)
 80014aa:	f043 0301 	orr.w	r3, r3, #1
 80014ae:	6713      	str	r3, [r2, #112]	; 0x70
 80014b0:	e00b      	b.n	80014ca <HAL_RCC_OscConfig+0x376>
 80014b2:	4b5c      	ldr	r3, [pc, #368]	; (8001624 <HAL_RCC_OscConfig+0x4d0>)
 80014b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014b6:	4a5b      	ldr	r2, [pc, #364]	; (8001624 <HAL_RCC_OscConfig+0x4d0>)
 80014b8:	f023 0301 	bic.w	r3, r3, #1
 80014bc:	6713      	str	r3, [r2, #112]	; 0x70
 80014be:	4b59      	ldr	r3, [pc, #356]	; (8001624 <HAL_RCC_OscConfig+0x4d0>)
 80014c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014c2:	4a58      	ldr	r2, [pc, #352]	; (8001624 <HAL_RCC_OscConfig+0x4d0>)
 80014c4:	f023 0304 	bic.w	r3, r3, #4
 80014c8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	689b      	ldr	r3, [r3, #8]
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d015      	beq.n	80014fe <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014d2:	f7ff fb63 	bl	8000b9c <HAL_GetTick>
 80014d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014d8:	e00a      	b.n	80014f0 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80014da:	f7ff fb5f 	bl	8000b9c <HAL_GetTick>
 80014de:	4602      	mov	r2, r0
 80014e0:	693b      	ldr	r3, [r7, #16]
 80014e2:	1ad3      	subs	r3, r2, r3
 80014e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80014e8:	4293      	cmp	r3, r2
 80014ea:	d901      	bls.n	80014f0 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80014ec:	2303      	movs	r3, #3
 80014ee:	e0d8      	b.n	80016a2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014f0:	4b4c      	ldr	r3, [pc, #304]	; (8001624 <HAL_RCC_OscConfig+0x4d0>)
 80014f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014f4:	f003 0302 	and.w	r3, r3, #2
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d0ee      	beq.n	80014da <HAL_RCC_OscConfig+0x386>
 80014fc:	e014      	b.n	8001528 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014fe:	f7ff fb4d 	bl	8000b9c <HAL_GetTick>
 8001502:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001504:	e00a      	b.n	800151c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001506:	f7ff fb49 	bl	8000b9c <HAL_GetTick>
 800150a:	4602      	mov	r2, r0
 800150c:	693b      	ldr	r3, [r7, #16]
 800150e:	1ad3      	subs	r3, r2, r3
 8001510:	f241 3288 	movw	r2, #5000	; 0x1388
 8001514:	4293      	cmp	r3, r2
 8001516:	d901      	bls.n	800151c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8001518:	2303      	movs	r3, #3
 800151a:	e0c2      	b.n	80016a2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800151c:	4b41      	ldr	r3, [pc, #260]	; (8001624 <HAL_RCC_OscConfig+0x4d0>)
 800151e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001520:	f003 0302 	and.w	r3, r3, #2
 8001524:	2b00      	cmp	r3, #0
 8001526:	d1ee      	bne.n	8001506 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001528:	7dfb      	ldrb	r3, [r7, #23]
 800152a:	2b01      	cmp	r3, #1
 800152c:	d105      	bne.n	800153a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800152e:	4b3d      	ldr	r3, [pc, #244]	; (8001624 <HAL_RCC_OscConfig+0x4d0>)
 8001530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001532:	4a3c      	ldr	r2, [pc, #240]	; (8001624 <HAL_RCC_OscConfig+0x4d0>)
 8001534:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001538:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	699b      	ldr	r3, [r3, #24]
 800153e:	2b00      	cmp	r3, #0
 8001540:	f000 80ae 	beq.w	80016a0 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001544:	4b37      	ldr	r3, [pc, #220]	; (8001624 <HAL_RCC_OscConfig+0x4d0>)
 8001546:	689b      	ldr	r3, [r3, #8]
 8001548:	f003 030c 	and.w	r3, r3, #12
 800154c:	2b08      	cmp	r3, #8
 800154e:	d06d      	beq.n	800162c <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	699b      	ldr	r3, [r3, #24]
 8001554:	2b02      	cmp	r3, #2
 8001556:	d14b      	bne.n	80015f0 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001558:	4b32      	ldr	r3, [pc, #200]	; (8001624 <HAL_RCC_OscConfig+0x4d0>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	4a31      	ldr	r2, [pc, #196]	; (8001624 <HAL_RCC_OscConfig+0x4d0>)
 800155e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001562:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001564:	f7ff fb1a 	bl	8000b9c <HAL_GetTick>
 8001568:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800156a:	e008      	b.n	800157e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800156c:	f7ff fb16 	bl	8000b9c <HAL_GetTick>
 8001570:	4602      	mov	r2, r0
 8001572:	693b      	ldr	r3, [r7, #16]
 8001574:	1ad3      	subs	r3, r2, r3
 8001576:	2b02      	cmp	r3, #2
 8001578:	d901      	bls.n	800157e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800157a:	2303      	movs	r3, #3
 800157c:	e091      	b.n	80016a2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800157e:	4b29      	ldr	r3, [pc, #164]	; (8001624 <HAL_RCC_OscConfig+0x4d0>)
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001586:	2b00      	cmp	r3, #0
 8001588:	d1f0      	bne.n	800156c <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	69da      	ldr	r2, [r3, #28]
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	6a1b      	ldr	r3, [r3, #32]
 8001592:	431a      	orrs	r2, r3
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001598:	019b      	lsls	r3, r3, #6
 800159a:	431a      	orrs	r2, r3
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015a0:	085b      	lsrs	r3, r3, #1
 80015a2:	3b01      	subs	r3, #1
 80015a4:	041b      	lsls	r3, r3, #16
 80015a6:	431a      	orrs	r2, r3
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015ac:	061b      	lsls	r3, r3, #24
 80015ae:	431a      	orrs	r2, r3
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015b4:	071b      	lsls	r3, r3, #28
 80015b6:	491b      	ldr	r1, [pc, #108]	; (8001624 <HAL_RCC_OscConfig+0x4d0>)
 80015b8:	4313      	orrs	r3, r2
 80015ba:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80015bc:	4b19      	ldr	r3, [pc, #100]	; (8001624 <HAL_RCC_OscConfig+0x4d0>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	4a18      	ldr	r2, [pc, #96]	; (8001624 <HAL_RCC_OscConfig+0x4d0>)
 80015c2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80015c6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015c8:	f7ff fae8 	bl	8000b9c <HAL_GetTick>
 80015cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80015ce:	e008      	b.n	80015e2 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015d0:	f7ff fae4 	bl	8000b9c <HAL_GetTick>
 80015d4:	4602      	mov	r2, r0
 80015d6:	693b      	ldr	r3, [r7, #16]
 80015d8:	1ad3      	subs	r3, r2, r3
 80015da:	2b02      	cmp	r3, #2
 80015dc:	d901      	bls.n	80015e2 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80015de:	2303      	movs	r3, #3
 80015e0:	e05f      	b.n	80016a2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80015e2:	4b10      	ldr	r3, [pc, #64]	; (8001624 <HAL_RCC_OscConfig+0x4d0>)
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d0f0      	beq.n	80015d0 <HAL_RCC_OscConfig+0x47c>
 80015ee:	e057      	b.n	80016a0 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015f0:	4b0c      	ldr	r3, [pc, #48]	; (8001624 <HAL_RCC_OscConfig+0x4d0>)
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	4a0b      	ldr	r2, [pc, #44]	; (8001624 <HAL_RCC_OscConfig+0x4d0>)
 80015f6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80015fa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015fc:	f7ff face 	bl	8000b9c <HAL_GetTick>
 8001600:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001602:	e008      	b.n	8001616 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001604:	f7ff faca 	bl	8000b9c <HAL_GetTick>
 8001608:	4602      	mov	r2, r0
 800160a:	693b      	ldr	r3, [r7, #16]
 800160c:	1ad3      	subs	r3, r2, r3
 800160e:	2b02      	cmp	r3, #2
 8001610:	d901      	bls.n	8001616 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8001612:	2303      	movs	r3, #3
 8001614:	e045      	b.n	80016a2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001616:	4b03      	ldr	r3, [pc, #12]	; (8001624 <HAL_RCC_OscConfig+0x4d0>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800161e:	2b00      	cmp	r3, #0
 8001620:	d1f0      	bne.n	8001604 <HAL_RCC_OscConfig+0x4b0>
 8001622:	e03d      	b.n	80016a0 <HAL_RCC_OscConfig+0x54c>
 8001624:	40023800 	.word	0x40023800
 8001628:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800162c:	4b1f      	ldr	r3, [pc, #124]	; (80016ac <HAL_RCC_OscConfig+0x558>)
 800162e:	685b      	ldr	r3, [r3, #4]
 8001630:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	699b      	ldr	r3, [r3, #24]
 8001636:	2b01      	cmp	r3, #1
 8001638:	d030      	beq.n	800169c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001644:	429a      	cmp	r2, r3
 8001646:	d129      	bne.n	800169c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001652:	429a      	cmp	r2, r3
 8001654:	d122      	bne.n	800169c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001656:	68fa      	ldr	r2, [r7, #12]
 8001658:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800165c:	4013      	ands	r3, r2
 800165e:	687a      	ldr	r2, [r7, #4]
 8001660:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001662:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001664:	4293      	cmp	r3, r2
 8001666:	d119      	bne.n	800169c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001672:	085b      	lsrs	r3, r3, #1
 8001674:	3b01      	subs	r3, #1
 8001676:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001678:	429a      	cmp	r2, r3
 800167a:	d10f      	bne.n	800169c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001686:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001688:	429a      	cmp	r2, r3
 800168a:	d107      	bne.n	800169c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001696:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001698:	429a      	cmp	r2, r3
 800169a:	d001      	beq.n	80016a0 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 800169c:	2301      	movs	r3, #1
 800169e:	e000      	b.n	80016a2 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 80016a0:	2300      	movs	r3, #0
}
 80016a2:	4618      	mov	r0, r3
 80016a4:	3718      	adds	r7, #24
 80016a6:	46bd      	mov	sp, r7
 80016a8:	bd80      	pop	{r7, pc}
 80016aa:	bf00      	nop
 80016ac:	40023800 	.word	0x40023800

080016b0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b084      	sub	sp, #16
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
 80016b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80016ba:	2300      	movs	r3, #0
 80016bc:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d101      	bne.n	80016c8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80016c4:	2301      	movs	r3, #1
 80016c6:	e0d0      	b.n	800186a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80016c8:	4b6a      	ldr	r3, [pc, #424]	; (8001874 <HAL_RCC_ClockConfig+0x1c4>)
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	f003 030f 	and.w	r3, r3, #15
 80016d0:	683a      	ldr	r2, [r7, #0]
 80016d2:	429a      	cmp	r2, r3
 80016d4:	d910      	bls.n	80016f8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016d6:	4b67      	ldr	r3, [pc, #412]	; (8001874 <HAL_RCC_ClockConfig+0x1c4>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f023 020f 	bic.w	r2, r3, #15
 80016de:	4965      	ldr	r1, [pc, #404]	; (8001874 <HAL_RCC_ClockConfig+0x1c4>)
 80016e0:	683b      	ldr	r3, [r7, #0]
 80016e2:	4313      	orrs	r3, r2
 80016e4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80016e6:	4b63      	ldr	r3, [pc, #396]	; (8001874 <HAL_RCC_ClockConfig+0x1c4>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	f003 030f 	and.w	r3, r3, #15
 80016ee:	683a      	ldr	r2, [r7, #0]
 80016f0:	429a      	cmp	r2, r3
 80016f2:	d001      	beq.n	80016f8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80016f4:	2301      	movs	r3, #1
 80016f6:	e0b8      	b.n	800186a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	f003 0302 	and.w	r3, r3, #2
 8001700:	2b00      	cmp	r3, #0
 8001702:	d020      	beq.n	8001746 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	f003 0304 	and.w	r3, r3, #4
 800170c:	2b00      	cmp	r3, #0
 800170e:	d005      	beq.n	800171c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001710:	4b59      	ldr	r3, [pc, #356]	; (8001878 <HAL_RCC_ClockConfig+0x1c8>)
 8001712:	689b      	ldr	r3, [r3, #8]
 8001714:	4a58      	ldr	r2, [pc, #352]	; (8001878 <HAL_RCC_ClockConfig+0x1c8>)
 8001716:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800171a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	f003 0308 	and.w	r3, r3, #8
 8001724:	2b00      	cmp	r3, #0
 8001726:	d005      	beq.n	8001734 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001728:	4b53      	ldr	r3, [pc, #332]	; (8001878 <HAL_RCC_ClockConfig+0x1c8>)
 800172a:	689b      	ldr	r3, [r3, #8]
 800172c:	4a52      	ldr	r2, [pc, #328]	; (8001878 <HAL_RCC_ClockConfig+0x1c8>)
 800172e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001732:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001734:	4b50      	ldr	r3, [pc, #320]	; (8001878 <HAL_RCC_ClockConfig+0x1c8>)
 8001736:	689b      	ldr	r3, [r3, #8]
 8001738:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	689b      	ldr	r3, [r3, #8]
 8001740:	494d      	ldr	r1, [pc, #308]	; (8001878 <HAL_RCC_ClockConfig+0x1c8>)
 8001742:	4313      	orrs	r3, r2
 8001744:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f003 0301 	and.w	r3, r3, #1
 800174e:	2b00      	cmp	r3, #0
 8001750:	d040      	beq.n	80017d4 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	685b      	ldr	r3, [r3, #4]
 8001756:	2b01      	cmp	r3, #1
 8001758:	d107      	bne.n	800176a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800175a:	4b47      	ldr	r3, [pc, #284]	; (8001878 <HAL_RCC_ClockConfig+0x1c8>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001762:	2b00      	cmp	r3, #0
 8001764:	d115      	bne.n	8001792 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001766:	2301      	movs	r3, #1
 8001768:	e07f      	b.n	800186a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	685b      	ldr	r3, [r3, #4]
 800176e:	2b02      	cmp	r3, #2
 8001770:	d107      	bne.n	8001782 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001772:	4b41      	ldr	r3, [pc, #260]	; (8001878 <HAL_RCC_ClockConfig+0x1c8>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800177a:	2b00      	cmp	r3, #0
 800177c:	d109      	bne.n	8001792 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800177e:	2301      	movs	r3, #1
 8001780:	e073      	b.n	800186a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001782:	4b3d      	ldr	r3, [pc, #244]	; (8001878 <HAL_RCC_ClockConfig+0x1c8>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	f003 0302 	and.w	r3, r3, #2
 800178a:	2b00      	cmp	r3, #0
 800178c:	d101      	bne.n	8001792 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800178e:	2301      	movs	r3, #1
 8001790:	e06b      	b.n	800186a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001792:	4b39      	ldr	r3, [pc, #228]	; (8001878 <HAL_RCC_ClockConfig+0x1c8>)
 8001794:	689b      	ldr	r3, [r3, #8]
 8001796:	f023 0203 	bic.w	r2, r3, #3
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	685b      	ldr	r3, [r3, #4]
 800179e:	4936      	ldr	r1, [pc, #216]	; (8001878 <HAL_RCC_ClockConfig+0x1c8>)
 80017a0:	4313      	orrs	r3, r2
 80017a2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80017a4:	f7ff f9fa 	bl	8000b9c <HAL_GetTick>
 80017a8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017aa:	e00a      	b.n	80017c2 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80017ac:	f7ff f9f6 	bl	8000b9c <HAL_GetTick>
 80017b0:	4602      	mov	r2, r0
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	1ad3      	subs	r3, r2, r3
 80017b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80017ba:	4293      	cmp	r3, r2
 80017bc:	d901      	bls.n	80017c2 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80017be:	2303      	movs	r3, #3
 80017c0:	e053      	b.n	800186a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017c2:	4b2d      	ldr	r3, [pc, #180]	; (8001878 <HAL_RCC_ClockConfig+0x1c8>)
 80017c4:	689b      	ldr	r3, [r3, #8]
 80017c6:	f003 020c 	and.w	r2, r3, #12
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	685b      	ldr	r3, [r3, #4]
 80017ce:	009b      	lsls	r3, r3, #2
 80017d0:	429a      	cmp	r2, r3
 80017d2:	d1eb      	bne.n	80017ac <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80017d4:	4b27      	ldr	r3, [pc, #156]	; (8001874 <HAL_RCC_ClockConfig+0x1c4>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	f003 030f 	and.w	r3, r3, #15
 80017dc:	683a      	ldr	r2, [r7, #0]
 80017de:	429a      	cmp	r2, r3
 80017e0:	d210      	bcs.n	8001804 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017e2:	4b24      	ldr	r3, [pc, #144]	; (8001874 <HAL_RCC_ClockConfig+0x1c4>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	f023 020f 	bic.w	r2, r3, #15
 80017ea:	4922      	ldr	r1, [pc, #136]	; (8001874 <HAL_RCC_ClockConfig+0x1c4>)
 80017ec:	683b      	ldr	r3, [r7, #0]
 80017ee:	4313      	orrs	r3, r2
 80017f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80017f2:	4b20      	ldr	r3, [pc, #128]	; (8001874 <HAL_RCC_ClockConfig+0x1c4>)
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f003 030f 	and.w	r3, r3, #15
 80017fa:	683a      	ldr	r2, [r7, #0]
 80017fc:	429a      	cmp	r2, r3
 80017fe:	d001      	beq.n	8001804 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8001800:	2301      	movs	r3, #1
 8001802:	e032      	b.n	800186a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	f003 0304 	and.w	r3, r3, #4
 800180c:	2b00      	cmp	r3, #0
 800180e:	d008      	beq.n	8001822 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001810:	4b19      	ldr	r3, [pc, #100]	; (8001878 <HAL_RCC_ClockConfig+0x1c8>)
 8001812:	689b      	ldr	r3, [r3, #8]
 8001814:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	68db      	ldr	r3, [r3, #12]
 800181c:	4916      	ldr	r1, [pc, #88]	; (8001878 <HAL_RCC_ClockConfig+0x1c8>)
 800181e:	4313      	orrs	r3, r2
 8001820:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	f003 0308 	and.w	r3, r3, #8
 800182a:	2b00      	cmp	r3, #0
 800182c:	d009      	beq.n	8001842 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800182e:	4b12      	ldr	r3, [pc, #72]	; (8001878 <HAL_RCC_ClockConfig+0x1c8>)
 8001830:	689b      	ldr	r3, [r3, #8]
 8001832:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	691b      	ldr	r3, [r3, #16]
 800183a:	00db      	lsls	r3, r3, #3
 800183c:	490e      	ldr	r1, [pc, #56]	; (8001878 <HAL_RCC_ClockConfig+0x1c8>)
 800183e:	4313      	orrs	r3, r2
 8001840:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001842:	f000 f821 	bl	8001888 <HAL_RCC_GetSysClockFreq>
 8001846:	4602      	mov	r2, r0
 8001848:	4b0b      	ldr	r3, [pc, #44]	; (8001878 <HAL_RCC_ClockConfig+0x1c8>)
 800184a:	689b      	ldr	r3, [r3, #8]
 800184c:	091b      	lsrs	r3, r3, #4
 800184e:	f003 030f 	and.w	r3, r3, #15
 8001852:	490a      	ldr	r1, [pc, #40]	; (800187c <HAL_RCC_ClockConfig+0x1cc>)
 8001854:	5ccb      	ldrb	r3, [r1, r3]
 8001856:	fa22 f303 	lsr.w	r3, r2, r3
 800185a:	4a09      	ldr	r2, [pc, #36]	; (8001880 <HAL_RCC_ClockConfig+0x1d0>)
 800185c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800185e:	4b09      	ldr	r3, [pc, #36]	; (8001884 <HAL_RCC_ClockConfig+0x1d4>)
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	4618      	mov	r0, r3
 8001864:	f7ff f956 	bl	8000b14 <HAL_InitTick>

  return HAL_OK;
 8001868:	2300      	movs	r3, #0
}
 800186a:	4618      	mov	r0, r3
 800186c:	3710      	adds	r7, #16
 800186e:	46bd      	mov	sp, r7
 8001870:	bd80      	pop	{r7, pc}
 8001872:	bf00      	nop
 8001874:	40023c00 	.word	0x40023c00
 8001878:	40023800 	.word	0x40023800
 800187c:	08002f5c 	.word	0x08002f5c
 8001880:	20000000 	.word	0x20000000
 8001884:	20000004 	.word	0x20000004

08001888 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001888:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800188c:	b090      	sub	sp, #64	; 0x40
 800188e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8001890:	2300      	movs	r3, #0
 8001892:	637b      	str	r3, [r7, #52]	; 0x34
 8001894:	2300      	movs	r3, #0
 8001896:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001898:	2300      	movs	r3, #0
 800189a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 800189c:	2300      	movs	r3, #0
 800189e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80018a0:	4b59      	ldr	r3, [pc, #356]	; (8001a08 <HAL_RCC_GetSysClockFreq+0x180>)
 80018a2:	689b      	ldr	r3, [r3, #8]
 80018a4:	f003 030c 	and.w	r3, r3, #12
 80018a8:	2b08      	cmp	r3, #8
 80018aa:	d00d      	beq.n	80018c8 <HAL_RCC_GetSysClockFreq+0x40>
 80018ac:	2b08      	cmp	r3, #8
 80018ae:	f200 80a1 	bhi.w	80019f4 <HAL_RCC_GetSysClockFreq+0x16c>
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d002      	beq.n	80018bc <HAL_RCC_GetSysClockFreq+0x34>
 80018b6:	2b04      	cmp	r3, #4
 80018b8:	d003      	beq.n	80018c2 <HAL_RCC_GetSysClockFreq+0x3a>
 80018ba:	e09b      	b.n	80019f4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80018bc:	4b53      	ldr	r3, [pc, #332]	; (8001a0c <HAL_RCC_GetSysClockFreq+0x184>)
 80018be:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80018c0:	e09b      	b.n	80019fa <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80018c2:	4b53      	ldr	r3, [pc, #332]	; (8001a10 <HAL_RCC_GetSysClockFreq+0x188>)
 80018c4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80018c6:	e098      	b.n	80019fa <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80018c8:	4b4f      	ldr	r3, [pc, #316]	; (8001a08 <HAL_RCC_GetSysClockFreq+0x180>)
 80018ca:	685b      	ldr	r3, [r3, #4]
 80018cc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80018d0:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80018d2:	4b4d      	ldr	r3, [pc, #308]	; (8001a08 <HAL_RCC_GetSysClockFreq+0x180>)
 80018d4:	685b      	ldr	r3, [r3, #4]
 80018d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d028      	beq.n	8001930 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80018de:	4b4a      	ldr	r3, [pc, #296]	; (8001a08 <HAL_RCC_GetSysClockFreq+0x180>)
 80018e0:	685b      	ldr	r3, [r3, #4]
 80018e2:	099b      	lsrs	r3, r3, #6
 80018e4:	2200      	movs	r2, #0
 80018e6:	623b      	str	r3, [r7, #32]
 80018e8:	627a      	str	r2, [r7, #36]	; 0x24
 80018ea:	6a3b      	ldr	r3, [r7, #32]
 80018ec:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80018f0:	2100      	movs	r1, #0
 80018f2:	4b47      	ldr	r3, [pc, #284]	; (8001a10 <HAL_RCC_GetSysClockFreq+0x188>)
 80018f4:	fb03 f201 	mul.w	r2, r3, r1
 80018f8:	2300      	movs	r3, #0
 80018fa:	fb00 f303 	mul.w	r3, r0, r3
 80018fe:	4413      	add	r3, r2
 8001900:	4a43      	ldr	r2, [pc, #268]	; (8001a10 <HAL_RCC_GetSysClockFreq+0x188>)
 8001902:	fba0 1202 	umull	r1, r2, r0, r2
 8001906:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001908:	460a      	mov	r2, r1
 800190a:	62ba      	str	r2, [r7, #40]	; 0x28
 800190c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800190e:	4413      	add	r3, r2
 8001910:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001912:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001914:	2200      	movs	r2, #0
 8001916:	61bb      	str	r3, [r7, #24]
 8001918:	61fa      	str	r2, [r7, #28]
 800191a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800191e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001922:	f7fe fc91 	bl	8000248 <__aeabi_uldivmod>
 8001926:	4602      	mov	r2, r0
 8001928:	460b      	mov	r3, r1
 800192a:	4613      	mov	r3, r2
 800192c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800192e:	e053      	b.n	80019d8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001930:	4b35      	ldr	r3, [pc, #212]	; (8001a08 <HAL_RCC_GetSysClockFreq+0x180>)
 8001932:	685b      	ldr	r3, [r3, #4]
 8001934:	099b      	lsrs	r3, r3, #6
 8001936:	2200      	movs	r2, #0
 8001938:	613b      	str	r3, [r7, #16]
 800193a:	617a      	str	r2, [r7, #20]
 800193c:	693b      	ldr	r3, [r7, #16]
 800193e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001942:	f04f 0b00 	mov.w	fp, #0
 8001946:	4652      	mov	r2, sl
 8001948:	465b      	mov	r3, fp
 800194a:	f04f 0000 	mov.w	r0, #0
 800194e:	f04f 0100 	mov.w	r1, #0
 8001952:	0159      	lsls	r1, r3, #5
 8001954:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001958:	0150      	lsls	r0, r2, #5
 800195a:	4602      	mov	r2, r0
 800195c:	460b      	mov	r3, r1
 800195e:	ebb2 080a 	subs.w	r8, r2, sl
 8001962:	eb63 090b 	sbc.w	r9, r3, fp
 8001966:	f04f 0200 	mov.w	r2, #0
 800196a:	f04f 0300 	mov.w	r3, #0
 800196e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001972:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001976:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800197a:	ebb2 0408 	subs.w	r4, r2, r8
 800197e:	eb63 0509 	sbc.w	r5, r3, r9
 8001982:	f04f 0200 	mov.w	r2, #0
 8001986:	f04f 0300 	mov.w	r3, #0
 800198a:	00eb      	lsls	r3, r5, #3
 800198c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001990:	00e2      	lsls	r2, r4, #3
 8001992:	4614      	mov	r4, r2
 8001994:	461d      	mov	r5, r3
 8001996:	eb14 030a 	adds.w	r3, r4, sl
 800199a:	603b      	str	r3, [r7, #0]
 800199c:	eb45 030b 	adc.w	r3, r5, fp
 80019a0:	607b      	str	r3, [r7, #4]
 80019a2:	f04f 0200 	mov.w	r2, #0
 80019a6:	f04f 0300 	mov.w	r3, #0
 80019aa:	e9d7 4500 	ldrd	r4, r5, [r7]
 80019ae:	4629      	mov	r1, r5
 80019b0:	028b      	lsls	r3, r1, #10
 80019b2:	4621      	mov	r1, r4
 80019b4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80019b8:	4621      	mov	r1, r4
 80019ba:	028a      	lsls	r2, r1, #10
 80019bc:	4610      	mov	r0, r2
 80019be:	4619      	mov	r1, r3
 80019c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80019c2:	2200      	movs	r2, #0
 80019c4:	60bb      	str	r3, [r7, #8]
 80019c6:	60fa      	str	r2, [r7, #12]
 80019c8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80019cc:	f7fe fc3c 	bl	8000248 <__aeabi_uldivmod>
 80019d0:	4602      	mov	r2, r0
 80019d2:	460b      	mov	r3, r1
 80019d4:	4613      	mov	r3, r2
 80019d6:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80019d8:	4b0b      	ldr	r3, [pc, #44]	; (8001a08 <HAL_RCC_GetSysClockFreq+0x180>)
 80019da:	685b      	ldr	r3, [r3, #4]
 80019dc:	0c1b      	lsrs	r3, r3, #16
 80019de:	f003 0303 	and.w	r3, r3, #3
 80019e2:	3301      	adds	r3, #1
 80019e4:	005b      	lsls	r3, r3, #1
 80019e6:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 80019e8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80019ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80019ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80019f0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80019f2:	e002      	b.n	80019fa <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80019f4:	4b05      	ldr	r3, [pc, #20]	; (8001a0c <HAL_RCC_GetSysClockFreq+0x184>)
 80019f6:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80019f8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80019fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80019fc:	4618      	mov	r0, r3
 80019fe:	3740      	adds	r7, #64	; 0x40
 8001a00:	46bd      	mov	sp, r7
 8001a02:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001a06:	bf00      	nop
 8001a08:	40023800 	.word	0x40023800
 8001a0c:	00f42400 	.word	0x00f42400
 8001a10:	017d7840 	.word	0x017d7840

08001a14 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001a14:	b480      	push	{r7}
 8001a16:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001a18:	4b03      	ldr	r3, [pc, #12]	; (8001a28 <HAL_RCC_GetHCLKFreq+0x14>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
}
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a24:	4770      	bx	lr
 8001a26:	bf00      	nop
 8001a28:	20000000 	.word	0x20000000

08001a2c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001a30:	f7ff fff0 	bl	8001a14 <HAL_RCC_GetHCLKFreq>
 8001a34:	4602      	mov	r2, r0
 8001a36:	4b05      	ldr	r3, [pc, #20]	; (8001a4c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001a38:	689b      	ldr	r3, [r3, #8]
 8001a3a:	0a9b      	lsrs	r3, r3, #10
 8001a3c:	f003 0307 	and.w	r3, r3, #7
 8001a40:	4903      	ldr	r1, [pc, #12]	; (8001a50 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001a42:	5ccb      	ldrb	r3, [r1, r3]
 8001a44:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001a48:	4618      	mov	r0, r3
 8001a4a:	bd80      	pop	{r7, pc}
 8001a4c:	40023800 	.word	0x40023800
 8001a50:	08002f6c 	.word	0x08002f6c

08001a54 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001a58:	f7ff ffdc 	bl	8001a14 <HAL_RCC_GetHCLKFreq>
 8001a5c:	4602      	mov	r2, r0
 8001a5e:	4b05      	ldr	r3, [pc, #20]	; (8001a74 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001a60:	689b      	ldr	r3, [r3, #8]
 8001a62:	0b5b      	lsrs	r3, r3, #13
 8001a64:	f003 0307 	and.w	r3, r3, #7
 8001a68:	4903      	ldr	r1, [pc, #12]	; (8001a78 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001a6a:	5ccb      	ldrb	r3, [r1, r3]
 8001a6c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001a70:	4618      	mov	r0, r3
 8001a72:	bd80      	pop	{r7, pc}
 8001a74:	40023800 	.word	0x40023800
 8001a78:	08002f6c 	.word	0x08002f6c

08001a7c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b088      	sub	sp, #32
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8001a84:	2300      	movs	r3, #0
 8001a86:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8001a88:	2300      	movs	r3, #0
 8001a8a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8001a90:	2300      	movs	r3, #0
 8001a92:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8001a94:	2300      	movs	r3, #0
 8001a96:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	f003 0301 	and.w	r3, r3, #1
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d012      	beq.n	8001aca <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8001aa4:	4b69      	ldr	r3, [pc, #420]	; (8001c4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001aa6:	689b      	ldr	r3, [r3, #8]
 8001aa8:	4a68      	ldr	r2, [pc, #416]	; (8001c4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001aaa:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001aae:	6093      	str	r3, [r2, #8]
 8001ab0:	4b66      	ldr	r3, [pc, #408]	; (8001c4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001ab2:	689a      	ldr	r2, [r3, #8]
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ab8:	4964      	ldr	r1, [pc, #400]	; (8001c4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001aba:	4313      	orrs	r3, r2
 8001abc:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d101      	bne.n	8001aca <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8001ac6:	2301      	movs	r3, #1
 8001ac8:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d017      	beq.n	8001b06 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001ad6:	4b5d      	ldr	r3, [pc, #372]	; (8001c4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001ad8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001adc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ae4:	4959      	ldr	r1, [pc, #356]	; (8001c4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001ae6:	4313      	orrs	r3, r2
 8001ae8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001af0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001af4:	d101      	bne.n	8001afa <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8001af6:	2301      	movs	r3, #1
 8001af8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d101      	bne.n	8001b06 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8001b02:	2301      	movs	r3, #1
 8001b04:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d017      	beq.n	8001b42 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001b12:	4b4e      	ldr	r3, [pc, #312]	; (8001c4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001b14:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001b18:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b20:	494a      	ldr	r1, [pc, #296]	; (8001c4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001b22:	4313      	orrs	r3, r2
 8001b24:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b2c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001b30:	d101      	bne.n	8001b36 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8001b32:	2301      	movs	r3, #1
 8001b34:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d101      	bne.n	8001b42 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8001b3e:	2301      	movs	r3, #1
 8001b40:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d001      	beq.n	8001b52 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8001b4e:	2301      	movs	r3, #1
 8001b50:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f003 0320 	and.w	r3, r3, #32
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	f000 808b 	beq.w	8001c76 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8001b60:	4b3a      	ldr	r3, [pc, #232]	; (8001c4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001b62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b64:	4a39      	ldr	r2, [pc, #228]	; (8001c4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001b66:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b6a:	6413      	str	r3, [r2, #64]	; 0x40
 8001b6c:	4b37      	ldr	r3, [pc, #220]	; (8001c4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001b6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b74:	60bb      	str	r3, [r7, #8]
 8001b76:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001b78:	4b35      	ldr	r3, [pc, #212]	; (8001c50 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	4a34      	ldr	r2, [pc, #208]	; (8001c50 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001b7e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b82:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001b84:	f7ff f80a 	bl	8000b9c <HAL_GetTick>
 8001b88:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8001b8a:	e008      	b.n	8001b9e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b8c:	f7ff f806 	bl	8000b9c <HAL_GetTick>
 8001b90:	4602      	mov	r2, r0
 8001b92:	697b      	ldr	r3, [r7, #20]
 8001b94:	1ad3      	subs	r3, r2, r3
 8001b96:	2b64      	cmp	r3, #100	; 0x64
 8001b98:	d901      	bls.n	8001b9e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8001b9a:	2303      	movs	r3, #3
 8001b9c:	e38f      	b.n	80022be <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8001b9e:	4b2c      	ldr	r3, [pc, #176]	; (8001c50 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d0f0      	beq.n	8001b8c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001baa:	4b28      	ldr	r3, [pc, #160]	; (8001c4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001bac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001bb2:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001bb4:	693b      	ldr	r3, [r7, #16]
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d035      	beq.n	8001c26 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bbe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001bc2:	693a      	ldr	r2, [r7, #16]
 8001bc4:	429a      	cmp	r2, r3
 8001bc6:	d02e      	beq.n	8001c26 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001bc8:	4b20      	ldr	r3, [pc, #128]	; (8001c4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001bca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bcc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001bd0:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001bd2:	4b1e      	ldr	r3, [pc, #120]	; (8001c4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001bd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bd6:	4a1d      	ldr	r2, [pc, #116]	; (8001c4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001bd8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001bdc:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001bde:	4b1b      	ldr	r3, [pc, #108]	; (8001c4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001be0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001be2:	4a1a      	ldr	r2, [pc, #104]	; (8001c4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001be4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001be8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8001bea:	4a18      	ldr	r2, [pc, #96]	; (8001c4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001bec:	693b      	ldr	r3, [r7, #16]
 8001bee:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8001bf0:	4b16      	ldr	r3, [pc, #88]	; (8001c4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001bf2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bf4:	f003 0301 	and.w	r3, r3, #1
 8001bf8:	2b01      	cmp	r3, #1
 8001bfa:	d114      	bne.n	8001c26 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bfc:	f7fe ffce 	bl	8000b9c <HAL_GetTick>
 8001c00:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c02:	e00a      	b.n	8001c1a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c04:	f7fe ffca 	bl	8000b9c <HAL_GetTick>
 8001c08:	4602      	mov	r2, r0
 8001c0a:	697b      	ldr	r3, [r7, #20]
 8001c0c:	1ad3      	subs	r3, r2, r3
 8001c0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c12:	4293      	cmp	r3, r2
 8001c14:	d901      	bls.n	8001c1a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8001c16:	2303      	movs	r3, #3
 8001c18:	e351      	b.n	80022be <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c1a:	4b0c      	ldr	r3, [pc, #48]	; (8001c4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001c1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c1e:	f003 0302 	and.w	r3, r3, #2
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d0ee      	beq.n	8001c04 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c2a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001c2e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001c32:	d111      	bne.n	8001c58 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8001c34:	4b05      	ldr	r3, [pc, #20]	; (8001c4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001c36:	689b      	ldr	r3, [r3, #8]
 8001c38:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001c40:	4b04      	ldr	r3, [pc, #16]	; (8001c54 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8001c42:	400b      	ands	r3, r1
 8001c44:	4901      	ldr	r1, [pc, #4]	; (8001c4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001c46:	4313      	orrs	r3, r2
 8001c48:	608b      	str	r3, [r1, #8]
 8001c4a:	e00b      	b.n	8001c64 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8001c4c:	40023800 	.word	0x40023800
 8001c50:	40007000 	.word	0x40007000
 8001c54:	0ffffcff 	.word	0x0ffffcff
 8001c58:	4bac      	ldr	r3, [pc, #688]	; (8001f0c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001c5a:	689b      	ldr	r3, [r3, #8]
 8001c5c:	4aab      	ldr	r2, [pc, #684]	; (8001f0c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001c5e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8001c62:	6093      	str	r3, [r2, #8]
 8001c64:	4ba9      	ldr	r3, [pc, #676]	; (8001f0c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001c66:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c6c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c70:	49a6      	ldr	r1, [pc, #664]	; (8001f0c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001c72:	4313      	orrs	r3, r2
 8001c74:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f003 0310 	and.w	r3, r3, #16
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d010      	beq.n	8001ca4 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8001c82:	4ba2      	ldr	r3, [pc, #648]	; (8001f0c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001c84:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001c88:	4aa0      	ldr	r2, [pc, #640]	; (8001f0c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001c8a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001c8e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001c92:	4b9e      	ldr	r3, [pc, #632]	; (8001f0c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001c94:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c9c:	499b      	ldr	r1, [pc, #620]	; (8001f0c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001c9e:	4313      	orrs	r3, r2
 8001ca0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d00a      	beq.n	8001cc6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001cb0:	4b96      	ldr	r3, [pc, #600]	; (8001f0c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001cb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001cb6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001cbe:	4993      	ldr	r1, [pc, #588]	; (8001f0c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001cc0:	4313      	orrs	r3, r2
 8001cc2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d00a      	beq.n	8001ce8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8001cd2:	4b8e      	ldr	r3, [pc, #568]	; (8001f0c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001cd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001cd8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001ce0:	498a      	ldr	r1, [pc, #552]	; (8001f0c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001ce2:	4313      	orrs	r3, r2
 8001ce4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d00a      	beq.n	8001d0a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8001cf4:	4b85      	ldr	r3, [pc, #532]	; (8001f0c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001cf6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001cfa:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001d02:	4982      	ldr	r1, [pc, #520]	; (8001f0c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001d04:	4313      	orrs	r3, r2
 8001d06:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d00a      	beq.n	8001d2c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8001d16:	4b7d      	ldr	r3, [pc, #500]	; (8001f0c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001d18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d1c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d24:	4979      	ldr	r1, [pc, #484]	; (8001f0c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001d26:	4313      	orrs	r3, r2
 8001d28:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d00a      	beq.n	8001d4e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001d38:	4b74      	ldr	r3, [pc, #464]	; (8001f0c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001d3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d3e:	f023 0203 	bic.w	r2, r3, #3
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d46:	4971      	ldr	r1, [pc, #452]	; (8001f0c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001d48:	4313      	orrs	r3, r2
 8001d4a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d00a      	beq.n	8001d70 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001d5a:	4b6c      	ldr	r3, [pc, #432]	; (8001f0c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001d5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d60:	f023 020c 	bic.w	r2, r3, #12
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d68:	4968      	ldr	r1, [pc, #416]	; (8001f0c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001d6a:	4313      	orrs	r3, r2
 8001d6c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d00a      	beq.n	8001d92 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001d7c:	4b63      	ldr	r3, [pc, #396]	; (8001f0c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001d7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d82:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d8a:	4960      	ldr	r1, [pc, #384]	; (8001f0c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001d8c:	4313      	orrs	r3, r2
 8001d8e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d00a      	beq.n	8001db4 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8001d9e:	4b5b      	ldr	r3, [pc, #364]	; (8001f0c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001da0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001da4:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001dac:	4957      	ldr	r1, [pc, #348]	; (8001f0c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001dae:	4313      	orrs	r3, r2
 8001db0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d00a      	beq.n	8001dd6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8001dc0:	4b52      	ldr	r3, [pc, #328]	; (8001f0c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001dc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001dc6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001dce:	494f      	ldr	r1, [pc, #316]	; (8001f0c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001dd0:	4313      	orrs	r3, r2
 8001dd2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d00a      	beq.n	8001df8 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8001de2:	4b4a      	ldr	r3, [pc, #296]	; (8001f0c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001de4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001de8:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001df0:	4946      	ldr	r1, [pc, #280]	; (8001f0c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001df2:	4313      	orrs	r3, r2
 8001df4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d00a      	beq.n	8001e1a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8001e04:	4b41      	ldr	r3, [pc, #260]	; (8001f0c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001e06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e0a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e12:	493e      	ldr	r1, [pc, #248]	; (8001f0c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001e14:	4313      	orrs	r3, r2
 8001e16:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d00a      	beq.n	8001e3c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8001e26:	4b39      	ldr	r3, [pc, #228]	; (8001f0c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001e28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e2c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e34:	4935      	ldr	r1, [pc, #212]	; (8001f0c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001e36:	4313      	orrs	r3, r2
 8001e38:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d00a      	beq.n	8001e5e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8001e48:	4b30      	ldr	r3, [pc, #192]	; (8001f0c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001e4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e4e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001e56:	492d      	ldr	r1, [pc, #180]	; (8001f0c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001e58:	4313      	orrs	r3, r2
 8001e5a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d011      	beq.n	8001e8e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8001e6a:	4b28      	ldr	r3, [pc, #160]	; (8001f0c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001e6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e70:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001e78:	4924      	ldr	r1, [pc, #144]	; (8001f0c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001e7a:	4313      	orrs	r3, r2
 8001e7c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001e84:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001e88:	d101      	bne.n	8001e8e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8001e8a:	2301      	movs	r3, #1
 8001e8c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f003 0308 	and.w	r3, r3, #8
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d001      	beq.n	8001e9e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8001e9a:	2301      	movs	r3, #1
 8001e9c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d00a      	beq.n	8001ec0 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001eaa:	4b18      	ldr	r3, [pc, #96]	; (8001f0c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001eac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001eb0:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001eb8:	4914      	ldr	r1, [pc, #80]	; (8001f0c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001eba:	4313      	orrs	r3, r2
 8001ebc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d00b      	beq.n	8001ee4 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8001ecc:	4b0f      	ldr	r3, [pc, #60]	; (8001f0c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001ece:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ed2:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001edc:	490b      	ldr	r1, [pc, #44]	; (8001f0c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001ede:	4313      	orrs	r3, r2
 8001ee0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d00f      	beq.n	8001f10 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8001ef0:	4b06      	ldr	r3, [pc, #24]	; (8001f0c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001ef2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ef6:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001f00:	4902      	ldr	r1, [pc, #8]	; (8001f0c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001f02:	4313      	orrs	r3, r2
 8001f04:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8001f08:	e002      	b.n	8001f10 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8001f0a:	bf00      	nop
 8001f0c:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d00b      	beq.n	8001f34 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8001f1c:	4b8a      	ldr	r3, [pc, #552]	; (8002148 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8001f1e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001f22:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f2c:	4986      	ldr	r1, [pc, #536]	; (8002148 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8001f2e:	4313      	orrs	r3, r2
 8001f30:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d00b      	beq.n	8001f58 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8001f40:	4b81      	ldr	r3, [pc, #516]	; (8002148 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8001f42:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001f46:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001f50:	497d      	ldr	r1, [pc, #500]	; (8002148 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8001f52:	4313      	orrs	r3, r2
 8001f54:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8001f58:	69fb      	ldr	r3, [r7, #28]
 8001f5a:	2b01      	cmp	r3, #1
 8001f5c:	d006      	beq.n	8001f6c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	f000 80d6 	beq.w	8002118 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8001f6c:	4b76      	ldr	r3, [pc, #472]	; (8002148 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	4a75      	ldr	r2, [pc, #468]	; (8002148 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8001f72:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8001f76:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001f78:	f7fe fe10 	bl	8000b9c <HAL_GetTick>
 8001f7c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001f7e:	e008      	b.n	8001f92 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8001f80:	f7fe fe0c 	bl	8000b9c <HAL_GetTick>
 8001f84:	4602      	mov	r2, r0
 8001f86:	697b      	ldr	r3, [r7, #20]
 8001f88:	1ad3      	subs	r3, r2, r3
 8001f8a:	2b64      	cmp	r3, #100	; 0x64
 8001f8c:	d901      	bls.n	8001f92 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001f8e:	2303      	movs	r3, #3
 8001f90:	e195      	b.n	80022be <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001f92:	4b6d      	ldr	r3, [pc, #436]	; (8002148 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d1f0      	bne.n	8001f80 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f003 0301 	and.w	r3, r3, #1
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d021      	beq.n	8001fee <HAL_RCCEx_PeriphCLKConfig+0x572>
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d11d      	bne.n	8001fee <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8001fb2:	4b65      	ldr	r3, [pc, #404]	; (8002148 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8001fb4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001fb8:	0c1b      	lsrs	r3, r3, #16
 8001fba:	f003 0303 	and.w	r3, r3, #3
 8001fbe:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8001fc0:	4b61      	ldr	r3, [pc, #388]	; (8002148 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8001fc2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001fc6:	0e1b      	lsrs	r3, r3, #24
 8001fc8:	f003 030f 	and.w	r3, r3, #15
 8001fcc:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	685b      	ldr	r3, [r3, #4]
 8001fd2:	019a      	lsls	r2, r3, #6
 8001fd4:	693b      	ldr	r3, [r7, #16]
 8001fd6:	041b      	lsls	r3, r3, #16
 8001fd8:	431a      	orrs	r2, r3
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	061b      	lsls	r3, r3, #24
 8001fde:	431a      	orrs	r2, r3
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	689b      	ldr	r3, [r3, #8]
 8001fe4:	071b      	lsls	r3, r3, #28
 8001fe6:	4958      	ldr	r1, [pc, #352]	; (8002148 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8001fe8:	4313      	orrs	r3, r2
 8001fea:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d004      	beq.n	8002004 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ffe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002002:	d00a      	beq.n	800201a <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800200c:	2b00      	cmp	r3, #0
 800200e:	d02e      	beq.n	800206e <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002014:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002018:	d129      	bne.n	800206e <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800201a:	4b4b      	ldr	r3, [pc, #300]	; (8002148 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800201c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002020:	0c1b      	lsrs	r3, r3, #16
 8002022:	f003 0303 	and.w	r3, r3, #3
 8002026:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002028:	4b47      	ldr	r3, [pc, #284]	; (8002148 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800202a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800202e:	0f1b      	lsrs	r3, r3, #28
 8002030:	f003 0307 	and.w	r3, r3, #7
 8002034:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	685b      	ldr	r3, [r3, #4]
 800203a:	019a      	lsls	r2, r3, #6
 800203c:	693b      	ldr	r3, [r7, #16]
 800203e:	041b      	lsls	r3, r3, #16
 8002040:	431a      	orrs	r2, r3
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	68db      	ldr	r3, [r3, #12]
 8002046:	061b      	lsls	r3, r3, #24
 8002048:	431a      	orrs	r2, r3
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	071b      	lsls	r3, r3, #28
 800204e:	493e      	ldr	r1, [pc, #248]	; (8002148 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002050:	4313      	orrs	r3, r2
 8002052:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002056:	4b3c      	ldr	r3, [pc, #240]	; (8002148 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002058:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800205c:	f023 021f 	bic.w	r2, r3, #31
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002064:	3b01      	subs	r3, #1
 8002066:	4938      	ldr	r1, [pc, #224]	; (8002148 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002068:	4313      	orrs	r3, r2
 800206a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002076:	2b00      	cmp	r3, #0
 8002078:	d01d      	beq.n	80020b6 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800207a:	4b33      	ldr	r3, [pc, #204]	; (8002148 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800207c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002080:	0e1b      	lsrs	r3, r3, #24
 8002082:	f003 030f 	and.w	r3, r3, #15
 8002086:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002088:	4b2f      	ldr	r3, [pc, #188]	; (8002148 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800208a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800208e:	0f1b      	lsrs	r3, r3, #28
 8002090:	f003 0307 	and.w	r3, r3, #7
 8002094:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	685b      	ldr	r3, [r3, #4]
 800209a:	019a      	lsls	r2, r3, #6
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	691b      	ldr	r3, [r3, #16]
 80020a0:	041b      	lsls	r3, r3, #16
 80020a2:	431a      	orrs	r2, r3
 80020a4:	693b      	ldr	r3, [r7, #16]
 80020a6:	061b      	lsls	r3, r3, #24
 80020a8:	431a      	orrs	r2, r3
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	071b      	lsls	r3, r3, #28
 80020ae:	4926      	ldr	r1, [pc, #152]	; (8002148 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80020b0:	4313      	orrs	r3, r2
 80020b2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d011      	beq.n	80020e6 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	685b      	ldr	r3, [r3, #4]
 80020c6:	019a      	lsls	r2, r3, #6
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	691b      	ldr	r3, [r3, #16]
 80020cc:	041b      	lsls	r3, r3, #16
 80020ce:	431a      	orrs	r2, r3
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	68db      	ldr	r3, [r3, #12]
 80020d4:	061b      	lsls	r3, r3, #24
 80020d6:	431a      	orrs	r2, r3
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	689b      	ldr	r3, [r3, #8]
 80020dc:	071b      	lsls	r3, r3, #28
 80020de:	491a      	ldr	r1, [pc, #104]	; (8002148 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80020e0:	4313      	orrs	r3, r2
 80020e2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80020e6:	4b18      	ldr	r3, [pc, #96]	; (8002148 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	4a17      	ldr	r2, [pc, #92]	; (8002148 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80020ec:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80020f0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80020f2:	f7fe fd53 	bl	8000b9c <HAL_GetTick>
 80020f6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80020f8:	e008      	b.n	800210c <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80020fa:	f7fe fd4f 	bl	8000b9c <HAL_GetTick>
 80020fe:	4602      	mov	r2, r0
 8002100:	697b      	ldr	r3, [r7, #20]
 8002102:	1ad3      	subs	r3, r2, r3
 8002104:	2b64      	cmp	r3, #100	; 0x64
 8002106:	d901      	bls.n	800210c <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002108:	2303      	movs	r3, #3
 800210a:	e0d8      	b.n	80022be <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800210c:	4b0e      	ldr	r3, [pc, #56]	; (8002148 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002114:	2b00      	cmp	r3, #0
 8002116:	d0f0      	beq.n	80020fa <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8002118:	69bb      	ldr	r3, [r7, #24]
 800211a:	2b01      	cmp	r3, #1
 800211c:	f040 80ce 	bne.w	80022bc <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002120:	4b09      	ldr	r3, [pc, #36]	; (8002148 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	4a08      	ldr	r2, [pc, #32]	; (8002148 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002126:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800212a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800212c:	f7fe fd36 	bl	8000b9c <HAL_GetTick>
 8002130:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002132:	e00b      	b.n	800214c <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002134:	f7fe fd32 	bl	8000b9c <HAL_GetTick>
 8002138:	4602      	mov	r2, r0
 800213a:	697b      	ldr	r3, [r7, #20]
 800213c:	1ad3      	subs	r3, r2, r3
 800213e:	2b64      	cmp	r3, #100	; 0x64
 8002140:	d904      	bls.n	800214c <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002142:	2303      	movs	r3, #3
 8002144:	e0bb      	b.n	80022be <HAL_RCCEx_PeriphCLKConfig+0x842>
 8002146:	bf00      	nop
 8002148:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800214c:	4b5e      	ldr	r3, [pc, #376]	; (80022c8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002154:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002158:	d0ec      	beq.n	8002134 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002162:	2b00      	cmp	r3, #0
 8002164:	d003      	beq.n	800216e <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800216a:	2b00      	cmp	r3, #0
 800216c:	d009      	beq.n	8002182 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002176:	2b00      	cmp	r3, #0
 8002178:	d02e      	beq.n	80021d8 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800217e:	2b00      	cmp	r3, #0
 8002180:	d12a      	bne.n	80021d8 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002182:	4b51      	ldr	r3, [pc, #324]	; (80022c8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002184:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002188:	0c1b      	lsrs	r3, r3, #16
 800218a:	f003 0303 	and.w	r3, r3, #3
 800218e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002190:	4b4d      	ldr	r3, [pc, #308]	; (80022c8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002192:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002196:	0f1b      	lsrs	r3, r3, #28
 8002198:	f003 0307 	and.w	r3, r3, #7
 800219c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	695b      	ldr	r3, [r3, #20]
 80021a2:	019a      	lsls	r2, r3, #6
 80021a4:	693b      	ldr	r3, [r7, #16]
 80021a6:	041b      	lsls	r3, r3, #16
 80021a8:	431a      	orrs	r2, r3
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	699b      	ldr	r3, [r3, #24]
 80021ae:	061b      	lsls	r3, r3, #24
 80021b0:	431a      	orrs	r2, r3
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	071b      	lsls	r3, r3, #28
 80021b6:	4944      	ldr	r1, [pc, #272]	; (80022c8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80021b8:	4313      	orrs	r3, r2
 80021ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80021be:	4b42      	ldr	r3, [pc, #264]	; (80022c8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80021c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80021c4:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021cc:	3b01      	subs	r3, #1
 80021ce:	021b      	lsls	r3, r3, #8
 80021d0:	493d      	ldr	r1, [pc, #244]	; (80022c8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80021d2:	4313      	orrs	r3, r2
 80021d4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d022      	beq.n	800222a <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80021e8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80021ec:	d11d      	bne.n	800222a <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80021ee:	4b36      	ldr	r3, [pc, #216]	; (80022c8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80021f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021f4:	0e1b      	lsrs	r3, r3, #24
 80021f6:	f003 030f 	and.w	r3, r3, #15
 80021fa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80021fc:	4b32      	ldr	r3, [pc, #200]	; (80022c8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80021fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002202:	0f1b      	lsrs	r3, r3, #28
 8002204:	f003 0307 	and.w	r3, r3, #7
 8002208:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	695b      	ldr	r3, [r3, #20]
 800220e:	019a      	lsls	r2, r3, #6
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	6a1b      	ldr	r3, [r3, #32]
 8002214:	041b      	lsls	r3, r3, #16
 8002216:	431a      	orrs	r2, r3
 8002218:	693b      	ldr	r3, [r7, #16]
 800221a:	061b      	lsls	r3, r3, #24
 800221c:	431a      	orrs	r2, r3
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	071b      	lsls	r3, r3, #28
 8002222:	4929      	ldr	r1, [pc, #164]	; (80022c8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002224:	4313      	orrs	r3, r2
 8002226:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f003 0308 	and.w	r3, r3, #8
 8002232:	2b00      	cmp	r3, #0
 8002234:	d028      	beq.n	8002288 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002236:	4b24      	ldr	r3, [pc, #144]	; (80022c8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002238:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800223c:	0e1b      	lsrs	r3, r3, #24
 800223e:	f003 030f 	and.w	r3, r3, #15
 8002242:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002244:	4b20      	ldr	r3, [pc, #128]	; (80022c8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002246:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800224a:	0c1b      	lsrs	r3, r3, #16
 800224c:	f003 0303 	and.w	r3, r3, #3
 8002250:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	695b      	ldr	r3, [r3, #20]
 8002256:	019a      	lsls	r2, r3, #6
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	041b      	lsls	r3, r3, #16
 800225c:	431a      	orrs	r2, r3
 800225e:	693b      	ldr	r3, [r7, #16]
 8002260:	061b      	lsls	r3, r3, #24
 8002262:	431a      	orrs	r2, r3
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	69db      	ldr	r3, [r3, #28]
 8002268:	071b      	lsls	r3, r3, #28
 800226a:	4917      	ldr	r1, [pc, #92]	; (80022c8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800226c:	4313      	orrs	r3, r2
 800226e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8002272:	4b15      	ldr	r3, [pc, #84]	; (80022c8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002274:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002278:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002280:	4911      	ldr	r1, [pc, #68]	; (80022c8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002282:	4313      	orrs	r3, r2
 8002284:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002288:	4b0f      	ldr	r3, [pc, #60]	; (80022c8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	4a0e      	ldr	r2, [pc, #56]	; (80022c8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800228e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002292:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002294:	f7fe fc82 	bl	8000b9c <HAL_GetTick>
 8002298:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800229a:	e008      	b.n	80022ae <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800229c:	f7fe fc7e 	bl	8000b9c <HAL_GetTick>
 80022a0:	4602      	mov	r2, r0
 80022a2:	697b      	ldr	r3, [r7, #20]
 80022a4:	1ad3      	subs	r3, r2, r3
 80022a6:	2b64      	cmp	r3, #100	; 0x64
 80022a8:	d901      	bls.n	80022ae <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80022aa:	2303      	movs	r3, #3
 80022ac:	e007      	b.n	80022be <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80022ae:	4b06      	ldr	r3, [pc, #24]	; (80022c8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80022b6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80022ba:	d1ef      	bne.n	800229c <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 80022bc:	2300      	movs	r3, #0
}
 80022be:	4618      	mov	r0, r3
 80022c0:	3720      	adds	r7, #32
 80022c2:	46bd      	mov	sp, r7
 80022c4:	bd80      	pop	{r7, pc}
 80022c6:	bf00      	nop
 80022c8:	40023800 	.word	0x40023800

080022cc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b082      	sub	sp, #8
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d101      	bne.n	80022de <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80022da:	2301      	movs	r3, #1
 80022dc:	e040      	b.n	8002360 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d106      	bne.n	80022f4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	2200      	movs	r2, #0
 80022ea:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80022ee:	6878      	ldr	r0, [r7, #4]
 80022f0:	f7fe fb7a 	bl	80009e8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	2224      	movs	r2, #36	; 0x24
 80022f8:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	681a      	ldr	r2, [r3, #0]
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f022 0201 	bic.w	r2, r2, #1
 8002308:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800230a:	6878      	ldr	r0, [r7, #4]
 800230c:	f000 f974 	bl	80025f8 <UART_SetConfig>
 8002310:	4603      	mov	r3, r0
 8002312:	2b01      	cmp	r3, #1
 8002314:	d101      	bne.n	800231a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002316:	2301      	movs	r3, #1
 8002318:	e022      	b.n	8002360 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800231e:	2b00      	cmp	r3, #0
 8002320:	d002      	beq.n	8002328 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002322:	6878      	ldr	r0, [r7, #4]
 8002324:	f000 fbcc 	bl	8002ac0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	685a      	ldr	r2, [r3, #4]
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002336:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	689a      	ldr	r2, [r3, #8]
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002346:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	681a      	ldr	r2, [r3, #0]
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f042 0201 	orr.w	r2, r2, #1
 8002356:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002358:	6878      	ldr	r0, [r7, #4]
 800235a:	f000 fc53 	bl	8002c04 <UART_CheckIdleState>
 800235e:	4603      	mov	r3, r0
}
 8002360:	4618      	mov	r0, r3
 8002362:	3708      	adds	r7, #8
 8002364:	46bd      	mov	sp, r7
 8002366:	bd80      	pop	{r7, pc}

08002368 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	b08a      	sub	sp, #40	; 0x28
 800236c:	af02      	add	r7, sp, #8
 800236e:	60f8      	str	r0, [r7, #12]
 8002370:	60b9      	str	r1, [r7, #8]
 8002372:	603b      	str	r3, [r7, #0]
 8002374:	4613      	mov	r3, r2
 8002376:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800237c:	2b20      	cmp	r3, #32
 800237e:	d171      	bne.n	8002464 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8002380:	68bb      	ldr	r3, [r7, #8]
 8002382:	2b00      	cmp	r3, #0
 8002384:	d002      	beq.n	800238c <HAL_UART_Transmit+0x24>
 8002386:	88fb      	ldrh	r3, [r7, #6]
 8002388:	2b00      	cmp	r3, #0
 800238a:	d101      	bne.n	8002390 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800238c:	2301      	movs	r3, #1
 800238e:	e06a      	b.n	8002466 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	2200      	movs	r2, #0
 8002394:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	2221      	movs	r2, #33	; 0x21
 800239c:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800239e:	f7fe fbfd 	bl	8000b9c <HAL_GetTick>
 80023a2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	88fa      	ldrh	r2, [r7, #6]
 80023a8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	88fa      	ldrh	r2, [r7, #6]
 80023b0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	689b      	ldr	r3, [r3, #8]
 80023b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80023bc:	d108      	bne.n	80023d0 <HAL_UART_Transmit+0x68>
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	691b      	ldr	r3, [r3, #16]
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d104      	bne.n	80023d0 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80023c6:	2300      	movs	r3, #0
 80023c8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80023ca:	68bb      	ldr	r3, [r7, #8]
 80023cc:	61bb      	str	r3, [r7, #24]
 80023ce:	e003      	b.n	80023d8 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80023d0:	68bb      	ldr	r3, [r7, #8]
 80023d2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80023d4:	2300      	movs	r3, #0
 80023d6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80023d8:	e02c      	b.n	8002434 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80023da:	683b      	ldr	r3, [r7, #0]
 80023dc:	9300      	str	r3, [sp, #0]
 80023de:	697b      	ldr	r3, [r7, #20]
 80023e0:	2200      	movs	r2, #0
 80023e2:	2180      	movs	r1, #128	; 0x80
 80023e4:	68f8      	ldr	r0, [r7, #12]
 80023e6:	f000 fc5a 	bl	8002c9e <UART_WaitOnFlagUntilTimeout>
 80023ea:	4603      	mov	r3, r0
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d001      	beq.n	80023f4 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 80023f0:	2303      	movs	r3, #3
 80023f2:	e038      	b.n	8002466 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 80023f4:	69fb      	ldr	r3, [r7, #28]
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d10b      	bne.n	8002412 <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80023fa:	69bb      	ldr	r3, [r7, #24]
 80023fc:	881b      	ldrh	r3, [r3, #0]
 80023fe:	461a      	mov	r2, r3
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002408:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800240a:	69bb      	ldr	r3, [r7, #24]
 800240c:	3302      	adds	r3, #2
 800240e:	61bb      	str	r3, [r7, #24]
 8002410:	e007      	b.n	8002422 <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002412:	69fb      	ldr	r3, [r7, #28]
 8002414:	781a      	ldrb	r2, [r3, #0]
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800241c:	69fb      	ldr	r3, [r7, #28]
 800241e:	3301      	adds	r3, #1
 8002420:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002428:	b29b      	uxth	r3, r3
 800242a:	3b01      	subs	r3, #1
 800242c:	b29a      	uxth	r2, r3
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800243a:	b29b      	uxth	r3, r3
 800243c:	2b00      	cmp	r3, #0
 800243e:	d1cc      	bne.n	80023da <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	9300      	str	r3, [sp, #0]
 8002444:	697b      	ldr	r3, [r7, #20]
 8002446:	2200      	movs	r2, #0
 8002448:	2140      	movs	r1, #64	; 0x40
 800244a:	68f8      	ldr	r0, [r7, #12]
 800244c:	f000 fc27 	bl	8002c9e <UART_WaitOnFlagUntilTimeout>
 8002450:	4603      	mov	r3, r0
 8002452:	2b00      	cmp	r3, #0
 8002454:	d001      	beq.n	800245a <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 8002456:	2303      	movs	r3, #3
 8002458:	e005      	b.n	8002466 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	2220      	movs	r2, #32
 800245e:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8002460:	2300      	movs	r3, #0
 8002462:	e000      	b.n	8002466 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8002464:	2302      	movs	r3, #2
  }
}
 8002466:	4618      	mov	r0, r3
 8002468:	3720      	adds	r7, #32
 800246a:	46bd      	mov	sp, r7
 800246c:	bd80      	pop	{r7, pc}

0800246e <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800246e:	b580      	push	{r7, lr}
 8002470:	b08a      	sub	sp, #40	; 0x28
 8002472:	af02      	add	r7, sp, #8
 8002474:	60f8      	str	r0, [r7, #12]
 8002476:	60b9      	str	r1, [r7, #8]
 8002478:	603b      	str	r3, [r7, #0]
 800247a:	4613      	mov	r3, r2
 800247c:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002484:	2b20      	cmp	r3, #32
 8002486:	f040 80b1 	bne.w	80025ec <HAL_UART_Receive+0x17e>
  {
    if ((pData == NULL) || (Size == 0U))
 800248a:	68bb      	ldr	r3, [r7, #8]
 800248c:	2b00      	cmp	r3, #0
 800248e:	d002      	beq.n	8002496 <HAL_UART_Receive+0x28>
 8002490:	88fb      	ldrh	r3, [r7, #6]
 8002492:	2b00      	cmp	r3, #0
 8002494:	d101      	bne.n	800249a <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8002496:	2301      	movs	r3, #1
 8002498:	e0a9      	b.n	80025ee <HAL_UART_Receive+0x180>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	2200      	movs	r2, #0
 800249e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	2222      	movs	r2, #34	; 0x22
 80024a6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	2200      	movs	r2, #0
 80024ae:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80024b0:	f7fe fb74 	bl	8000b9c <HAL_GetTick>
 80024b4:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	88fa      	ldrh	r2, [r7, #6]
 80024ba:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	88fa      	ldrh	r2, [r7, #6]
 80024c2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	689b      	ldr	r3, [r3, #8]
 80024ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80024ce:	d10e      	bne.n	80024ee <HAL_UART_Receive+0x80>
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	691b      	ldr	r3, [r3, #16]
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d105      	bne.n	80024e4 <HAL_UART_Receive+0x76>
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	f240 12ff 	movw	r2, #511	; 0x1ff
 80024de:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80024e2:	e02d      	b.n	8002540 <HAL_UART_Receive+0xd2>
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	22ff      	movs	r2, #255	; 0xff
 80024e8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80024ec:	e028      	b.n	8002540 <HAL_UART_Receive+0xd2>
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	689b      	ldr	r3, [r3, #8]
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d10d      	bne.n	8002512 <HAL_UART_Receive+0xa4>
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	691b      	ldr	r3, [r3, #16]
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d104      	bne.n	8002508 <HAL_UART_Receive+0x9a>
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	22ff      	movs	r2, #255	; 0xff
 8002502:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002506:	e01b      	b.n	8002540 <HAL_UART_Receive+0xd2>
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	227f      	movs	r2, #127	; 0x7f
 800250c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002510:	e016      	b.n	8002540 <HAL_UART_Receive+0xd2>
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	689b      	ldr	r3, [r3, #8]
 8002516:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800251a:	d10d      	bne.n	8002538 <HAL_UART_Receive+0xca>
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	691b      	ldr	r3, [r3, #16]
 8002520:	2b00      	cmp	r3, #0
 8002522:	d104      	bne.n	800252e <HAL_UART_Receive+0xc0>
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	227f      	movs	r2, #127	; 0x7f
 8002528:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800252c:	e008      	b.n	8002540 <HAL_UART_Receive+0xd2>
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	223f      	movs	r2, #63	; 0x3f
 8002532:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002536:	e003      	b.n	8002540 <HAL_UART_Receive+0xd2>
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	2200      	movs	r2, #0
 800253c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8002546:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	689b      	ldr	r3, [r3, #8]
 800254c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002550:	d108      	bne.n	8002564 <HAL_UART_Receive+0xf6>
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	691b      	ldr	r3, [r3, #16]
 8002556:	2b00      	cmp	r3, #0
 8002558:	d104      	bne.n	8002564 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 800255a:	2300      	movs	r3, #0
 800255c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800255e:	68bb      	ldr	r3, [r7, #8]
 8002560:	61bb      	str	r3, [r7, #24]
 8002562:	e003      	b.n	800256c <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8002564:	68bb      	ldr	r3, [r7, #8]
 8002566:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002568:	2300      	movs	r3, #0
 800256a:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800256c:	e032      	b.n	80025d4 <HAL_UART_Receive+0x166>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800256e:	683b      	ldr	r3, [r7, #0]
 8002570:	9300      	str	r3, [sp, #0]
 8002572:	697b      	ldr	r3, [r7, #20]
 8002574:	2200      	movs	r2, #0
 8002576:	2120      	movs	r1, #32
 8002578:	68f8      	ldr	r0, [r7, #12]
 800257a:	f000 fb90 	bl	8002c9e <UART_WaitOnFlagUntilTimeout>
 800257e:	4603      	mov	r3, r0
 8002580:	2b00      	cmp	r3, #0
 8002582:	d001      	beq.n	8002588 <HAL_UART_Receive+0x11a>
      {
        return HAL_TIMEOUT;
 8002584:	2303      	movs	r3, #3
 8002586:	e032      	b.n	80025ee <HAL_UART_Receive+0x180>
      }
      if (pdata8bits == NULL)
 8002588:	69fb      	ldr	r3, [r7, #28]
 800258a:	2b00      	cmp	r3, #0
 800258c:	d10c      	bne.n	80025a8 <HAL_UART_Receive+0x13a>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002594:	b29a      	uxth	r2, r3
 8002596:	8a7b      	ldrh	r3, [r7, #18]
 8002598:	4013      	ands	r3, r2
 800259a:	b29a      	uxth	r2, r3
 800259c:	69bb      	ldr	r3, [r7, #24]
 800259e:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80025a0:	69bb      	ldr	r3, [r7, #24]
 80025a2:	3302      	adds	r3, #2
 80025a4:	61bb      	str	r3, [r7, #24]
 80025a6:	e00c      	b.n	80025c2 <HAL_UART_Receive+0x154>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025ae:	b2da      	uxtb	r2, r3
 80025b0:	8a7b      	ldrh	r3, [r7, #18]
 80025b2:	b2db      	uxtb	r3, r3
 80025b4:	4013      	ands	r3, r2
 80025b6:	b2da      	uxtb	r2, r3
 80025b8:	69fb      	ldr	r3, [r7, #28]
 80025ba:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80025bc:	69fb      	ldr	r3, [r7, #28]
 80025be:	3301      	adds	r3, #1
 80025c0:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80025c8:	b29b      	uxth	r3, r3
 80025ca:	3b01      	subs	r3, #1
 80025cc:	b29a      	uxth	r2, r3
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80025da:	b29b      	uxth	r3, r3
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d1c6      	bne.n	800256e <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	2220      	movs	r2, #32
 80025e4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 80025e8:	2300      	movs	r3, #0
 80025ea:	e000      	b.n	80025ee <HAL_UART_Receive+0x180>
  }
  else
  {
    return HAL_BUSY;
 80025ec:	2302      	movs	r3, #2
  }
}
 80025ee:	4618      	mov	r0, r3
 80025f0:	3720      	adds	r7, #32
 80025f2:	46bd      	mov	sp, r7
 80025f4:	bd80      	pop	{r7, pc}
	...

080025f8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b088      	sub	sp, #32
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002600:	2300      	movs	r3, #0
 8002602:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	689a      	ldr	r2, [r3, #8]
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	691b      	ldr	r3, [r3, #16]
 800260c:	431a      	orrs	r2, r3
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	695b      	ldr	r3, [r3, #20]
 8002612:	431a      	orrs	r2, r3
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	69db      	ldr	r3, [r3, #28]
 8002618:	4313      	orrs	r3, r2
 800261a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	681a      	ldr	r2, [r3, #0]
 8002622:	4ba6      	ldr	r3, [pc, #664]	; (80028bc <UART_SetConfig+0x2c4>)
 8002624:	4013      	ands	r3, r2
 8002626:	687a      	ldr	r2, [r7, #4]
 8002628:	6812      	ldr	r2, [r2, #0]
 800262a:	6979      	ldr	r1, [r7, #20]
 800262c:	430b      	orrs	r3, r1
 800262e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	685b      	ldr	r3, [r3, #4]
 8002636:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	68da      	ldr	r2, [r3, #12]
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	430a      	orrs	r2, r1
 8002644:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	699b      	ldr	r3, [r3, #24]
 800264a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	6a1b      	ldr	r3, [r3, #32]
 8002650:	697a      	ldr	r2, [r7, #20]
 8002652:	4313      	orrs	r3, r2
 8002654:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	689b      	ldr	r3, [r3, #8]
 800265c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	697a      	ldr	r2, [r7, #20]
 8002666:	430a      	orrs	r2, r1
 8002668:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	4a94      	ldr	r2, [pc, #592]	; (80028c0 <UART_SetConfig+0x2c8>)
 8002670:	4293      	cmp	r3, r2
 8002672:	d120      	bne.n	80026b6 <UART_SetConfig+0xbe>
 8002674:	4b93      	ldr	r3, [pc, #588]	; (80028c4 <UART_SetConfig+0x2cc>)
 8002676:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800267a:	f003 0303 	and.w	r3, r3, #3
 800267e:	2b03      	cmp	r3, #3
 8002680:	d816      	bhi.n	80026b0 <UART_SetConfig+0xb8>
 8002682:	a201      	add	r2, pc, #4	; (adr r2, 8002688 <UART_SetConfig+0x90>)
 8002684:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002688:	08002699 	.word	0x08002699
 800268c:	080026a5 	.word	0x080026a5
 8002690:	0800269f 	.word	0x0800269f
 8002694:	080026ab 	.word	0x080026ab
 8002698:	2301      	movs	r3, #1
 800269a:	77fb      	strb	r3, [r7, #31]
 800269c:	e150      	b.n	8002940 <UART_SetConfig+0x348>
 800269e:	2302      	movs	r3, #2
 80026a0:	77fb      	strb	r3, [r7, #31]
 80026a2:	e14d      	b.n	8002940 <UART_SetConfig+0x348>
 80026a4:	2304      	movs	r3, #4
 80026a6:	77fb      	strb	r3, [r7, #31]
 80026a8:	e14a      	b.n	8002940 <UART_SetConfig+0x348>
 80026aa:	2308      	movs	r3, #8
 80026ac:	77fb      	strb	r3, [r7, #31]
 80026ae:	e147      	b.n	8002940 <UART_SetConfig+0x348>
 80026b0:	2310      	movs	r3, #16
 80026b2:	77fb      	strb	r3, [r7, #31]
 80026b4:	e144      	b.n	8002940 <UART_SetConfig+0x348>
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	4a83      	ldr	r2, [pc, #524]	; (80028c8 <UART_SetConfig+0x2d0>)
 80026bc:	4293      	cmp	r3, r2
 80026be:	d132      	bne.n	8002726 <UART_SetConfig+0x12e>
 80026c0:	4b80      	ldr	r3, [pc, #512]	; (80028c4 <UART_SetConfig+0x2cc>)
 80026c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026c6:	f003 030c 	and.w	r3, r3, #12
 80026ca:	2b0c      	cmp	r3, #12
 80026cc:	d828      	bhi.n	8002720 <UART_SetConfig+0x128>
 80026ce:	a201      	add	r2, pc, #4	; (adr r2, 80026d4 <UART_SetConfig+0xdc>)
 80026d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026d4:	08002709 	.word	0x08002709
 80026d8:	08002721 	.word	0x08002721
 80026dc:	08002721 	.word	0x08002721
 80026e0:	08002721 	.word	0x08002721
 80026e4:	08002715 	.word	0x08002715
 80026e8:	08002721 	.word	0x08002721
 80026ec:	08002721 	.word	0x08002721
 80026f0:	08002721 	.word	0x08002721
 80026f4:	0800270f 	.word	0x0800270f
 80026f8:	08002721 	.word	0x08002721
 80026fc:	08002721 	.word	0x08002721
 8002700:	08002721 	.word	0x08002721
 8002704:	0800271b 	.word	0x0800271b
 8002708:	2300      	movs	r3, #0
 800270a:	77fb      	strb	r3, [r7, #31]
 800270c:	e118      	b.n	8002940 <UART_SetConfig+0x348>
 800270e:	2302      	movs	r3, #2
 8002710:	77fb      	strb	r3, [r7, #31]
 8002712:	e115      	b.n	8002940 <UART_SetConfig+0x348>
 8002714:	2304      	movs	r3, #4
 8002716:	77fb      	strb	r3, [r7, #31]
 8002718:	e112      	b.n	8002940 <UART_SetConfig+0x348>
 800271a:	2308      	movs	r3, #8
 800271c:	77fb      	strb	r3, [r7, #31]
 800271e:	e10f      	b.n	8002940 <UART_SetConfig+0x348>
 8002720:	2310      	movs	r3, #16
 8002722:	77fb      	strb	r3, [r7, #31]
 8002724:	e10c      	b.n	8002940 <UART_SetConfig+0x348>
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	4a68      	ldr	r2, [pc, #416]	; (80028cc <UART_SetConfig+0x2d4>)
 800272c:	4293      	cmp	r3, r2
 800272e:	d120      	bne.n	8002772 <UART_SetConfig+0x17a>
 8002730:	4b64      	ldr	r3, [pc, #400]	; (80028c4 <UART_SetConfig+0x2cc>)
 8002732:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002736:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800273a:	2b30      	cmp	r3, #48	; 0x30
 800273c:	d013      	beq.n	8002766 <UART_SetConfig+0x16e>
 800273e:	2b30      	cmp	r3, #48	; 0x30
 8002740:	d814      	bhi.n	800276c <UART_SetConfig+0x174>
 8002742:	2b20      	cmp	r3, #32
 8002744:	d009      	beq.n	800275a <UART_SetConfig+0x162>
 8002746:	2b20      	cmp	r3, #32
 8002748:	d810      	bhi.n	800276c <UART_SetConfig+0x174>
 800274a:	2b00      	cmp	r3, #0
 800274c:	d002      	beq.n	8002754 <UART_SetConfig+0x15c>
 800274e:	2b10      	cmp	r3, #16
 8002750:	d006      	beq.n	8002760 <UART_SetConfig+0x168>
 8002752:	e00b      	b.n	800276c <UART_SetConfig+0x174>
 8002754:	2300      	movs	r3, #0
 8002756:	77fb      	strb	r3, [r7, #31]
 8002758:	e0f2      	b.n	8002940 <UART_SetConfig+0x348>
 800275a:	2302      	movs	r3, #2
 800275c:	77fb      	strb	r3, [r7, #31]
 800275e:	e0ef      	b.n	8002940 <UART_SetConfig+0x348>
 8002760:	2304      	movs	r3, #4
 8002762:	77fb      	strb	r3, [r7, #31]
 8002764:	e0ec      	b.n	8002940 <UART_SetConfig+0x348>
 8002766:	2308      	movs	r3, #8
 8002768:	77fb      	strb	r3, [r7, #31]
 800276a:	e0e9      	b.n	8002940 <UART_SetConfig+0x348>
 800276c:	2310      	movs	r3, #16
 800276e:	77fb      	strb	r3, [r7, #31]
 8002770:	e0e6      	b.n	8002940 <UART_SetConfig+0x348>
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	4a56      	ldr	r2, [pc, #344]	; (80028d0 <UART_SetConfig+0x2d8>)
 8002778:	4293      	cmp	r3, r2
 800277a:	d120      	bne.n	80027be <UART_SetConfig+0x1c6>
 800277c:	4b51      	ldr	r3, [pc, #324]	; (80028c4 <UART_SetConfig+0x2cc>)
 800277e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002782:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002786:	2bc0      	cmp	r3, #192	; 0xc0
 8002788:	d013      	beq.n	80027b2 <UART_SetConfig+0x1ba>
 800278a:	2bc0      	cmp	r3, #192	; 0xc0
 800278c:	d814      	bhi.n	80027b8 <UART_SetConfig+0x1c0>
 800278e:	2b80      	cmp	r3, #128	; 0x80
 8002790:	d009      	beq.n	80027a6 <UART_SetConfig+0x1ae>
 8002792:	2b80      	cmp	r3, #128	; 0x80
 8002794:	d810      	bhi.n	80027b8 <UART_SetConfig+0x1c0>
 8002796:	2b00      	cmp	r3, #0
 8002798:	d002      	beq.n	80027a0 <UART_SetConfig+0x1a8>
 800279a:	2b40      	cmp	r3, #64	; 0x40
 800279c:	d006      	beq.n	80027ac <UART_SetConfig+0x1b4>
 800279e:	e00b      	b.n	80027b8 <UART_SetConfig+0x1c0>
 80027a0:	2300      	movs	r3, #0
 80027a2:	77fb      	strb	r3, [r7, #31]
 80027a4:	e0cc      	b.n	8002940 <UART_SetConfig+0x348>
 80027a6:	2302      	movs	r3, #2
 80027a8:	77fb      	strb	r3, [r7, #31]
 80027aa:	e0c9      	b.n	8002940 <UART_SetConfig+0x348>
 80027ac:	2304      	movs	r3, #4
 80027ae:	77fb      	strb	r3, [r7, #31]
 80027b0:	e0c6      	b.n	8002940 <UART_SetConfig+0x348>
 80027b2:	2308      	movs	r3, #8
 80027b4:	77fb      	strb	r3, [r7, #31]
 80027b6:	e0c3      	b.n	8002940 <UART_SetConfig+0x348>
 80027b8:	2310      	movs	r3, #16
 80027ba:	77fb      	strb	r3, [r7, #31]
 80027bc:	e0c0      	b.n	8002940 <UART_SetConfig+0x348>
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	4a44      	ldr	r2, [pc, #272]	; (80028d4 <UART_SetConfig+0x2dc>)
 80027c4:	4293      	cmp	r3, r2
 80027c6:	d125      	bne.n	8002814 <UART_SetConfig+0x21c>
 80027c8:	4b3e      	ldr	r3, [pc, #248]	; (80028c4 <UART_SetConfig+0x2cc>)
 80027ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80027d2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80027d6:	d017      	beq.n	8002808 <UART_SetConfig+0x210>
 80027d8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80027dc:	d817      	bhi.n	800280e <UART_SetConfig+0x216>
 80027de:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80027e2:	d00b      	beq.n	80027fc <UART_SetConfig+0x204>
 80027e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80027e8:	d811      	bhi.n	800280e <UART_SetConfig+0x216>
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d003      	beq.n	80027f6 <UART_SetConfig+0x1fe>
 80027ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80027f2:	d006      	beq.n	8002802 <UART_SetConfig+0x20a>
 80027f4:	e00b      	b.n	800280e <UART_SetConfig+0x216>
 80027f6:	2300      	movs	r3, #0
 80027f8:	77fb      	strb	r3, [r7, #31]
 80027fa:	e0a1      	b.n	8002940 <UART_SetConfig+0x348>
 80027fc:	2302      	movs	r3, #2
 80027fe:	77fb      	strb	r3, [r7, #31]
 8002800:	e09e      	b.n	8002940 <UART_SetConfig+0x348>
 8002802:	2304      	movs	r3, #4
 8002804:	77fb      	strb	r3, [r7, #31]
 8002806:	e09b      	b.n	8002940 <UART_SetConfig+0x348>
 8002808:	2308      	movs	r3, #8
 800280a:	77fb      	strb	r3, [r7, #31]
 800280c:	e098      	b.n	8002940 <UART_SetConfig+0x348>
 800280e:	2310      	movs	r3, #16
 8002810:	77fb      	strb	r3, [r7, #31]
 8002812:	e095      	b.n	8002940 <UART_SetConfig+0x348>
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	4a2f      	ldr	r2, [pc, #188]	; (80028d8 <UART_SetConfig+0x2e0>)
 800281a:	4293      	cmp	r3, r2
 800281c:	d125      	bne.n	800286a <UART_SetConfig+0x272>
 800281e:	4b29      	ldr	r3, [pc, #164]	; (80028c4 <UART_SetConfig+0x2cc>)
 8002820:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002824:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002828:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800282c:	d017      	beq.n	800285e <UART_SetConfig+0x266>
 800282e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002832:	d817      	bhi.n	8002864 <UART_SetConfig+0x26c>
 8002834:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002838:	d00b      	beq.n	8002852 <UART_SetConfig+0x25a>
 800283a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800283e:	d811      	bhi.n	8002864 <UART_SetConfig+0x26c>
 8002840:	2b00      	cmp	r3, #0
 8002842:	d003      	beq.n	800284c <UART_SetConfig+0x254>
 8002844:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002848:	d006      	beq.n	8002858 <UART_SetConfig+0x260>
 800284a:	e00b      	b.n	8002864 <UART_SetConfig+0x26c>
 800284c:	2301      	movs	r3, #1
 800284e:	77fb      	strb	r3, [r7, #31]
 8002850:	e076      	b.n	8002940 <UART_SetConfig+0x348>
 8002852:	2302      	movs	r3, #2
 8002854:	77fb      	strb	r3, [r7, #31]
 8002856:	e073      	b.n	8002940 <UART_SetConfig+0x348>
 8002858:	2304      	movs	r3, #4
 800285a:	77fb      	strb	r3, [r7, #31]
 800285c:	e070      	b.n	8002940 <UART_SetConfig+0x348>
 800285e:	2308      	movs	r3, #8
 8002860:	77fb      	strb	r3, [r7, #31]
 8002862:	e06d      	b.n	8002940 <UART_SetConfig+0x348>
 8002864:	2310      	movs	r3, #16
 8002866:	77fb      	strb	r3, [r7, #31]
 8002868:	e06a      	b.n	8002940 <UART_SetConfig+0x348>
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	4a1b      	ldr	r2, [pc, #108]	; (80028dc <UART_SetConfig+0x2e4>)
 8002870:	4293      	cmp	r3, r2
 8002872:	d138      	bne.n	80028e6 <UART_SetConfig+0x2ee>
 8002874:	4b13      	ldr	r3, [pc, #76]	; (80028c4 <UART_SetConfig+0x2cc>)
 8002876:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800287a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800287e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002882:	d017      	beq.n	80028b4 <UART_SetConfig+0x2bc>
 8002884:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002888:	d82a      	bhi.n	80028e0 <UART_SetConfig+0x2e8>
 800288a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800288e:	d00b      	beq.n	80028a8 <UART_SetConfig+0x2b0>
 8002890:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002894:	d824      	bhi.n	80028e0 <UART_SetConfig+0x2e8>
 8002896:	2b00      	cmp	r3, #0
 8002898:	d003      	beq.n	80028a2 <UART_SetConfig+0x2aa>
 800289a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800289e:	d006      	beq.n	80028ae <UART_SetConfig+0x2b6>
 80028a0:	e01e      	b.n	80028e0 <UART_SetConfig+0x2e8>
 80028a2:	2300      	movs	r3, #0
 80028a4:	77fb      	strb	r3, [r7, #31]
 80028a6:	e04b      	b.n	8002940 <UART_SetConfig+0x348>
 80028a8:	2302      	movs	r3, #2
 80028aa:	77fb      	strb	r3, [r7, #31]
 80028ac:	e048      	b.n	8002940 <UART_SetConfig+0x348>
 80028ae:	2304      	movs	r3, #4
 80028b0:	77fb      	strb	r3, [r7, #31]
 80028b2:	e045      	b.n	8002940 <UART_SetConfig+0x348>
 80028b4:	2308      	movs	r3, #8
 80028b6:	77fb      	strb	r3, [r7, #31]
 80028b8:	e042      	b.n	8002940 <UART_SetConfig+0x348>
 80028ba:	bf00      	nop
 80028bc:	efff69f3 	.word	0xefff69f3
 80028c0:	40011000 	.word	0x40011000
 80028c4:	40023800 	.word	0x40023800
 80028c8:	40004400 	.word	0x40004400
 80028cc:	40004800 	.word	0x40004800
 80028d0:	40004c00 	.word	0x40004c00
 80028d4:	40005000 	.word	0x40005000
 80028d8:	40011400 	.word	0x40011400
 80028dc:	40007800 	.word	0x40007800
 80028e0:	2310      	movs	r3, #16
 80028e2:	77fb      	strb	r3, [r7, #31]
 80028e4:	e02c      	b.n	8002940 <UART_SetConfig+0x348>
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	4a72      	ldr	r2, [pc, #456]	; (8002ab4 <UART_SetConfig+0x4bc>)
 80028ec:	4293      	cmp	r3, r2
 80028ee:	d125      	bne.n	800293c <UART_SetConfig+0x344>
 80028f0:	4b71      	ldr	r3, [pc, #452]	; (8002ab8 <UART_SetConfig+0x4c0>)
 80028f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028f6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80028fa:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80028fe:	d017      	beq.n	8002930 <UART_SetConfig+0x338>
 8002900:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8002904:	d817      	bhi.n	8002936 <UART_SetConfig+0x33e>
 8002906:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800290a:	d00b      	beq.n	8002924 <UART_SetConfig+0x32c>
 800290c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002910:	d811      	bhi.n	8002936 <UART_SetConfig+0x33e>
 8002912:	2b00      	cmp	r3, #0
 8002914:	d003      	beq.n	800291e <UART_SetConfig+0x326>
 8002916:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800291a:	d006      	beq.n	800292a <UART_SetConfig+0x332>
 800291c:	e00b      	b.n	8002936 <UART_SetConfig+0x33e>
 800291e:	2300      	movs	r3, #0
 8002920:	77fb      	strb	r3, [r7, #31]
 8002922:	e00d      	b.n	8002940 <UART_SetConfig+0x348>
 8002924:	2302      	movs	r3, #2
 8002926:	77fb      	strb	r3, [r7, #31]
 8002928:	e00a      	b.n	8002940 <UART_SetConfig+0x348>
 800292a:	2304      	movs	r3, #4
 800292c:	77fb      	strb	r3, [r7, #31]
 800292e:	e007      	b.n	8002940 <UART_SetConfig+0x348>
 8002930:	2308      	movs	r3, #8
 8002932:	77fb      	strb	r3, [r7, #31]
 8002934:	e004      	b.n	8002940 <UART_SetConfig+0x348>
 8002936:	2310      	movs	r3, #16
 8002938:	77fb      	strb	r3, [r7, #31]
 800293a:	e001      	b.n	8002940 <UART_SetConfig+0x348>
 800293c:	2310      	movs	r3, #16
 800293e:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	69db      	ldr	r3, [r3, #28]
 8002944:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002948:	d15b      	bne.n	8002a02 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800294a:	7ffb      	ldrb	r3, [r7, #31]
 800294c:	2b08      	cmp	r3, #8
 800294e:	d828      	bhi.n	80029a2 <UART_SetConfig+0x3aa>
 8002950:	a201      	add	r2, pc, #4	; (adr r2, 8002958 <UART_SetConfig+0x360>)
 8002952:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002956:	bf00      	nop
 8002958:	0800297d 	.word	0x0800297d
 800295c:	08002985 	.word	0x08002985
 8002960:	0800298d 	.word	0x0800298d
 8002964:	080029a3 	.word	0x080029a3
 8002968:	08002993 	.word	0x08002993
 800296c:	080029a3 	.word	0x080029a3
 8002970:	080029a3 	.word	0x080029a3
 8002974:	080029a3 	.word	0x080029a3
 8002978:	0800299b 	.word	0x0800299b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800297c:	f7ff f856 	bl	8001a2c <HAL_RCC_GetPCLK1Freq>
 8002980:	61b8      	str	r0, [r7, #24]
        break;
 8002982:	e013      	b.n	80029ac <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002984:	f7ff f866 	bl	8001a54 <HAL_RCC_GetPCLK2Freq>
 8002988:	61b8      	str	r0, [r7, #24]
        break;
 800298a:	e00f      	b.n	80029ac <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800298c:	4b4b      	ldr	r3, [pc, #300]	; (8002abc <UART_SetConfig+0x4c4>)
 800298e:	61bb      	str	r3, [r7, #24]
        break;
 8002990:	e00c      	b.n	80029ac <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002992:	f7fe ff79 	bl	8001888 <HAL_RCC_GetSysClockFreq>
 8002996:	61b8      	str	r0, [r7, #24]
        break;
 8002998:	e008      	b.n	80029ac <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800299a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800299e:	61bb      	str	r3, [r7, #24]
        break;
 80029a0:	e004      	b.n	80029ac <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80029a2:	2300      	movs	r3, #0
 80029a4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80029a6:	2301      	movs	r3, #1
 80029a8:	77bb      	strb	r3, [r7, #30]
        break;
 80029aa:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80029ac:	69bb      	ldr	r3, [r7, #24]
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d074      	beq.n	8002a9c <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80029b2:	69bb      	ldr	r3, [r7, #24]
 80029b4:	005a      	lsls	r2, r3, #1
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	685b      	ldr	r3, [r3, #4]
 80029ba:	085b      	lsrs	r3, r3, #1
 80029bc:	441a      	add	r2, r3
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	685b      	ldr	r3, [r3, #4]
 80029c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80029c6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80029c8:	693b      	ldr	r3, [r7, #16]
 80029ca:	2b0f      	cmp	r3, #15
 80029cc:	d916      	bls.n	80029fc <UART_SetConfig+0x404>
 80029ce:	693b      	ldr	r3, [r7, #16]
 80029d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80029d4:	d212      	bcs.n	80029fc <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80029d6:	693b      	ldr	r3, [r7, #16]
 80029d8:	b29b      	uxth	r3, r3
 80029da:	f023 030f 	bic.w	r3, r3, #15
 80029de:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80029e0:	693b      	ldr	r3, [r7, #16]
 80029e2:	085b      	lsrs	r3, r3, #1
 80029e4:	b29b      	uxth	r3, r3
 80029e6:	f003 0307 	and.w	r3, r3, #7
 80029ea:	b29a      	uxth	r2, r3
 80029ec:	89fb      	ldrh	r3, [r7, #14]
 80029ee:	4313      	orrs	r3, r2
 80029f0:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	89fa      	ldrh	r2, [r7, #14]
 80029f8:	60da      	str	r2, [r3, #12]
 80029fa:	e04f      	b.n	8002a9c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80029fc:	2301      	movs	r3, #1
 80029fe:	77bb      	strb	r3, [r7, #30]
 8002a00:	e04c      	b.n	8002a9c <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002a02:	7ffb      	ldrb	r3, [r7, #31]
 8002a04:	2b08      	cmp	r3, #8
 8002a06:	d828      	bhi.n	8002a5a <UART_SetConfig+0x462>
 8002a08:	a201      	add	r2, pc, #4	; (adr r2, 8002a10 <UART_SetConfig+0x418>)
 8002a0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a0e:	bf00      	nop
 8002a10:	08002a35 	.word	0x08002a35
 8002a14:	08002a3d 	.word	0x08002a3d
 8002a18:	08002a45 	.word	0x08002a45
 8002a1c:	08002a5b 	.word	0x08002a5b
 8002a20:	08002a4b 	.word	0x08002a4b
 8002a24:	08002a5b 	.word	0x08002a5b
 8002a28:	08002a5b 	.word	0x08002a5b
 8002a2c:	08002a5b 	.word	0x08002a5b
 8002a30:	08002a53 	.word	0x08002a53
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002a34:	f7fe fffa 	bl	8001a2c <HAL_RCC_GetPCLK1Freq>
 8002a38:	61b8      	str	r0, [r7, #24]
        break;
 8002a3a:	e013      	b.n	8002a64 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002a3c:	f7ff f80a 	bl	8001a54 <HAL_RCC_GetPCLK2Freq>
 8002a40:	61b8      	str	r0, [r7, #24]
        break;
 8002a42:	e00f      	b.n	8002a64 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002a44:	4b1d      	ldr	r3, [pc, #116]	; (8002abc <UART_SetConfig+0x4c4>)
 8002a46:	61bb      	str	r3, [r7, #24]
        break;
 8002a48:	e00c      	b.n	8002a64 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002a4a:	f7fe ff1d 	bl	8001888 <HAL_RCC_GetSysClockFreq>
 8002a4e:	61b8      	str	r0, [r7, #24]
        break;
 8002a50:	e008      	b.n	8002a64 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002a52:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002a56:	61bb      	str	r3, [r7, #24]
        break;
 8002a58:	e004      	b.n	8002a64 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002a5e:	2301      	movs	r3, #1
 8002a60:	77bb      	strb	r3, [r7, #30]
        break;
 8002a62:	bf00      	nop
    }

    if (pclk != 0U)
 8002a64:	69bb      	ldr	r3, [r7, #24]
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d018      	beq.n	8002a9c <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	685b      	ldr	r3, [r3, #4]
 8002a6e:	085a      	lsrs	r2, r3, #1
 8002a70:	69bb      	ldr	r3, [r7, #24]
 8002a72:	441a      	add	r2, r3
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	685b      	ldr	r3, [r3, #4]
 8002a78:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a7c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002a7e:	693b      	ldr	r3, [r7, #16]
 8002a80:	2b0f      	cmp	r3, #15
 8002a82:	d909      	bls.n	8002a98 <UART_SetConfig+0x4a0>
 8002a84:	693b      	ldr	r3, [r7, #16]
 8002a86:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a8a:	d205      	bcs.n	8002a98 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002a8c:	693b      	ldr	r3, [r7, #16]
 8002a8e:	b29a      	uxth	r2, r3
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	60da      	str	r2, [r3, #12]
 8002a96:	e001      	b.n	8002a9c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8002a98:	2301      	movs	r3, #1
 8002a9a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8002aa8:	7fbb      	ldrb	r3, [r7, #30]
}
 8002aaa:	4618      	mov	r0, r3
 8002aac:	3720      	adds	r7, #32
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	bd80      	pop	{r7, pc}
 8002ab2:	bf00      	nop
 8002ab4:	40007c00 	.word	0x40007c00
 8002ab8:	40023800 	.word	0x40023800
 8002abc:	00f42400 	.word	0x00f42400

08002ac0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002ac0:	b480      	push	{r7}
 8002ac2:	b083      	sub	sp, #12
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002acc:	f003 0301 	and.w	r3, r3, #1
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d00a      	beq.n	8002aea <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	685b      	ldr	r3, [r3, #4]
 8002ada:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	430a      	orrs	r2, r1
 8002ae8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aee:	f003 0302 	and.w	r3, r3, #2
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d00a      	beq.n	8002b0c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	685b      	ldr	r3, [r3, #4]
 8002afc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	430a      	orrs	r2, r1
 8002b0a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b10:	f003 0304 	and.w	r3, r3, #4
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d00a      	beq.n	8002b2e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	685b      	ldr	r3, [r3, #4]
 8002b1e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	430a      	orrs	r2, r1
 8002b2c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b32:	f003 0308 	and.w	r3, r3, #8
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d00a      	beq.n	8002b50 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	685b      	ldr	r3, [r3, #4]
 8002b40:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	430a      	orrs	r2, r1
 8002b4e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b54:	f003 0310 	and.w	r3, r3, #16
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d00a      	beq.n	8002b72 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	689b      	ldr	r3, [r3, #8]
 8002b62:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	430a      	orrs	r2, r1
 8002b70:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b76:	f003 0320 	and.w	r3, r3, #32
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d00a      	beq.n	8002b94 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	689b      	ldr	r3, [r3, #8]
 8002b84:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	430a      	orrs	r2, r1
 8002b92:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d01a      	beq.n	8002bd6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	685b      	ldr	r3, [r3, #4]
 8002ba6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	430a      	orrs	r2, r1
 8002bb4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002bbe:	d10a      	bne.n	8002bd6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	685b      	ldr	r3, [r3, #4]
 8002bc6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	430a      	orrs	r2, r1
 8002bd4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d00a      	beq.n	8002bf8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	685b      	ldr	r3, [r3, #4]
 8002be8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	430a      	orrs	r2, r1
 8002bf6:	605a      	str	r2, [r3, #4]
  }
}
 8002bf8:	bf00      	nop
 8002bfa:	370c      	adds	r7, #12
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c02:	4770      	bx	lr

08002c04 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002c04:	b580      	push	{r7, lr}
 8002c06:	b086      	sub	sp, #24
 8002c08:	af02      	add	r7, sp, #8
 8002c0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	2200      	movs	r2, #0
 8002c10:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002c14:	f7fd ffc2 	bl	8000b9c <HAL_GetTick>
 8002c18:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f003 0308 	and.w	r3, r3, #8
 8002c24:	2b08      	cmp	r3, #8
 8002c26:	d10e      	bne.n	8002c46 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002c28:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002c2c:	9300      	str	r3, [sp, #0]
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	2200      	movs	r2, #0
 8002c32:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8002c36:	6878      	ldr	r0, [r7, #4]
 8002c38:	f000 f831 	bl	8002c9e <UART_WaitOnFlagUntilTimeout>
 8002c3c:	4603      	mov	r3, r0
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d001      	beq.n	8002c46 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002c42:	2303      	movs	r3, #3
 8002c44:	e027      	b.n	8002c96 <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f003 0304 	and.w	r3, r3, #4
 8002c50:	2b04      	cmp	r3, #4
 8002c52:	d10e      	bne.n	8002c72 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002c54:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002c58:	9300      	str	r3, [sp, #0]
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8002c62:	6878      	ldr	r0, [r7, #4]
 8002c64:	f000 f81b 	bl	8002c9e <UART_WaitOnFlagUntilTimeout>
 8002c68:	4603      	mov	r3, r0
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d001      	beq.n	8002c72 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002c6e:	2303      	movs	r3, #3
 8002c70:	e011      	b.n	8002c96 <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	2220      	movs	r2, #32
 8002c76:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	2220      	movs	r2, #32
 8002c7c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	2200      	movs	r2, #0
 8002c84:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	2200      	movs	r2, #0
 8002c8a:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	2200      	movs	r2, #0
 8002c90:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8002c94:	2300      	movs	r3, #0
}
 8002c96:	4618      	mov	r0, r3
 8002c98:	3710      	adds	r7, #16
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	bd80      	pop	{r7, pc}

08002c9e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002c9e:	b580      	push	{r7, lr}
 8002ca0:	b09c      	sub	sp, #112	; 0x70
 8002ca2:	af00      	add	r7, sp, #0
 8002ca4:	60f8      	str	r0, [r7, #12]
 8002ca6:	60b9      	str	r1, [r7, #8]
 8002ca8:	603b      	str	r3, [r7, #0]
 8002caa:	4613      	mov	r3, r2
 8002cac:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002cae:	e0a7      	b.n	8002e00 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002cb0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002cb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cb6:	f000 80a3 	beq.w	8002e00 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002cba:	f7fd ff6f 	bl	8000b9c <HAL_GetTick>
 8002cbe:	4602      	mov	r2, r0
 8002cc0:	683b      	ldr	r3, [r7, #0]
 8002cc2:	1ad3      	subs	r3, r2, r3
 8002cc4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8002cc6:	429a      	cmp	r2, r3
 8002cc8:	d302      	bcc.n	8002cd0 <UART_WaitOnFlagUntilTimeout+0x32>
 8002cca:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d13f      	bne.n	8002d50 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002cd6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002cd8:	e853 3f00 	ldrex	r3, [r3]
 8002cdc:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8002cde:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ce0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002ce4:	667b      	str	r3, [r7, #100]	; 0x64
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	461a      	mov	r2, r3
 8002cec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002cee:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002cf0:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002cf2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8002cf4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8002cf6:	e841 2300 	strex	r3, r2, [r1]
 8002cfa:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8002cfc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d1e6      	bne.n	8002cd0 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	3308      	adds	r3, #8
 8002d08:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002d0c:	e853 3f00 	ldrex	r3, [r3]
 8002d10:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002d12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d14:	f023 0301 	bic.w	r3, r3, #1
 8002d18:	663b      	str	r3, [r7, #96]	; 0x60
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	3308      	adds	r3, #8
 8002d20:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002d22:	64ba      	str	r2, [r7, #72]	; 0x48
 8002d24:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d26:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8002d28:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002d2a:	e841 2300 	strex	r3, r2, [r1]
 8002d2e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8002d30:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d1e5      	bne.n	8002d02 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	2220      	movs	r2, #32
 8002d3a:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	2220      	movs	r2, #32
 8002d40:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	2200      	movs	r2, #0
 8002d48:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8002d4c:	2303      	movs	r3, #3
 8002d4e:	e068      	b.n	8002e22 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f003 0304 	and.w	r3, r3, #4
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d050      	beq.n	8002e00 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	69db      	ldr	r3, [r3, #28]
 8002d64:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002d68:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002d6c:	d148      	bne.n	8002e00 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002d76:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d80:	e853 3f00 	ldrex	r3, [r3]
 8002d84:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002d86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d88:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002d8c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	461a      	mov	r2, r3
 8002d94:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002d96:	637b      	str	r3, [r7, #52]	; 0x34
 8002d98:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d9a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002d9c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002d9e:	e841 2300 	strex	r3, r2, [r1]
 8002da2:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002da4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d1e6      	bne.n	8002d78 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	3308      	adds	r3, #8
 8002db0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002db2:	697b      	ldr	r3, [r7, #20]
 8002db4:	e853 3f00 	ldrex	r3, [r3]
 8002db8:	613b      	str	r3, [r7, #16]
   return(result);
 8002dba:	693b      	ldr	r3, [r7, #16]
 8002dbc:	f023 0301 	bic.w	r3, r3, #1
 8002dc0:	66bb      	str	r3, [r7, #104]	; 0x68
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	3308      	adds	r3, #8
 8002dc8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8002dca:	623a      	str	r2, [r7, #32]
 8002dcc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002dce:	69f9      	ldr	r1, [r7, #28]
 8002dd0:	6a3a      	ldr	r2, [r7, #32]
 8002dd2:	e841 2300 	strex	r3, r2, [r1]
 8002dd6:	61bb      	str	r3, [r7, #24]
   return(result);
 8002dd8:	69bb      	ldr	r3, [r7, #24]
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d1e5      	bne.n	8002daa <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	2220      	movs	r2, #32
 8002de2:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	2220      	movs	r2, #32
 8002de8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	2220      	movs	r2, #32
 8002df0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	2200      	movs	r2, #0
 8002df8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8002dfc:	2303      	movs	r3, #3
 8002dfe:	e010      	b.n	8002e22 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	69da      	ldr	r2, [r3, #28]
 8002e06:	68bb      	ldr	r3, [r7, #8]
 8002e08:	4013      	ands	r3, r2
 8002e0a:	68ba      	ldr	r2, [r7, #8]
 8002e0c:	429a      	cmp	r2, r3
 8002e0e:	bf0c      	ite	eq
 8002e10:	2301      	moveq	r3, #1
 8002e12:	2300      	movne	r3, #0
 8002e14:	b2db      	uxtb	r3, r3
 8002e16:	461a      	mov	r2, r3
 8002e18:	79fb      	ldrb	r3, [r7, #7]
 8002e1a:	429a      	cmp	r2, r3
 8002e1c:	f43f af48 	beq.w	8002cb0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002e20:	2300      	movs	r3, #0
}
 8002e22:	4618      	mov	r0, r3
 8002e24:	3770      	adds	r7, #112	; 0x70
 8002e26:	46bd      	mov	sp, r7
 8002e28:	bd80      	pop	{r7, pc}

08002e2a <memset>:
 8002e2a:	4402      	add	r2, r0
 8002e2c:	4603      	mov	r3, r0
 8002e2e:	4293      	cmp	r3, r2
 8002e30:	d100      	bne.n	8002e34 <memset+0xa>
 8002e32:	4770      	bx	lr
 8002e34:	f803 1b01 	strb.w	r1, [r3], #1
 8002e38:	e7f9      	b.n	8002e2e <memset+0x4>
	...

08002e3c <__libc_init_array>:
 8002e3c:	b570      	push	{r4, r5, r6, lr}
 8002e3e:	4d0d      	ldr	r5, [pc, #52]	; (8002e74 <__libc_init_array+0x38>)
 8002e40:	4c0d      	ldr	r4, [pc, #52]	; (8002e78 <__libc_init_array+0x3c>)
 8002e42:	1b64      	subs	r4, r4, r5
 8002e44:	10a4      	asrs	r4, r4, #2
 8002e46:	2600      	movs	r6, #0
 8002e48:	42a6      	cmp	r6, r4
 8002e4a:	d109      	bne.n	8002e60 <__libc_init_array+0x24>
 8002e4c:	4d0b      	ldr	r5, [pc, #44]	; (8002e7c <__libc_init_array+0x40>)
 8002e4e:	4c0c      	ldr	r4, [pc, #48]	; (8002e80 <__libc_init_array+0x44>)
 8002e50:	f000 f826 	bl	8002ea0 <_init>
 8002e54:	1b64      	subs	r4, r4, r5
 8002e56:	10a4      	asrs	r4, r4, #2
 8002e58:	2600      	movs	r6, #0
 8002e5a:	42a6      	cmp	r6, r4
 8002e5c:	d105      	bne.n	8002e6a <__libc_init_array+0x2e>
 8002e5e:	bd70      	pop	{r4, r5, r6, pc}
 8002e60:	f855 3b04 	ldr.w	r3, [r5], #4
 8002e64:	4798      	blx	r3
 8002e66:	3601      	adds	r6, #1
 8002e68:	e7ee      	b.n	8002e48 <__libc_init_array+0xc>
 8002e6a:	f855 3b04 	ldr.w	r3, [r5], #4
 8002e6e:	4798      	blx	r3
 8002e70:	3601      	adds	r6, #1
 8002e72:	e7f2      	b.n	8002e5a <__libc_init_array+0x1e>
 8002e74:	08002f7c 	.word	0x08002f7c
 8002e78:	08002f7c 	.word	0x08002f7c
 8002e7c:	08002f7c 	.word	0x08002f7c
 8002e80:	08002f80 	.word	0x08002f80

08002e84 <memcpy>:
 8002e84:	440a      	add	r2, r1
 8002e86:	4291      	cmp	r1, r2
 8002e88:	f100 33ff 	add.w	r3, r0, #4294967295
 8002e8c:	d100      	bne.n	8002e90 <memcpy+0xc>
 8002e8e:	4770      	bx	lr
 8002e90:	b510      	push	{r4, lr}
 8002e92:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002e96:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002e9a:	4291      	cmp	r1, r2
 8002e9c:	d1f9      	bne.n	8002e92 <memcpy+0xe>
 8002e9e:	bd10      	pop	{r4, pc}

08002ea0 <_init>:
 8002ea0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ea2:	bf00      	nop
 8002ea4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002ea6:	bc08      	pop	{r3}
 8002ea8:	469e      	mov	lr, r3
 8002eaa:	4770      	bx	lr

08002eac <_fini>:
 8002eac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002eae:	bf00      	nop
 8002eb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002eb2:	bc08      	pop	{r3}
 8002eb4:	469e      	mov	lr, r3
 8002eb6:	4770      	bx	lr
